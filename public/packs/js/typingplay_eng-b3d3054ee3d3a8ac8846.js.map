{"version":3,"file":"js/typingplay_eng-b3d3054ee3d3a8ac8846.js","sources":["webpack:///webpack/bootstrap","webpack:///./app/javascript/packs/typingplay_eng.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/packs/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/javascript/packs/typingplay_eng.js\");\n","// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function(){\n\tgameStart();\n});\n\n  // 選択した英単語難易度によって変わるwordListの定義\n  const wordList = gon.wordListAll;\n\n  // 選択したプレイモードによって変わるplayModeの定義\n  const playMode = gon.playMode;\n\n\n\nfunction gameStart(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 1;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n\n\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n\t\t// カウントダウン文字を１ずつ減らす。\n\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\tif (countDownPopupNumber <= 0){\n\t\tclearInterval(timerIdToStart);\n\t\t// カウントダウンポップアップのクラスを変更し、非表示にする。\n\t\tcountDownPopup.className = \"countDownPopupAfterClose\";\n\t\ttypingPlayStart();\n\t\t} else {\n\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t}\n  }\n\n\t// ゲームを開始する処理を定義する。\n\tfunction typingPlayStart(){\n\n\t\t// 表示する単語を定義する。\n\t\tconst displayWord = document.getElementById(\"displayWord\");\n\t\tdisplayWord.className =  \"displayWord\";\n\t\tconst displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n\t\tdisplayWordJapanese.className =  \"displayWordJapanese\";\n\t\tconst displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n\t\tdisplayWordAnnotation.className =  \"transparent\";\n\t\t// 表示する単語を一文字ずつに分ける変数を定義する。\n\t\tlet charArrayInDisplayWord =[];\n\n\t\t// ゲーム終了を判定するフラグを定義する。\n\t\tlet playEndFlag = \"0\";\n\n\n\t\t// createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n\t\t// bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\t\tlet createDisplayWordOkFlagFromBonusCountReset = \"0\";\n\n\t\t// 表示する単語を作成する。\n\t\tcreateDisplayWord();\n\n\t\t// プレイ開始時間を取得する。\n\t\tconst startTime = Date.now();\n\t\t// 表示する残りのプレイ可能時間を定義する。\n\t\tlet remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n\t\tremainPlayingTime.className =  \"remainPlayingTime\";\n\t\t// 表示するスタート時のプレイ可能時間を定義する。\n\t\tlet initialPlayingTimeMSec = 5000;\n\t\t// スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\t\tsetTimeout(countDownTime,0);\n\t\t// 1秒ごとにcountDownTimeを実施するように定義する。\n\t\tconst timerId = setInterval(countDownTime,1000);\n\n\t\t// 正解時に表示する丸を定義する。\n\t\tdocument.getElementById(\"circleImg\").src= '/assets/正解○.png';\n\t\tcircleImg.classList.add('transparent');\n\n\t\t// \"答えを見る\"ボタンを表示する。(プレイモード普通、正確重視の時のみ)\n\t\tif (playMode == \"普通\" || playMode == \"正確重視\" ) {\n\t\t\tlet answerButton = document.getElementById(\"answerButton\");\n\t\t\tanswerButton.innerHTML = \"答えを見る\";\n\t\t\tanswerButton.className = \"answerButton\";\n\t\t\tanswerButton.onclick = function() {\n\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t}\n\t\t\t\tdisplayWord.className =  \"displayWord\";\n\t\t\t};\n\t\t};\n\n\t\t// 表示するスコアを定義する。\n\t\tlet displayScore = document.getElementById(\"displayScore\");\n\t\tdisplayScore.className =  \"displayScore\";\n\t\t// 合計スコアの初期値を定義する。\n\t\tlet totalScore = 0;\n\t\t// 表示するスコアに初期値を定義する。\n\t\tdisplayScore.textContent = totalScore + \" P\";\n\t\t// スコアアップする基準を定義する。\n\t\tconst refTextLengthForCountUpLevel1 = 4;\n\t\tconst addScoreLevel1 = 1000;\n\t\tconst addScoreLevel2 = 3000;\n\n\t\t// タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\t\tdocument.addEventListener(`keydown`, keyDownCharCountUp);\n\n\t\t// 表示する単語を作成する処理を定義する。\n\t\tfunction createDisplayWord(){\n\t\t\t// すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n\t\t\t// ギリギリで問題に正解した場合、○を表示した後、200m秒後にワードを生成する処理が走るため。\n\t\t\tif(playEndFlag === \"0\"){\n\t\t\t\t// 表示単語を初期化する。\n\t\t\t\tdisplayWord.textContent = \"\";\n\t\t\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\t\t\t//let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\t\t\t\tlet randomIntegerInTotalWordList = Math.floor(Math.random() * 3);\n\t\t\t\t// 表示する単語をランダムで選定する。\n\t\t\t\tdisplayWordInList = wordList[randomIntegerInTotalWordList];\n\t\t\t\t// 表示する単語の日本語訳を表示させる。\n\t\t\t\tdisplayWordJapanese.textContent = displayWordInList.jap_trans_1;\n\n\t\t\t\t// 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n\t\t\t\t// プレイモード練習では答えを表示しているため処理不要\n\t\t\t\tif ( playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\t// 前の問題に注釈がある場合消す。\n\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t// ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\t\t\t\t\tlet duplicateWords = wordList.filter(duplicateWord => duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1);\n\t\t\t\t\t// 日本語訳が重複している他の英単語がある場合\n\t\t\t\t\tif (duplicateWords.length > 1) {\n\t\t\t\t\t\t// 重複している英単語の配列（この時点では答えを含む）を定義する。\n\t\t\t\t\t\tlet duplicateWordsList = [];\n\t\t\t\t\t\tfor (let i = 0; i < duplicateWords.length; i++) {\n\t\t\t\t\t\t\t// 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n\t\t\t\t\t\t\tif (duplicateWords[i].id !== displayWordInList.id){\n\t\t\t\t\t\t\t\tduplicateWordsList.push(duplicateWords[i].eng_word);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdisplayWordAnnotation.textContent = `※${duplicateWordsList}以外`;\n\t\t\t\t\t\tdisplayWordAnnotation.className = \"displayWordAnnotation\";\n\t\t\t\t\t};\n\t\t\t\t};\n\n\n\n\n\t\t\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t\t\t// spanタグで閉じた単語を表示する。\n\t\t\t\tcharArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n\t\t\t\t\t// spanタグを作成する。\n\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t// spanタグに一文字を挿入する。\n\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t// 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、正確重視のときのみ）\n\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\t\tspanValue.className = \"transparent\";\n\t\t\t\t\t};\n\t\t\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\t\t\treturn spanValue;\n\t\t\t\t});\n\t\t\t};\n\t\t\t//  createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n\t\t\t// bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\t\t\tcreateDisplayWordOkFlagFromBonusCountReset = \"0\";\n\t\t}\n\n\t\t// プレイ時間をカウントダウンする処理を定義する。\n\t\tfunction countDownTime(){\n\t\t\tconst currentTime = Date.now();\n\t\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\t\tconst remainSec = Math.ceil(remainMSec/1000);\n\t\t\tlet  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n\t\t\tif (remainMSec <= 0){\n\t\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\t\tplayEndFlag = \"1\";\n\t\t\t\t// プレイ時間のカウントダウンを止める。\n\t\t\t\tclearInterval(timerId);\n\t\t\t\t// 残り時間の表示を消す。\n\t\t\t\tremainSecLabel = \"\";\n\t\t\t\t// 現在のスコア（左上）の表示を消す。\n\t\t\t\tdisplayScore.textContent =\"\";\n\t\t\t\t// 問題の英単語の表示を消す。\n\t\t\t\tdisplayWord.textContent =\"\";\n\t\t\t\t// 解答の日本語の表示を消す。\n\t\t\t\tdisplayWordJapanese.textContent =\"\";\n\t\t\t\t// 答えを見るボタンを消す。（プレイモード普通、正確重視の時のみ）\n\t\t\t\t// また、注釈も消す。\n\t\t\t\tif (playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\tanswerButton.className('transparent');\n\t\t\t\t\tdisplayWordAnnotation.remove();\n\t\t\t\t};\n\t\t\t\t// 正解時に表示される○の画像を消す。\n\t\t\t\tcircleImg.classList.add('transparent');\n\n\t\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\t\tclosePopup.textContent =\"終了\";\n\t\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t\t// 戻るボタンを定義する。\n\t\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\t\t\t\t// もう一度ボタンを定義する。\n\t\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t// 得点の表示\n\t\t\t\tclosePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t// もう一度ボタンの表示（transparentを消して表示させる）\n\t\t\t\trestartBtn.classList.remove('transparent');\n\t\t\t\t// 戻るボタンの表示（transparentを消して表示させる）\n\t\t\t\tbackBtn.classList.remove('transparent');\n\t\t\t\t},2000);\n\t\t\t}\n\t\t\t// 残りプレイ可能時間を更新する。\n\t\t\tremainPlayingTime.textContent = remainSecLabel;\n\t\t};\n\n\t\t// スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\t\tfunction countUpScore(){\n\t\tif (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\taddPoint = addScoreLevel1;\n\t\t} else {\n\t\t\taddPoint = addScoreLevel2;\n\t\t}\n\t\ttotalScore = totalScore + addPoint;\n\t\tdisplayScore.textContent = `${totalScore.toLocaleString()} P`;\n\t\treturn totalScore;\n\t\t}\n\n\t\t// ゲーム中にタイプした文字が表示文字と一致する場合、不一致の場合の処理を定義する。\n\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\t\tif(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n\t\t\t\tcorrectTyping();\n\t\t\t} else if (playEndFlag===\"0\") {\n\t\t\t\t// タイプミスでメーターを初期値に戻す。\n\t\t\t\tbonusCountReset();\n\t\t\t} else {\n\n\t\t\t};\n\t\t};\n\n\t\t// タイプした文字が表示文字と一致する場合の処理を定義する。\n\t\tfunction correctTyping(){\n\t\t\t// 文字色を変更する。\n\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t// メーターを更新する。\n\t\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t\t// 一致した文字を配列から削除する。\n\t\t\tcharArrayInDisplayWord.shift();\n\t\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\t\tif(charArrayInDisplayWord.length === 0) {\n\t\t\t\tcountUpScore();\n\t\t\t\tcircleImg.classList.add('circle');\n\t\t\t\tcircleImg.classList.remove('transparent');\n\t\t\t\tsetTimeout(createDisplayWord,200);\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tcircleImg.classList.add('transparent');\n\t\t\t\t\tcircleImg.classList.remove('circle');\n\t\t\t\t}, 200);\n\t\t\t};\n\n\t\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\tbonusCountMeter = 0;\n\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\tsetTimeout(function(){\n\t\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t}, 2000);\n\t\t\t};\n\n\t\t\t// 更新したメーターを表示する。\n\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t};\n\n\t\t// タイプした文字が表示文字と不一致の場合の処理を定義する。（プレイモードが正確重視の場合のみ）\n\t\t// 不正解の単語の答えを表示し、次の単語を生成する処理。\n\t\t// メーターを0にリセットする処理。\n\t\t// createDisplayWord処理が200m秒に連続で生じないためにbonusCountResetにフラグを用意する。\n\t\tfunction bonusCountReset(){\n\t\t\tif (playMode == \"正確重視\" && createDisplayWordOkFlagFromBonusCountReset == \"0\") {\n\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.add('add_gray');\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t}\n\t\t\t\tcreateDisplayWordOkFlagFromBonusCountReset = \"1\";\n\t\t\t\tsetTimeout(createDisplayWord,200); //createDisplayWord処理実行後にcreateDisplayWordOkFlagFromBonusCountReset==0に戻す。\n\t\t\t\tbonusCountMeter = 0;\n\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t\t};\n\t\t};\n\t}\n};\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAsDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AADA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AACA;AADA;AACA;AACA;AACA;AADA;;;;A","sourceRoot":""}