{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nwindow.addEventListener('load', function () {\n  var _romaMappingTableFirs;\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = gon.wordListAll; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10.png', '/assets/メーターPNG/メーター20.png', '/assets/メーターPNG/メーター30.png', '/assets/メーターPNG/メーター40.png', '/assets/メーターPNG/メーター50.png', '/assets/メーターPNG/メーター60.png', '/assets/メーターPNG/メーター70.png', '/assets/メーターPNG/メーター80.png', '/assets/メーターPNG/メーター90.png', '/assets/メーターPNG/メーター100.png'];\n  var romaMappingTableFirst = (_romaMappingTableFirs = {\n    \"あ\": \"a\",\n    \"い\": \"i\",\n    \"う\": \"u\",\n    \"え\": \"e\",\n    \"お\": \"o\",\n    \"か\": \"ka\",\n    \"き\": \"ki\",\n    \"く\": \"ku\",\n    \"け\": \"ke\",\n    \"こ\": \"ko\",\n    \"さ\": \"sa\",\n    \"し\": \"si\",\n    \"す\": \"su\",\n    \"せ\": \"se\",\n    \"そ\": \"so\",\n    \"た\": \"ta\",\n    \"ち\": \"ti\",\n    \"つ\": \"tu\",\n    \"て\": \"te\",\n    \"と\": \"to\",\n    \"な\": \"na\",\n    \"に\": \"ni\",\n    \"ぬ\": \"nu\",\n    \"ね\": \"ne\",\n    \"の\": \"no\",\n    \"は\": \"ha\",\n    \"ひ\": \"hi\",\n    \"ふ\": \"hu\",\n    \"へ\": \"he\",\n    \"ほ\": \"ho\",\n    \"ま\": \"ma\",\n    \"み\": \"mi\",\n    \"む\": \"mu\",\n    \"め\": \"me\",\n    \"も\": \"mo\",\n    \"や\": \"ya\",\n    \"ゆ\": \"yu\",\n    \"よ\": \"yo\",\n    \"ら\": \"ra\",\n    \"り\": \"ri\",\n    \"る\": \"ru\",\n    \"れ\": \"re\",\n    \"ろ\": \"ro\",\n    \"わ\": \"wa\",\n    \"を\": \"wo\",\n    \"ん\": \"nn\",\n    \"が\": \"ga\",\n    \"ぎ\": \"gi\",\n    \"ぐ\": \"gu\",\n    \"げ\": \"ge\",\n    \"ご\": \"go\",\n    \"ざ\": \"za\",\n    \"じ\": \"zi\",\n    \"ず\": \"zu\",\n    \"ぜ\": \"ze\",\n    \"ぞ\": \"zo\",\n    \"だ\": \"da\",\n    \"ぢ\": \"di\",\n    \"づ\": \"du\",\n    \"で\": \"de\",\n    \"ど\": \"do\",\n    \"ば\": \"ba\",\n    \"び\": \"bi\",\n    \"ぶ\": \"bu\",\n    \"べ\": \"be\",\n    \"ぼ\": \"bo\",\n    \"ぱ\": \"pa\",\n    \"ぴ\": \"pi\",\n    \"ぷ\": \"pu\",\n    \"ぺ\": \"pe\",\n    \"ぽ\": \"po\",\n    \"ぁ\": \"la\",\n    \"ぃ\": \"li\",\n    \"ぅ\": \"lu\",\n    \"ぇ\": \"le\",\n    \"ぉ\": \"lo\",\n    \"ゃ\": \"lya\",\n    \"ゅ\": \"lyu\",\n    \"ょ\": \"lyo\",\n    \"でゃ\": \"dha\",\n    \"でぃ\": \"dhi\",\n    \"でゅ\": \"dhu\",\n    \"でぇ\": \"dhe\",\n    \"でょ\": \"dho\",\n    \"つぁ\": \"tsa\",\n    \"つぃ\": \"tsi\",\n    \"つぇ\": \"tse\",\n    \"つぉ\": \"tso\",\n    \"てゃ\": \"tha\",\n    \"てぃ\": \"thi\",\n    \"てゅ\": \"thu\",\n    \"てぇ\": \"the\",\n    \"てょ\": \"tho\",\n    \"ふぁ\": \"fa\",\n    \"ふぃ\": \"fi\",\n    \"ふぇ\": \"fe\",\n    \"ふぉ\": \"fo\",\n    \"うぁ\": \"wha\",\n    \"うぃ\": \"wi\",\n    \"うぇ\": \"we\",\n    \"うぉ\": \"who\",\n    \"ゔぁ\": \"va\",\n    \"ゔぃ\": \"vi\",\n    \"ゔ\": \"vu\",\n    \"ゔぇ\": \"ve\",\n    \"ゔぉ\": \"vo\",\n    \"きゃ\": \"kya\",\n    \"きぃ\": \"kyi\",\n    \"きゅ\": \"kyu\",\n    \"きぇ\": \"kye\",\n    \"きょ\": \"kyo\",\n    \"ぎゃ\": \"gya\",\n    \"ぎぃ\": \"gyi\",\n    \"ぎゅ\": \"gyu\",\n    \"ぎぇ\": \"gye\",\n    \"ぎょ\": \"gyo\",\n    \"しゃ\": \"sya\",\n    \"しぃ\": \"syi\",\n    \"しゅ\": \"syu\",\n    \"しぇ\": \"sye\",\n    \"しょ\": \"syo\",\n    \"じゃ\": \"zya\",\n    \"じぃ\": \"zyi\",\n    \"じゅ\": \"zyu\",\n    \"じぇ\": \"zye\",\n    \"じょ\": \"zyo\",\n    \"ちゃ\": \"tya\",\n    \"ちぃ\": \"tyi\",\n    \"ちゅ\": \"tyu\",\n    \"ちぇ\": \"tye\",\n    \"ちょ\": \"tyo\",\n    \"ぢゃ\": \"dya\",\n    \"ぢぃ\": \"dyi\",\n    \"ぢゅ\": \"dyu\",\n    \"ぢぇ\": \"dye\",\n    \"ぢょ\": \"dyo\",\n    \"にゃ\": \"nya\",\n    \"にぃ\": \"nyi\",\n    \"にゅ\": \"nyu\",\n    \"にぇ\": \"nye\",\n    \"にょ\": \"nyo\",\n    \"ひゃ\": \"hya\",\n    \"ひぃ\": \"hyi\",\n    \"ひゅ\": \"hyu\",\n    \"ひぇ\": \"hye\",\n    \"ひょ\": \"hyo\",\n    \"びゃ\": \"bya\",\n    \"びぃ\": \"byi\",\n    \"びゅ\": \"byu\",\n    \"びぇ\": \"bye\",\n    \"びょ\": \"byo\",\n    \"ぴゃ\": \"pya\",\n    \"ぴぃ\": \"pyi\",\n    \"ぴゅ\": \"pyu\",\n    \"ぴぇ\": \"pye\",\n    \"ぴょ\": \"pyo\",\n    \"ふゃ\": \"fya\"\n  }, _defineProperty(_romaMappingTableFirs, \"\\u3075\\u3043\", \"fyi\"), _defineProperty(_romaMappingTableFirs, \"ふゅ\", \"fyu\"), _defineProperty(_romaMappingTableFirs, \"\\u3075\\u3047\", \"fye\"), _defineProperty(_romaMappingTableFirs, \"ふょ\", \"fyo\"), _defineProperty(_romaMappingTableFirs, \"みゃ\", \"mya\"), _defineProperty(_romaMappingTableFirs, \"みぃ\", \"myi\"), _defineProperty(_romaMappingTableFirs, \"みゅ\", \"myu\"), _defineProperty(_romaMappingTableFirs, \"みぇ\", \"mye\"), _defineProperty(_romaMappingTableFirs, \"みょ\", \"myo\"), _defineProperty(_romaMappingTableFirs, \"りゃ\", \"rya\"), _defineProperty(_romaMappingTableFirs, \"りぃ\", \"ryi\"), _defineProperty(_romaMappingTableFirs, \"りゅ\", \"ryu\"), _defineProperty(_romaMappingTableFirs, \"りぇ\", \"rye\"), _defineProperty(_romaMappingTableFirs, \"りょ\", \"ryo\"), _defineProperty(_romaMappingTableFirs, \"くぁ\", \"kwa\"), _defineProperty(_romaMappingTableFirs, \"ぐぁ\", \"gwa\"), _defineProperty(_romaMappingTableFirs, \"とぅ\", \"twu\"), _defineProperty(_romaMappingTableFirs, \"どぅ\", \"dwu\"), _defineProperty(_romaMappingTableFirs, \"いぇ\", \"ye\"), _defineProperty(_romaMappingTableFirs, \"っ\", \"ltsu\"), _romaMappingTableFirs);\n  var romaMappingTableSecond = {\n    \"い\": \"yi\",\n    \"か\": \"ca\",\n    \"く\": \"cu\",\n    \"こ\": \"co\",\n    \"し\": \"shi\",\n    \"せ\": \"ce\",\n    \"ち\": \"chi\",\n    \"つ\": \"tsu\",\n    \"ふ\": \"fu\",\n    \"じ\": \"ji\",\n    \"ぁ\": \"xa\",\n    \"ぃ\": \"xi\",\n    \"ぅ\": \"xu\",\n    \"ぇ\": \"xe\",\n    \"ぉ\": \"xo\",\n    \"ゃ\": \"xya\",\n    \"ゅ\": \"xyu\",\n    \"ょ\": \"xyo\",\n    \"しゃ\": \"sha\",\n    \"しゅ\": \"shu\",\n    \"しぇ\": \"she\",\n    \"しょ\": \"sho\",\n    \"じゃ\": \"ja\",\n    \"じぃ\": \"jyi\",\n    \"じゅ\": \"ju\",\n    \"じぇ\": \"je\",\n    \"じょ\": \"jo\",\n    \"ちゃ\": \"cha\",\n    \"ちぃ\": \"cyi\",\n    \"ちゅ\": \"chu\",\n    \"ちぇ\": \"che\",\n    \"ちょ\": \"cho\",\n    \"うぃ\": \"whi\",\n    \"うぇ\": \"whe\",\n    \"ん\": \"xn\",\n    \"っ\": \"ltu\"\n  };\n  var romaMappingTableThird = {\n    \"し\": \"ci\",\n    \"じゃ\": \"jya\",\n    \"じゅ\": \"jyu\",\n    \"じぇ\": \"jye\",\n    \"じょ\": \"jyo\",\n    \"ちゃ\": \"cya\",\n    \"ちゅ\": \"cyu\",\n    \"ちぇ\": \"cye\",\n    \"ちょ\": \"cyo\",\n    \"っ\": \"xtsu\"\n  };\n  var romaMappingTableFourth = {\n    \"っ\": \"xtu\"\n  }; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 10; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    countDownPopupNumber = countDownPopupNumber - 1;\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordEnglish = document.getElementById(\"displayWordEnglish\");\n    displayWordEnglish.className = \"displayWordEnglish\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWordJap = []; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 120000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore + \" P\"; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n      var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語をランダムで選定する。\n\n      displayWordInList = wordList[randomIntegerInTotalWordList]; // 英単語を表示させる。\n\n      displayWordEnglish.textContent = displayWordInList.eng_word; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n\n      charArrayInDisplayWordJap = displayWordInList.jap_trans_1_yomi.split(\"\").map(function (value) {\n        // spanタグを作成する。\n        var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n        spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"00\".concat(remainSec).slice(-3), \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent = \"\";\n        displayWord.textContent = \"\";\n        displayWordEnglish.textContent = \"\"; // ゲーム終了後にplayEndFlagを1に更新する。\n\n        playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n          restartBtn.innerHTML = \"<a href='../'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='../'>タイトルに戻る</a>\";\n          backBtn.className = \"backBtn\";\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    } // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = \"\".concat(totalScore.toLocaleString(), \" P\");\n      return totalScore;\n    }\n\n    var wordLetterWithSmallLetter = \"\";\n    var wordLetterSole = \"\";\n    var charArrayInDisplayWordAlphaFirst = [];\n    var charArrayInDisplayWordAlphaSecond = [];\n    var charArrayInDisplayWordAlphaThird = [];\n    var charArrayInDisplayWordAlphaFourth = [];\n    var charArrayInDisplayWordAlphaSole = [];\n    var charArrayInDisplayWordAlphaSoleSecond = [];\n    var charArrayInDisplayWordAlphaSoleThird = [];\n    var charArrayInDisplayWordAlphaSoleFourth = [];\n    var shiftAlreadyStartedCountAll = 0;\n    var shiftAlreadyStartedCountFirst = 0;\n    var shiftAlreadyStartedCountSecond = 0;\n    var shiftAlreadyStartedCountThird = 0;\n    var shiftAlreadyStartedCountSoleFirst = 0;\n    var shiftAlreadyStartedCountSoleSecond = 0;\n    var shiftAlreadyStartedCountSoleThird = 0;\n    var shiftAlreadyStartedFlagSoleToFourth = 0;\n    var keyTempForSmallTsuSoleFlag = 0;\n    var keyTempForSmallTsuPreFirst = \"\";\n    var keyTempForSmallTsuPreSecond = \"\";\n    var keyTempForSmallTsuPreThird = \"\";\n    var keyTempForNN = \"\"; // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n    function keyDownCharCountUp(keyDownChar) {\n      // 先頭文字が小さい\"っ\"の場合\n      if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n        if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"u\" && keyTempForSmallTsuPreSecond !== \"t\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\" && keyDownChar.key !== \"n\") {\n          if (charArrayInDisplayWordJap[1] != null) {\n            // 同じアルファベットを入力した場合、\"っ\"を入力完了にし、再度keyDownCharCountUpを実施する。\n            if (keyDownChar.key === keyTempForSmallTsuPreFirst) {\n              keyTempForSmallTsuPreFirst = \"\";\n              charArrayInDisplayWordJap[0].className = \"add_red\";\n              charArrayInDisplayWordJap.shift();\n              shiftAlreadyStartedCountAll = 0;\n              keyDownCharCountUp(keyDownChar);\n              correctTyping();\n            }\n          } // \"っ\"の単独入力を可能にする\n\n\n          if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyDownChar.key === \"t\") {\n            keyTempForSmallTsuPreSecond = keyDownChar.key;\n            correctTyping(); // 次のアルファベットは\"su\"か\"u\"のみを許容する。\n          } else if (keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"s\") {\n            keyTempForSmallTsuPreThird = keyDownChar.key;\n            correctTyping();\n          } else if (keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"u\") {\n            keyTempForSmallTsuPreFirst = \"\";\n            keyTempForSmallTsuSecond = \"\";\n            keyTempForSmallTsuThird = \"\";\n            charArrayInDisplayWordJap[0].className = \"add_red\";\n            charArrayInDisplayWordJap.shift();\n            shiftAlreadyStartedCountAll = 0;\n            correctTyping();\n          } else {\n            // keyTempForSmallTsuPreFirst = keyDownChar.key;\n            bonusCountReset();\n          }\n\n          ;\n          keyTempForSmallTsuPreFirst = keyDownChar;\n          console.log(keyTempForSmallTsuPreFirst);\n        } else {}\n      } else {\n        // 入力対象文字をアルファベットに分解する。\n        // 入力対象文字に対して、入力処理が開始していない場合\n        if (shiftAlreadyStartedCountAll === 0) {\n          // 2文字目が存在する場合(最後の文字でない場合)\n          if (charArrayInDisplayWordJap[1] != null) {\n            // 2文字を一緒に入力するパターンに対応する処理を定義する。\n            wordLetterWithSmallLetter = charArrayInDisplayWordJap[0].textContent + charArrayInDisplayWordJap[1].textContent; // 文字をローマ字に変換し、アルファベットごとに分ける。\n            // 2文字に対して、ローマ字変換パターン１をsplitする。\n\n            if (romaMappingTableFirst[wordLetterWithSmallLetter] != null) {\n              charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ; // 2文字に対してローマ字変換パターン２が存在する場合はsplitする。\n\n            if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n              charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ; // 2文字に対してローマ字変換パターン３が存在する場合はsplitする。\n\n            if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n              charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ;\n          }\n\n          ; // 1文字のみを先に入力するパターンに対応する処理を定義する。\n\n          wordLetterSole = charArrayInDisplayWordJap[0].textContent; // 1文字目のみ対して、ローマ字変換パターン１をsplitする。\n          // 母音の場合はsplit不可のため処理を分ける。\n\n          if (wordLetterSole !== \"あ\" && wordLetterSole !== \"い\" && wordLetterSole !== \"う\" && wordLetterSole !== \"え\" && wordLetterSole !== \"お\") {\n            charArrayInDisplayWordAlphaSole = romaMappingTableFirst[wordLetterSole].split(\"\").map(function (value) {\n              var spanValue = document.createElement(\"span\");\n              spanValue.textContent = value;\n              return spanValue;\n            });\n          } else {\n            var spanValue = document.createElement(\"span\");\n            spanValue.textContent = romaMappingTableFirst[wordLetterSole];\n            charArrayInDisplayWordAlphaSole = [spanValue];\n          }\n\n          ; // 1文字目のみ対してローマ字変換パターン２が存在する場合はsplitする。\n\n          if (romaMappingTableSecond[wordLetterSole] != null) {\n            charArrayInDisplayWordAlphaSoleSecond = romaMappingTableSecond[wordLetterSole].split(\"\").map(function (value) {\n              var spanValue = document.createElement(\"span\");\n              spanValue.textContent = value;\n              return spanValue;\n            });\n          }\n\n          ; // 1文字目のみ対してローマ字変換パターン３が存在する場合はsplitする。\n\n          if (romaMappingTableThird[wordLetterSole] != null) {\n            charArrayInDisplayWordAlphaSoleThird = romaMappingTableThird[wordLetterSole].split(\"\").map(function (value) {\n              var spanValue = document.createElement(\"span\");\n              spanValue.textContent = value;\n              return spanValue;\n            });\n          }\n\n          ;\n        }\n\n        ; // 文字入力によるアルファベットに対する処理を開始する。\n        // 文字の入力開始前である場合\n\n        if (shiftAlreadyStartedCountAll === 0) {\n          // 2文字目が存在する場合(最後の文字でない場合)\n          if (charArrayInDisplayWordJap[1] != null) {\n            // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n            if (romaMappingTableFirst[wordLetterWithSmallLetter] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountFirst = 1;\n\n                if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                charArrayInDisplayWordAlphaSecond.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountSecond = 1;\n\n                if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                charArrayInDisplayWordAlphaThird.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountThird = 1;\n\n                if (charArrayInDisplayWordAlphaThird.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n          if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n            charArrayInDisplayWordAlphaSole.shift();\n            shiftAlreadyStartedCountAll = 1;\n            shiftAlreadyStartedCountSoleFirst = 1;\n\n            if (charArrayInDisplayWordAlphaSole.length === 0) {\n              charArrayInDisplayWordJap[0].className = \"add_red\";\n              charArrayInDisplayWordJap.shift();\n              shiftAlreadyStartedCountAll = 0;\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n          if (romaMappingTableSecond[wordLetterSole] != null) {\n            if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent && charArrayInDisplayWordAlphaSole.length !== 0) {\n              charArrayInDisplayWordAlphaSoleSecond.shift();\n              shiftAlreadyStartedCountAll = 1;\n              shiftAlreadyStartedCountSoleSecond = 1;\n\n              if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n          if (romaMappingTableThird[wordLetterSole] != null) {\n            if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent && charArrayInDisplayWordAlphaSole.length !== 0 && charArrayInDisplayWordAlphaSoleSecond.length !== 0) {\n              charArrayInDisplayWordAlphaSoleThird.shift();\n              shiftAlreadyStartedCountAll = 1;\n              shiftAlreadyStartedCountSoleThird = 1;\n\n              if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n              }\n            }\n          }\n\n          ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n          if (shiftAlreadyStartedCountFirst === 1 || shiftAlreadyStartedCountSecond === 1 || shiftAlreadyStartedCountThird === 1 || shiftAlreadyStartedCountSoleFirst === 1 || shiftAlreadyStartedCountSoleSecond === 1 || shiftAlreadyStartedCountSoleThird === 1) {\n            correctTyping();\n          } else {\n            bonusCountReset();\n          }\n\n          ; // 文字入力が完了している場合、カウントを0にする。\n\n          if (shiftAlreadyStartedCountAll === 0) {\n            shiftAlreadyStartedCountFirst = 0;\n            shiftAlreadyStartedCountSecond = 0;\n            shiftAlreadyStartedCountThird = 0;\n            shiftAlreadyStartedCountSoleFirst = 0;\n            shiftAlreadyStartedCountSoleSecond = 0;\n            shiftAlreadyStartedCountSoleThird = 0;\n          }\n\n          ; // すでに1つのアルファベットを入力済みの場合\n        } else if (shiftAlreadyStartedCountAll === 1) {\n          // 2文字目が存在する場合(最後の文字でない場合)\n          if (charArrayInDisplayWordJap[1] != null) {\n            // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n            if (shiftAlreadyStartedCountFirst === 1) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountFirst = 2;\n\n                if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n              if (shiftAlreadyStartedCountSecond === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSecond.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSecond = 2;\n\n                  if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n              if (shiftAlreadyStartedCountThird === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                  charArrayInDisplayWordAlphaThird.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountThird = 2;\n\n                  if (charArrayInDisplayWordAlphaThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n          if (shiftAlreadyStartedCountSoleFirst === 1) {\n            if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n              charArrayInDisplayWordAlphaSole.shift();\n              shiftAlreadyStartedCountAll = 2;\n              shiftAlreadyStartedCountSoleFirst = 2;\n\n              if (charArrayInDisplayWordAlphaSole.length === 0) {\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n          if (romaMappingTableSecond[wordLetterSole] != null) {\n            if (shiftAlreadyStartedCountSoleSecond === 1) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent) {\n                charArrayInDisplayWordAlphaSoleSecond.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountSoleSecond = 2;\n\n                if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n          if (romaMappingTableThird[wordLetterSole] != null) {\n            if (shiftAlreadyStartedCountSoleThird === 1) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent) {\n                charArrayInDisplayWordAlphaSoleThird.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountSoleThird = 2;\n\n                if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n          }\n\n          ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n          if (shiftAlreadyStartedCountFirst === 2 || shiftAlreadyStartedCountSecond === 2 || shiftAlreadyStartedCountThird === 2 || shiftAlreadyStartedCountSoleFirst === 2 || shiftAlreadyStartedCountSoleSecond === 2 || shiftAlreadyStartedCountSoleThird === 2) {\n            correctTyping();\n          } else {\n            bonusCountReset();\n          }\n\n          ; // 文字入力が完了している場合、カウントを0にする。\n\n          if (shiftAlreadyStartedCountAll === 0) {\n            shiftAlreadyStartedCountFirst = 0;\n            shiftAlreadyStartedCountSecond = 0;\n            shiftAlreadyStartedCountThird = 0;\n            shiftAlreadyStartedCountSoleFirst = 0;\n            shiftAlreadyStartedCountSoleSecond = 0;\n            shiftAlreadyStartedCountSoleThird = 0;\n          }\n\n          ; // すでに2つのアルファベットを入力済みの場合\n        } else if (shiftAlreadyStartedCountAll === 2) {\n          // 2文字目が存在する場合(最後の文字でない場合)\n          if (charArrayInDisplayWordJap[1] != null) {\n            // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n            if (shiftAlreadyStartedCountFirst === 2) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountFirst = 3;\n\n                if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n              if (shiftAlreadyStartedCountSecond === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSecond.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSecond = 3;\n\n                  if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n              if (shiftAlreadyStartedCountThird === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                  charArrayInDisplayWordAlphaThird.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountThird = 3;\n\n                  if (charArrayInDisplayWordAlphaThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n          if (shiftAlreadyStartedCountSoleFirst === 2) {\n            if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n              charArrayInDisplayWordAlphaSole.shift();\n              shiftAlreadyStartedCountAll = 3;\n              shiftAlreadyStartedCountSoleFirst = 3;\n\n              if (charArrayInDisplayWordAlphaSole.length === 0) {\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n          if (romaMappingTableSecond[wordLetterSole] != null) {\n            if (shiftAlreadyStartedCountSoleSecond === 2) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent) {\n                charArrayInDisplayWordAlphaSoleSecond.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountSoleSecond = 3;\n\n                if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n          }\n\n          ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n          if (romaMappingTableThird[wordLetterSole] != null) {\n            if (shiftAlreadyStartedCountSoleThird === 2) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent) {\n                charArrayInDisplayWordAlphaSoleThird.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountSoleThird = 3;\n\n                if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n          }\n\n          ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n          if (shiftAlreadyStartedCountFirst === 3 || shiftAlreadyStartedCountSecond === 3 || shiftAlreadyStartedCountThird === 3 || shiftAlreadyStartedCountSoleFirst === 3 || shiftAlreadyStartedCountSoleSecond === 3 || shiftAlreadyStartedCountSoleThird === 3) {\n            correctTyping();\n          } else {\n            bonusCountReset();\n          }\n\n          ; // 文字入力が完了している場合、カウントを0にする。\n\n          if (shiftAlreadyStartedCountAll === 0) {\n            shiftAlreadyStartedCountFirst = 0;\n            shiftAlreadyStartedCountSecond = 0;\n            shiftAlreadyStartedCountThird = 0;\n            shiftAlreadyStartedCountSoleFirst = 0;\n            shiftAlreadyStartedCountSoleSecond = 0;\n            shiftAlreadyStartedCountSoleThird = 0;\n          }\n\n          ;\n        }\n\n        ; // \"ん\"の場合、かつ次の文字が母音でない場合は\"n\"+\"n以外の子音\"でもOKとする。\n\n        if (charArrayInDisplayWordJap[0].textContent === \"ん\" && charArrayInDisplayWordJap[1].textContent !== \"あ\" && charArrayInDisplayWordJap[1].textContent !== \"い\" && charArrayInDisplayWordJap[1].textContent !== \"う\" && charArrayInDisplayWordJap[1].textContent !== \"え\" && charArrayInDisplayWordJap[1].textContent !== \"お\" && shiftAlreadyStartedCountAll === 1 && keyTempForNN !== \"x\") {\n          if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"u\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\") {\n            charArrayInDisplayWordAlphaFirst.shift();\n            charArrayInDisplayWordJap[0].className = \"add_red\";\n            charArrayInDisplayWordJap.shift();\n            shiftAlreadyStartedCountAll = 0;\n            keyTempForNN = \"\";\n\n            if (keyDownChar.key !== \"n\") {\n              keyDownCharCountUp(keyDownChar);\n            }\n\n            correctTyping();\n          } else {\n            bonusCountReset();\n          }\n\n          ; // 上記以外の文字の場合\n          // } else {\n          //   let wordLetter = charArrayInDisplayWordJap[0].textContent;\n          //       // ローマ字変換の複数パターンをsplitする。\n          //   if (shiftAlreadyStartedCountAll === 0 ){\n          //       // ローマ字変換パターン１をsplitする。\n          //       charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetter].split(\"\").map(function(value){\n          //       let spanValue = document.createElement(\"span\");\n          //       spanValue.textContent = value;\n          //       return spanValue;\n          //     });\n          //       // ローマ字変換パターン２が存在する場合はsplitする。\n          //       if (romaMappingTableSecond[wordLetter] != null){\n          //         charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetter].split(\"\").map(function(value){\n          //         let spanValue = document.createElement(\"span\");\n          //         spanValue.textContent = value;\n          //         return spanValue;\n          //       });\n          //     };\n          //       // ローマ字変換パターン３が存在する場合はsplitする。\n          //       if (romaMappingTableThird[wordLetter] != null){\n          //         charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetter].split(\"\").map(function(value){\n          //         let spanValue = document.createElement(\"span\");\n          //         spanValue.textContent = value;\n          //         return spanValue;\n          //       });\n          //     };\n          //   };\n          //   // タイプキーがローマ字変換パターン１に該当する場合\n          //   if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n          //       charArrayInDisplayWordAlphaFirst.shift();\n          //       shiftAlreadyStartedCountAll = 1;\n          //       shiftAlreadyStartedFlagSoleToFourth = 1;\n          //       // \"ん\"の入力文字先頭が\"x\"の場合、\"ん\"の条件を分岐するのに使用する。\n          //       if (keyDownChar.key === \"x\"){\n          //         keyTempForNN = keyDownChar.key;\n          //       };\n          //       if(charArrayInDisplayWordAlphaFirst.length === 0){\n          //         charArrayInDisplayWordJap[0].className = \"add_red\";\n          //         charArrayInDisplayWordJap.shift();\n          //         shiftAlreadyStartedCountAll = 0;\n          //         keyTempForNN = \"\";\n          //       }};\n          //   // タイプキーがローマ字変換パターン２に該当する場合\n          //   if (romaMappingTableSecond[wordLetter] != null){\n          //       if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent\n          //           && charArrayInDisplayWordAlphaFirst.length !== 0){\n          //         charArrayInDisplayWordAlphaSecond.shift();\n          //         shiftAlreadyStartedCountAll = 1;\n          //         shiftAlreadyStartedFlagSoleToFourth = 1;\n          //         // \"ん\"の入力文字先頭が\"x\"の場合、\"ん\"の条件を分岐するのに使用する。\n          //         if (keyDownChar.key === \"x\"){\n          //           keyTempForNN = keyDownChar.key;\n          //         };\n          //         if(charArrayInDisplayWordAlphaSecond.length === 0){\n          //           charArrayInDisplayWordJap[0].className = \"add_red\";\n          //           charArrayInDisplayWordJap.shift();\n          //           shiftAlreadyStartedCountAll = 0;\n          //           keyTempForNN = \"\";\n          //       }}};\n          //   // タイプキーがローマ字変換パターン３に該当する場合\n          //   if (romaMappingTableThird[wordLetter] != null){\n          //       if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent\n          //         && charArrayInDisplayWordAlphaFirst.length !== 0\n          //         && charArrayInDisplayWordAlphaSecond.length !== 0){\n          //         charArrayInDisplayWordAlphaThird.shift();\n          //         shiftAlreadyStartedCountAll = 1;\n          //         shiftAlreadyStartedFlagSoleToFourth = 1;\n          //         // \"ん\"の入力文字先頭が\"x\"の場合、\"ん\"の条件を分岐するのに使用する。\n          //         if (keyDownChar.key === \"x\"){\n          //           keyTempForNN = keyDownChar.key;\n          //         };\n          //         if(charArrayInDisplayWordAlphaThird.length === 0){\n          //           charArrayInDisplayWordJap[0].className = \"add_red\";\n          //           charArrayInDisplayWordJap.shift();\n          //           shiftAlreadyStartedCountAll = 0;\n          //           keyTempForNN = \"\";\n          //         }}};\n          //   // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n          //   if (shiftAlreadyStartedFlagSoleToFourth === 1) {\n          //     correctTyping(); \n          //     shiftAlreadyStartedFlagSoleToFourth = 0;\n          //   } else {\n          //     bonusCountReset();\n          //   };\n        }\n      }\n    }\n\n    ;\n    ; //   // 最後の文字である場合\n    //     // 母音の場合(splitできないため他の処理と分けて処理を定義する)\n    //     } else if (charArrayInDisplayWordJap[0].textContent === \"あ\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"い\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"う\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"え\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"お\" ) {\n    //       let wordLetter = charArrayInDisplayWordJap[0].textContent;\n    //           if (shiftAlreadyStartedCountAll === 0 ) {\n    //               if (keyDownChar.key === romaMappingTableFirst[wordLetter]){\n    //                   charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                   charArrayInDisplayWordJap.shift();\n    //                   correctTyping();\n    //                 } else {\n    //                   bonusCountReset();\n    //                 };\n    //           };\n    //     // 上記以外の場合\n    //     } else {\n    //       let wordLetter = charArrayInDisplayWordJap[0].textContent;\n    //               // ローマ字変換の複数パターンをsplitする。\n    //           if (shiftAlreadyStartedCountAll === 0 ){\n    //               // ローマ字変換パターン１をsplitする。\n    //               charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetter].split(\"\").map(function(value){\n    //               let spanValue = document.createElement(\"span\");\n    //               spanValue.textContent = value;\n    //               return spanValue;\n    //             });\n    //               // ローマ字変換パターン２が存在する場合はsplitする。\n    //               if (romaMappingTableSecond[wordLetter] != null){\n    //                 charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetter].split(\"\").map(function(value){\n    //                 let spanValue = document.createElement(\"span\");\n    //                 spanValue.textContent = value;\n    //                 return spanValue;\n    //               });\n    //             };\n    //               // ローマ字変換パターン３が存在する場合はsplitする。\n    //               if (romaMappingTableThird[wordLetter] != null){\n    //                 charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetter].split(\"\").map(function(value){\n    //                 let spanValue = document.createElement(\"span\");\n    //                 spanValue.textContent = value;\n    //                 return spanValue;\n    //               });\n    //             };\n    //               // ローマ字変換パターン４が存在する場合はsplitする。\n    //               if (romaMappingTableFourth[wordLetter] != null){\n    //                 charArrayInDisplayWordAlphaFourth = romaMappingTableFourth[wordLetter].split(\"\").map(function(value){\n    //                 let spanValue = document.createElement(\"span\");\n    //                 spanValue.textContent = value;\n    //                 return spanValue;\n    //               });\n    //             };\n    //           };\n    //           // タイプキーがローマ字変換パターン１に該当する場合\n    //           if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n    //               charArrayInDisplayWordAlphaFirst.shift();\n    //               shiftAlreadyStartedCountAll = 1;\n    //               shiftAlreadyStartedFlagSoleToFourth = 1;\n    //               if(charArrayInDisplayWordAlphaFirst.length === 0){\n    //                 charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                 charArrayInDisplayWordJap.shift();\n    //                 shiftAlreadyStartedCountAll = 0;\n    //               }};\n    //           // タイプキーがローマ字変換パターン２に該当する場合\n    //           if (romaMappingTableSecond[wordLetter] != null){\n    //               if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent\n    //                   && charArrayInDisplayWordAlphaFirst.length !== 0){\n    //                 charArrayInDisplayWordAlphaSecond.shift();\n    //                 shiftAlreadyStartedCountAll = 1;\n    //                 shiftAlreadyStartedFlagSoleToFourth = 1;\n    //                 if(charArrayInDisplayWordAlphaSecond.length === 0){\n    //                   charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                   charArrayInDisplayWordJap.shift();\n    //                   shiftAlreadyStartedCountAll = 0;\n    //               }}};\n    //           // タイプキーがローマ字変換パターン３に該当する場合\n    //           if (romaMappingTableThird[wordLetter] != null){\n    //               if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent\n    //                 && charArrayInDisplayWordAlphaFirst.length !== 0\n    //                 && charArrayInDisplayWordAlphaSecond.length !== 0){\n    //                 charArrayInDisplayWordAlphaThird.shift();\n    //                 shiftAlreadyStartedCountAll = 1;\n    //                 shiftAlreadyStartedFlagSoleToFourth = 1;\n    //                 if(charArrayInDisplayWordAlphaThird.length === 0){\n    //                   charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                   charArrayInDisplayWordJap.shift();\n    //                   shiftAlreadyStartedCountAll = 0;\n    //                 }}};\n    //           // タイプキーがローマ字変換パターン４に該当する場合\n    //           if (romaMappingTableFourth[wordLetter] != null){\n    //             if(keyDownChar.key === charArrayInDisplayWordAlphaFourth[0].textContent\n    //               && charArrayInDisplayWordAlphaFirst.length !== 0\n    //               && charArrayInDisplayWordAlphaSecond.length !== 0\n    //               && charArrayInDisplayWordAlphaThird.length !== 0){\n    //               charArrayInDisplayWordAlphaFourth.shift();\n    //               shiftAlreadyStartedCountAll = 1;\n    //               shiftAlreadyStartedFlagSoleToFourth = 1;\n    //               if(charArrayInDisplayWordAlphaFourth.length === 0){\n    //                 charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                 charArrayInDisplayWordJap.shift();\n    //                 shiftAlreadyStartedCountAll = 0;\n    //               }}};\n    //           // タイプキーがローマ字変換パターン１〜４のいずれかに該当する場合\n    //           if (shiftAlreadyStartedFlagSoleToFourth === 1) {\n    //             correctTyping(); \n    //             shiftAlreadyStartedFlagSoleToFourth = 0;\n    //           } else {\n    //             bonusCountReset();\n    //           };\n    //     };\n    // };\n\n    function correctTyping() {\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter + 1; // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWordJap.length === 0) countUpScore(), createDisplayWord(); // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n\n    ;\n\n    function bonusCountReset() {\n      bonusCountMeter = 0;\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n\n    ;\n  }\n});","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_jap.js"],"names":["window","addEventListener","wordList","gon","wordListAll","imgArray","romaMappingTableFirst","romaMappingTableSecond","romaMappingTableThird","romaMappingTableFourth","bonusCountMeter","bonusCountMeterMax","document","getElementById","src","displayBonusAddPlayTime","className","bonusAddPlayTime","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","remove","typingPlayStart","displayWord","displayWordEnglish","charArrayInDisplayWordJap","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","playEndFlag","randomIntegerInTotalWordList","Math","floor","random","length","displayWordInList","eng_word","jap_trans_1_yomi","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","slice","closePopup","backBtn","restartBtn","toLocaleString","innerHTML","countUpScore","addPoint","wordLetterWithSmallLetter","wordLetterSole","charArrayInDisplayWordAlphaFirst","charArrayInDisplayWordAlphaSecond","charArrayInDisplayWordAlphaThird","charArrayInDisplayWordAlphaFourth","charArrayInDisplayWordAlphaSole","charArrayInDisplayWordAlphaSoleSecond","charArrayInDisplayWordAlphaSoleThird","charArrayInDisplayWordAlphaSoleFourth","shiftAlreadyStartedCountAll","shiftAlreadyStartedCountFirst","shiftAlreadyStartedCountSecond","shiftAlreadyStartedCountThird","shiftAlreadyStartedCountSoleFirst","shiftAlreadyStartedCountSoleSecond","shiftAlreadyStartedCountSoleThird","shiftAlreadyStartedFlagSoleToFourth","keyTempForSmallTsuSoleFlag","keyTempForSmallTsuPreFirst","keyTempForSmallTsuPreSecond","keyTempForSmallTsuPreThird","keyTempForNN","keyDownChar","key","shift","correctTyping","keyTempForSmallTsuSecond","keyTempForSmallTsuThird","bonusCountReset","console","log","classList","add"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  const wordList = gon.wordListAll;\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10.png',\n    '/assets/メーターPNG/メーター20.png',\n    '/assets/メーターPNG/メーター30.png',\n    '/assets/メーターPNG/メーター40.png',\n    '/assets/メーターPNG/メーター50.png',\n    '/assets/メーターPNG/メーター60.png',\n    '/assets/メーターPNG/メーター70.png',\n    '/assets/メーターPNG/メーター80.png',\n    '/assets/メーターPNG/メーター90.png',\n    '/assets/メーターPNG/メーター100.png'\n  ]\n\n\n  const romaMappingTableFirst = {\n    \"あ\":\"a\",\n    \"い\":\"i\",\n    \"う\":\"u\",\n    \"え\":\"e\",\n    \"お\":\"o\",\n    \"か\":\"ka\",\n    \"き\":\"ki\",\n    \"く\":\"ku\",\n    \"け\":\"ke\",\n    \"こ\":\"ko\",\n    \"さ\":\"sa\",\n    \"し\":\"si\",\n    \"す\":\"su\",\n    \"せ\":\"se\",\n    \"そ\":\"so\",\n    \"た\":\"ta\",\n    \"ち\":\"ti\",\n    \"つ\":\"tu\",\n    \"て\":\"te\",\n    \"と\":\"to\",\n    \"な\":\"na\",\n    \"に\":\"ni\",\n    \"ぬ\":\"nu\",\n    \"ね\":\"ne\",\n    \"の\":\"no\",\n    \"は\":\"ha\",\n    \"ひ\":\"hi\",\n    \"ふ\":\"hu\",\n    \"へ\":\"he\",\n    \"ほ\":\"ho\",\n    \"ま\":\"ma\",\n    \"み\":\"mi\",\n    \"む\":\"mu\",\n    \"め\":\"me\",\n    \"も\":\"mo\",\n    \"や\":\"ya\",\n    \"ゆ\":\"yu\",\n    \"よ\":\"yo\",\n    \"ら\":\"ra\",\n    \"り\":\"ri\",\n    \"る\":\"ru\",\n    \"れ\":\"re\",\n    \"ろ\":\"ro\",\n    \"わ\":\"wa\",\n    \"を\":\"wo\",\n    \"ん\":\"nn\",\n    \"が\":\"ga\",\n    \"ぎ\":\"gi\",\n    \"ぐ\":\"gu\",\n    \"げ\":\"ge\",\n    \"ご\":\"go\",\n    \"ざ\":\"za\",\n    \"じ\":\"zi\",\n    \"ず\":\"zu\",\n    \"ぜ\":\"ze\",\n    \"ぞ\":\"zo\",\n    \"だ\":\"da\",\n    \"ぢ\":\"di\",\n    \"づ\":\"du\",\n    \"で\":\"de\",\n    \"ど\":\"do\",\n    \"ば\":\"ba\",\n    \"び\":\"bi\",\n    \"ぶ\":\"bu\",\n    \"べ\":\"be\",\n    \"ぼ\":\"bo\",\n    \"ぱ\":\"pa\",\n    \"ぴ\":\"pi\",\n    \"ぷ\":\"pu\",\n    \"ぺ\":\"pe\",\n    \"ぽ\":\"po\",\n    \"ぁ\":\"la\",\n    \"ぃ\":\"li\",\n    \"ぅ\":\"lu\",\n    \"ぇ\":\"le\",\n    \"ぉ\":\"lo\",\n    \"ゃ\":\"lya\",\n    \"ゅ\":\"lyu\",\n    \"ょ\":\"lyo\",\n    \"でゃ\":\"dha\",\n    \"でぃ\":\"dhi\",\n    \"でゅ\":\"dhu\",\n    \"でぇ\":\"dhe\",\n    \"でょ\":\"dho\",\n    \"つぁ\":\"tsa\",\n    \"つぃ\":\"tsi\",\n    \"つぇ\":\"tse\",\n    \"つぉ\":\"tso\",\n    \"てゃ\":\"tha\",\n    \"てぃ\":\"thi\",\n    \"てゅ\":\"thu\",\n    \"てぇ\":\"the\",\n    \"てょ\":\"tho\",\n    \"ふぁ\":\"fa\",\n    \"ふぃ\":\"fi\",\n    \"ふぇ\":\"fe\",\n    \"ふぉ\":\"fo\",\n    \"うぁ\":\"wha\",\n    \"うぃ\":\"wi\",\n    \"うぇ\":\"we\",\n    \"うぉ\":\"who\",\n    \"ゔぁ\":\"va\",\n    \"ゔぃ\":\"vi\",\n    \"ゔ\":\"vu\",\n    \"ゔぇ\":\"ve\",\n    \"ゔぉ\":\"vo\",\n    \"きゃ\":\"kya\",\n    \"きぃ\":\"kyi\",\n    \"きゅ\":\"kyu\",\n    \"きぇ\":\"kye\",\n    \"きょ\":\"kyo\",\n    \"ぎゃ\":\"gya\",\n    \"ぎぃ\":\"gyi\",\n    \"ぎゅ\":\"gyu\",\n    \"ぎぇ\":\"gye\",\n    \"ぎょ\":\"gyo\",\n    \"しゃ\":\"sya\",\n    \"しぃ\":\"syi\",\n    \"しゅ\":\"syu\",\n    \"しぇ\":\"sye\",\n    \"しょ\":\"syo\",\n    \"じゃ\":\"zya\",\n    \"じぃ\":\"zyi\",\n    \"じゅ\":\"zyu\",\n    \"じぇ\":\"zye\",\n    \"じょ\":\"zyo\",\n    \"ちゃ\":\"tya\",\n    \"ちぃ\":\"tyi\",\n    \"ちゅ\":\"tyu\",\n    \"ちぇ\":\"tye\",\n    \"ちょ\":\"tyo\",\n    \"ぢゃ\":\"dya\",\n    \"ぢぃ\":\"dyi\",\n    \"ぢゅ\":\"dyu\",\n    \"ぢぇ\":\"dye\",\n    \"ぢょ\":\"dyo\",\n    \"にゃ\":\"nya\",\n    \"にぃ\":\"nyi\",\n    \"にゅ\":\"nyu\",\n    \"にぇ\":\"nye\",\n    \"にょ\":\"nyo\",\n    \"ひゃ\":\"hya\",\n    \"ひぃ\":\"hyi\",\n    \"ひゅ\":\"hyu\",\n    \"ひぇ\":\"hye\",\n    \"ひょ\":\"hyo\",\n    \"びゃ\":\"bya\",\n    \"びぃ\":\"byi\",\n    \"びゅ\":\"byu\",\n    \"びぇ\":\"bye\",\n    \"びょ\":\"byo\",\n    \"ぴゃ\":\"pya\",\n    \"ぴぃ\":\"pyi\",\n    \"ぴゅ\":\"pyu\",\n    \"ぴぇ\":\"pye\",\n    \"ぴょ\":\"pyo\",\n    \"ふゃ\":\"fya\",\n    \"ふぃ\":\"fyi\",\n    \"ふゅ\":\"fyu\",\n    \"ふぇ\":\"fye\",\n    \"ふょ\":\"fyo\",\n    \"みゃ\":\"mya\",\n    \"みぃ\":\"myi\",\n    \"みゅ\":\"myu\",\n    \"みぇ\":\"mye\",\n    \"みょ\":\"myo\",\n    \"りゃ\":\"rya\",\n    \"りぃ\":\"ryi\",\n    \"りゅ\":\"ryu\",\n    \"りぇ\":\"rye\",\n    \"りょ\":\"ryo\",\n    \"くぁ\":\"kwa\",\n    \"ぐぁ\":\"gwa\",\n    \"とぅ\":\"twu\",\n    \"どぅ\":\"dwu\",\n    \"いぇ\":\"ye\",\n    \"っ\":\"ltsu\"\n  };\n\n  const romaMappingTableSecond = {\n    \"い\":\"yi\",\n    \"か\":\"ca\",\n    \"く\":\"cu\",\n    \"こ\":\"co\",\n    \"し\":\"shi\",\n    \"せ\":\"ce\",\n    \"ち\":\"chi\",\n    \"つ\":\"tsu\",\n    \"ふ\":\"fu\",\n    \"じ\":\"ji\",\n    \"ぁ\":\"xa\",\n    \"ぃ\":\"xi\",\n    \"ぅ\":\"xu\",\n    \"ぇ\":\"xe\",\n    \"ぉ\":\"xo\",\n    \"ゃ\":\"xya\",\n    \"ゅ\":\"xyu\",\n    \"ょ\":\"xyo\",\n    \"しゃ\":\"sha\",\n    \"しゅ\":\"shu\",\n    \"しぇ\":\"she\",\n    \"しょ\":\"sho\",\n    \"じゃ\":\"ja\",\n    \"じぃ\":\"jyi\",\n    \"じゅ\":\"ju\",\n    \"じぇ\":\"je\",\n    \"じょ\":\"jo\",\n    \"ちゃ\":\"cha\",\n    \"ちぃ\":\"cyi\",\n    \"ちゅ\":\"chu\",\n    \"ちぇ\":\"che\",\n    \"ちょ\":\"cho\",\n    \"うぃ\":\"whi\",\n    \"うぇ\":\"whe\",\n    \"ん\":\"xn\",\n    \"っ\":\"ltu\"\n  };\n\n  const romaMappingTableThird = {\n    \"し\":\"ci\",\n    \"じゃ\":\"jya\",\n    \"じゅ\":\"jyu\",\n    \"じぇ\":\"jye\",\n    \"じょ\":\"jyo\",\n    \"ちゃ\":\"cya\",\n    \"ちゅ\":\"cyu\",\n    \"ちぇ\":\"cye\",\n    \"ちょ\":\"cyo\",\n    \"っ\":\"xtsu\"\n  };\n\n  const romaMappingTableFourth = {\n    \"っ\":\"xtu\"\n  };\n    \n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 10;\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n    countDownPopupNumber = countDownPopupNumber - 1;\n    if (countDownPopupNumber <= 0){\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  }\n\n  // ゲームを開始する処理を定義する。\n  function typingPlayStart(){\n\n    // 表示する単語を定義する。\n    const displayWord = document.getElementById(\"displayWord\");\n    displayWord.className =  \"displayWord\";\n    const displayWordEnglish = document.getElementById(\"displayWordEnglish\");\n    displayWordEnglish.className =  \"displayWordEnglish\";\n    // 表示する単語を一文字ずつに分ける変数を定義する。\n    let charArrayInDisplayWordJap =[];\n    // 表示する単語を作成する。\n    createDisplayWord();\n\n    // プレイ開始時間を取得する。\n    const startTime = Date.now();\n    // 表示する残りのプレイ可能時間を定義する。\n    let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className =  \"remainPlayingTime\";\n    // 表示するスタート時のプレイ可能時間を定義する。\n    let initialPlayingTimeMSec = 120000;\n    // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n    setTimeout(countDownTime,0);\n    // 1秒ごとにcountDownTimeを実施するように定義する。\n    const timerId = setInterval(countDownTime,1000);\n\n    // 表示するスコアを定義する。\n    let displayScore = document.getElementById(\"displayScore\");\n    displayScore.className =  \"displayScore\";\n    // 合計スコアの初期値を定義する。\n    let totalScore = 0;\n    // 表示するスコアに初期値を定義する。\n    displayScore.textContent = totalScore + \" P\";\n    // スコアアップする基準を定義する。\n    const refTextLengthForCountUpLevel1 = 4;\n    const addScoreLevel1 = 1000;\n    const addScoreLevel2 = 3000;\n\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n    document.addEventListener(`keydown`, keyDownCharCountUp);\n\n    // ゲーム終了を判定するフラグを定義する。\n    let playEndFlag = \"0\";\n\n    // 表示する単語を作成する処理を定義する。\n    function createDisplayWord(){\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\";\n      // 0〜textListsの総数間で整数値をランダムで算出する。\n      let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n      // 表示する単語をランダムで選定する。\n      displayWordInList = wordList[randomIntegerInTotalWordList];\n\n      // 英単語を表示させる。\n      displayWordEnglish.textContent = displayWordInList.eng_word;\n      // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n      charArrayInDisplayWordJap = displayWordInList.jap_trans_1_yomi.split(\"\").map(function(value){\n        // spanタグを作成する。\n        let spanValue = document.createElement(\"span\");\n        // spanタグに一文字を挿入する。\n        spanValue.textContent = value;\n        // 表示する単語にspanタグで閉じた一文字を追加する。\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    }\n\n    // プレイ時間をカウントダウンする処理を定義する。\n    function countDownTime(){\n      const currentTime = Date.now();\n      const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      const remainSec = Math.ceil(remainMSec/1000);\n      let  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n      if (remainMSec <= 0){\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent =\"\";\n        displayWord.textContent =\"\";\n        displayWordEnglish.textContent =\"\";\n        // ゲーム終了後にplayEndFlagを1に更新する。\n        playEndFlag = \"1\";\n        // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n        const closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent =\"終了\";\n        closePopup.className = \"closePopup\";\n        // 戻るボタンを定義する。\n        const backBtn = document.getElementById(\"backBtn\");\n        // もう一度ボタンを定義する。\n        const restartBtn = document.getElementById(\"restartBtn\");\n        // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n        setTimeout(function(){\n          closePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n          closePopup.className = \"endResultPopup\";\n          restartBtn.innerHTML = \"<a href='../'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='../'>タイトルに戻る</a>\";\n          backBtn.className = \"backBtn\";\n        },2000);\n      }\n      // 残りプレイ可能時間を更新する。\n      remainPlayingTime.textContent = remainSecLabel;\n    }\n\n    // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n    function countUpScore(){\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = `${totalScore.toLocaleString()} P`;\n      return totalScore;\n    }\n\n\n    let wordLetterWithSmallLetter = \"\";\n    let wordLetterSole = \"\";\n\n\n    let charArrayInDisplayWordAlphaFirst = [];\n    let charArrayInDisplayWordAlphaSecond = [];\n    let charArrayInDisplayWordAlphaThird = [];\n    let charArrayInDisplayWordAlphaFourth = [];\n    let charArrayInDisplayWordAlphaSole = [];\n    let charArrayInDisplayWordAlphaSoleSecond = [];\n    let charArrayInDisplayWordAlphaSoleThird = [];\n    let charArrayInDisplayWordAlphaSoleFourth = [];\n    \n\n    let shiftAlreadyStartedCountAll = 0;\n    let shiftAlreadyStartedCountFirst = 0;\n    let shiftAlreadyStartedCountSecond = 0;\n    let shiftAlreadyStartedCountThird = 0;\n    let shiftAlreadyStartedCountSoleFirst = 0;\n    let shiftAlreadyStartedCountSoleSecond = 0;\n    let shiftAlreadyStartedCountSoleThird = 0;\n    let shiftAlreadyStartedFlagSoleToFourth = 0;\n\n    let keyTempForSmallTsuSoleFlag = 0;\n\n    let keyTempForSmallTsuPreFirst = \"\";\n    let keyTempForSmallTsuPreSecond = \"\";\n    let keyTempForSmallTsuPreThird = \"\";\n    let keyTempForNN = \"\";\n\n    // タイプした文字が表示文字と一致する場合の処理を定義する。\n    function keyDownCharCountUp(keyDownChar){\n\n\n      // 先頭文字が小さい\"っ\"の場合\n      if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n        if (keyDownChar.key !== \"a\"\n            && keyDownChar.key !== \"i\"\n            && (keyDownChar.key !== \"u\" && keyTempForSmallTsuPreSecond !== \"t\")\n            && keyDownChar.key !== \"e\"\n            && keyDownChar.key !== \"o\"\n            && keyDownChar.key !== \"n\") {\n                  if (charArrayInDisplayWordJap[1] != null){\n                  // 同じアルファベットを入力した場合、\"っ\"を入力完了にし、再度keyDownCharCountUpを実施する。\n                    if(keyDownChar.key === keyTempForSmallTsuPreFirst){\n                      keyTempForSmallTsuPreFirst = \"\";\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                      keyDownCharCountUp(keyDownChar);\n                      correctTyping();\n                    }\n                  }\n                    // \"っ\"の単独入力を可能にする\n                    if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n                    && keyDownChar.key === \"t\") {\n                      keyTempForSmallTsuPreSecond = keyDownChar.key;\n                      correctTyping();\n                    // 次のアルファベットは\"su\"か\"u\"のみを許容する。\n                    } else if(keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"s\"){\n                      keyTempForSmallTsuPreThird = keyDownChar.key;\n                      correctTyping();\n                    } else if(keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"u\"){\n                      keyTempForSmallTsuPreFirst = \"\";\n                      keyTempForSmallTsuSecond = \"\";\n                      keyTempForSmallTsuThird = \"\";\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                      correctTyping();\n                    } else {\n                      // keyTempForSmallTsuPreFirst = keyDownChar.key;\n                      bonusCountReset();\n                    };\n                    keyTempForSmallTsuPreFirst = keyDownChar;\n                    console.log(keyTempForSmallTsuPreFirst);\n        } else {\n          \n        }\n      } else {\n\n      // 入力対象文字をアルファベットに分解する。\n                // 入力対象文字に対して、入力処理が開始していない場合\n                if (shiftAlreadyStartedCountAll === 0 ){\n                  // 2文字目が存在する場合(最後の文字でない場合)\n                  if(charArrayInDisplayWordJap[1] != null){\n                    // 2文字を一緒に入力するパターンに対応する処理を定義する。\n                    wordLetterWithSmallLetter = charArrayInDisplayWordJap[0].textContent + charArrayInDisplayWordJap[1].textContent;\n                  // 文字をローマ字に変換し、アルファベットごとに分ける。\n                  // 2文字に対して、ローマ字変換パターン１をsplitする。\n                  if (romaMappingTableFirst[wordLetterWithSmallLetter] != null){\n                  charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetterWithSmallLetter].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                  })};\n                  // 2文字に対してローマ字変換パターン２が存在する場合はsplitする。\n                  if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                    charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetterWithSmallLetter].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                  // 2文字に対してローマ字変換パターン３が存在する場合はsplitする。\n                  if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                    charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetterWithSmallLetter].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                };\n\n                  // 1文字のみを先に入力するパターンに対応する処理を定義する。\n                  wordLetterSole = charArrayInDisplayWordJap[0].textContent;\n                  // 1文字目のみ対して、ローマ字変換パターン１をsplitする。\n                  // 母音の場合はsplit不可のため処理を分ける。\n                  if (wordLetterSole !== \"あ\"\n                      && wordLetterSole !== \"い\"\n                      && wordLetterSole !== \"う\"\n                      && wordLetterSole !== \"え\"\n                      && wordLetterSole !== \"お\"){\n                  charArrayInDisplayWordAlphaSole = romaMappingTableFirst[wordLetterSole].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                  })} else {\n                      let spanValue = document.createElement(\"span\");\n                      spanValue.textContent = romaMappingTableFirst[wordLetterSole];\n                      charArrayInDisplayWordAlphaSole = [spanValue];\n                  };\n\n                  // 1文字目のみ対してローマ字変換パターン２が存在する場合はsplitする。\n                  if (romaMappingTableSecond[wordLetterSole] != null){\n                    charArrayInDisplayWordAlphaSoleSecond = romaMappingTableSecond[wordLetterSole].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                  // 1文字目のみ対してローマ字変換パターン３が存在する場合はsplitする。\n                  if (romaMappingTableThird[wordLetterSole] != null){\n                    charArrayInDisplayWordAlphaSoleThird = romaMappingTableThird[wordLetterSole].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                };\n\n        // 文字入力によるアルファベットに対する処理を開始する。\n            // 文字の入力開始前である場合\n              if (shiftAlreadyStartedCountAll === 0){\n                // 2文字目が存在する場合(最後の文字でない場合)\n                if(charArrayInDisplayWordJap[1] != null){\n                // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n                if (romaMappingTableFirst[wordLetterWithSmallLetter] != null){\n                if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountFirst = 1;\n                  if(charArrayInDisplayWordAlphaFirst.length === 0){\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                }}};\n                // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n                if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n                      charArrayInDisplayWordAlphaSecond.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountSecond = 1;\n                      if(charArrayInDisplayWordAlphaSecond.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_red\";\n                        charArrayInDisplayWordJap[1].className = \"add_red\";\n                        charArrayInDisplayWordJap.shift();\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                }}};\n                // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n                if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n                      charArrayInDisplayWordAlphaThird.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountThird = 1;\n                      if(charArrayInDisplayWordAlphaThird.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_red\";\n                        charArrayInDisplayWordJap[1].className = \"add_red\";\n                        charArrayInDisplayWordJap.shift();\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                }}}};\n\n                // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n                if(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                    charArrayInDisplayWordAlphaSole.shift();\n                    shiftAlreadyStartedCountAll = 1;\n                    shiftAlreadyStartedCountSoleFirst = 1;\n                  if(charArrayInDisplayWordAlphaSole.length === 0){\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }};\n                // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n                if (romaMappingTableSecond[wordLetterSole] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent\n                      && charArrayInDisplayWordAlphaSole.length !== 0){\n                      charArrayInDisplayWordAlphaSoleSecond.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountSoleSecond = 1;\n                      if(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_red\";\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                    }}};\n                // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n                if (romaMappingTableThird[wordLetterSole] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent\n                      && charArrayInDisplayWordAlphaSole.length !== 0\n                      && charArrayInDisplayWordAlphaSoleSecond.length !== 0){\n                      charArrayInDisplayWordAlphaSoleThird.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountSoleThird = 1;\n                      if(charArrayInDisplayWordAlphaSoleThird.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_red\";\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                      }}};\n\n                // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n                if (shiftAlreadyStartedCountFirst === 1\n                    || shiftAlreadyStartedCountSecond === 1\n                    || shiftAlreadyStartedCountThird === 1\n                    || shiftAlreadyStartedCountSoleFirst === 1\n                    || shiftAlreadyStartedCountSoleSecond === 1\n                    || shiftAlreadyStartedCountSoleThird === 1) {\n                  correctTyping(); \n                } else {\n                  bonusCountReset();\n                };\n                \n                // 文字入力が完了している場合、カウントを0にする。\n                if (shiftAlreadyStartedCountAll === 0){\n                  shiftAlreadyStartedCountFirst = 0;\n                  shiftAlreadyStartedCountSecond = 0;\n                  shiftAlreadyStartedCountThird = 0;\n                  shiftAlreadyStartedCountSoleFirst = 0;\n                  shiftAlreadyStartedCountSoleSecond = 0;\n                  shiftAlreadyStartedCountSoleThird = 0;\n                };\n              \n\n      // すでに1つのアルファベットを入力済みの場合\n      } else if (shiftAlreadyStartedCountAll === 1){\n        // 2文字目が存在する場合(最後の文字でない場合)\n        if(charArrayInDisplayWordJap[1] != null){\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountFirst === 1){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountFirst = 2;\n                if(charArrayInDisplayWordAlphaFirst.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n              }}};\n              // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountSecond === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSecond = 2;\n                    if(charArrayInDisplayWordAlphaSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}};\n              // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountThird === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountThird = 2;\n                    if(charArrayInDisplayWordAlphaThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}}};\n\n              // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountSoleFirst === 1){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                  charArrayInDisplayWordAlphaSole.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSoleFirst = 2;\n                if(charArrayInDisplayWordAlphaSole.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleSecond === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSoleSecond.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSoleSecond = 2;\n                    if(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                  }}}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleThird === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent){\n                    charArrayInDisplayWordAlphaSoleThird.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSoleThird = 2;\n                    if(charArrayInDisplayWordAlphaSoleThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }}}};\n\n\n\n              // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n              if (shiftAlreadyStartedCountFirst === 2\n                || shiftAlreadyStartedCountSecond === 2\n                || shiftAlreadyStartedCountThird === 2\n                || shiftAlreadyStartedCountSoleFirst === 2\n                || shiftAlreadyStartedCountSoleSecond === 2\n                || shiftAlreadyStartedCountSoleThird === 2) {\n                correctTyping(); \n              } else {\n                bonusCountReset();\n              };\n            \n                // 文字入力が完了している場合、カウントを0にする。\n                if (shiftAlreadyStartedCountAll === 0){\n                  shiftAlreadyStartedCountFirst = 0;\n                  shiftAlreadyStartedCountSecond = 0;\n                  shiftAlreadyStartedCountThird = 0;\n                  shiftAlreadyStartedCountSoleFirst = 0;\n                  shiftAlreadyStartedCountSoleSecond = 0;\n                  shiftAlreadyStartedCountSoleThird = 0;\n                };\n              \n\n        // すでに2つのアルファベットを入力済みの場合\n        } else if (shiftAlreadyStartedCountAll === 2){\n          // 2文字目が存在する場合(最後の文字でない場合)\n          if(charArrayInDisplayWordJap[1] != null){\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountFirst === 2){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountFirst = 3;\n                if(charArrayInDisplayWordAlphaFirst.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap[1].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n              }}};\n              // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountSecond === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSecond = 3;\n                    if(charArrayInDisplayWordAlphaSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}};\n              // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountThird === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountThird = 3;\n                    if(charArrayInDisplayWordAlphaThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}}};\n\n              // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountSoleFirst === 2){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                  charArrayInDisplayWordAlphaSole.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSoleFirst = 3;\n                if(charArrayInDisplayWordAlphaSole.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleSecond === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSoleSecond.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSoleSecond = 3;\n                    if(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                  }}}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleThird === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent){\n                    charArrayInDisplayWordAlphaSoleThird.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSoleThird = 3;\n                    if(charArrayInDisplayWordAlphaSoleThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }}}};\n\n            // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n            if (shiftAlreadyStartedCountFirst === 3\n              || shiftAlreadyStartedCountSecond === 3\n              || shiftAlreadyStartedCountThird === 3\n              || shiftAlreadyStartedCountSoleFirst === 3\n              || shiftAlreadyStartedCountSoleSecond === 3\n              || shiftAlreadyStartedCountSoleThird === 3) {\n              correctTyping(); \n            } else {\n              bonusCountReset();\n            };\n          \n              // 文字入力が完了している場合、カウントを0にする。\n              if (shiftAlreadyStartedCountAll === 0){\n                shiftAlreadyStartedCountFirst = 0;\n                shiftAlreadyStartedCountSecond = 0;\n                shiftAlreadyStartedCountThird = 0;\n                shiftAlreadyStartedCountSoleFirst = 0;\n                shiftAlreadyStartedCountSoleSecond = 0;\n                shiftAlreadyStartedCountSoleThird = 0;\n              };\n            };\n\n    \n            \n          // \"ん\"の場合、かつ次の文字が母音でない場合は\"n\"+\"n以外の子音\"でもOKとする。\n             if (charArrayInDisplayWordJap[0].textContent === \"ん\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"あ\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"い\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"う\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"え\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"お\"\n                          && shiftAlreadyStartedCountAll === 1\n                          && keyTempForNN !== \"x\"){\n                if(keyDownChar.key !== \"a\"\n                    && keyDownChar.key !== \"i\"\n                    && keyDownChar.key !== \"u\"\n                    && keyDownChar.key !== \"e\"\n                    && keyDownChar.key !== \"o\"){\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                  keyTempForNN = \"\";\n                  if(keyDownChar.key !== \"n\"){\n                  keyDownCharCountUp(keyDownChar);\n                  }\n                  correctTyping();\n                } else {\n                  bonusCountReset();\n                };\n                \n            // 上記以外の文字の場合\n            // } else {\n            //   let wordLetter = charArrayInDisplayWordJap[0].textContent;\n            //       // ローマ字変換の複数パターンをsplitする。\n            //   if (shiftAlreadyStartedCountAll === 0 ){\n            //       // ローマ字変換パターン１をsplitする。\n            //       charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetter].split(\"\").map(function(value){\n            //       let spanValue = document.createElement(\"span\");\n            //       spanValue.textContent = value;\n            //       return spanValue;\n            //     });\n            //       // ローマ字変換パターン２が存在する場合はsplitする。\n            //       if (romaMappingTableSecond[wordLetter] != null){\n            //         charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetter].split(\"\").map(function(value){\n            //         let spanValue = document.createElement(\"span\");\n            //         spanValue.textContent = value;\n            //         return spanValue;\n            //       });\n            //     };\n            //       // ローマ字変換パターン３が存在する場合はsplitする。\n            //       if (romaMappingTableThird[wordLetter] != null){\n            //         charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetter].split(\"\").map(function(value){\n            //         let spanValue = document.createElement(\"span\");\n            //         spanValue.textContent = value;\n            //         return spanValue;\n            //       });\n            //     };\n            //   };\n            //   // タイプキーがローマ字変換パターン１に該当する場合\n            //   if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n            //       charArrayInDisplayWordAlphaFirst.shift();\n            //       shiftAlreadyStartedCountAll = 1;\n            //       shiftAlreadyStartedFlagSoleToFourth = 1;\n            //       // \"ん\"の入力文字先頭が\"x\"の場合、\"ん\"の条件を分岐するのに使用する。\n            //       if (keyDownChar.key === \"x\"){\n            //         keyTempForNN = keyDownChar.key;\n            //       };\n            //       if(charArrayInDisplayWordAlphaFirst.length === 0){\n            //         charArrayInDisplayWordJap[0].className = \"add_red\";\n            //         charArrayInDisplayWordJap.shift();\n            //         shiftAlreadyStartedCountAll = 0;\n            //         keyTempForNN = \"\";\n            //       }};\n            //   // タイプキーがローマ字変換パターン２に該当する場合\n            //   if (romaMappingTableSecond[wordLetter] != null){\n            //       if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent\n            //           && charArrayInDisplayWordAlphaFirst.length !== 0){\n            //         charArrayInDisplayWordAlphaSecond.shift();\n            //         shiftAlreadyStartedCountAll = 1;\n            //         shiftAlreadyStartedFlagSoleToFourth = 1;\n            //         // \"ん\"の入力文字先頭が\"x\"の場合、\"ん\"の条件を分岐するのに使用する。\n            //         if (keyDownChar.key === \"x\"){\n            //           keyTempForNN = keyDownChar.key;\n            //         };\n            //         if(charArrayInDisplayWordAlphaSecond.length === 0){\n            //           charArrayInDisplayWordJap[0].className = \"add_red\";\n            //           charArrayInDisplayWordJap.shift();\n            //           shiftAlreadyStartedCountAll = 0;\n            //           keyTempForNN = \"\";\n            //       }}};\n            //   // タイプキーがローマ字変換パターン３に該当する場合\n            //   if (romaMappingTableThird[wordLetter] != null){\n            //       if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent\n            //         && charArrayInDisplayWordAlphaFirst.length !== 0\n            //         && charArrayInDisplayWordAlphaSecond.length !== 0){\n            //         charArrayInDisplayWordAlphaThird.shift();\n            //         shiftAlreadyStartedCountAll = 1;\n            //         shiftAlreadyStartedFlagSoleToFourth = 1;\n            //         // \"ん\"の入力文字先頭が\"x\"の場合、\"ん\"の条件を分岐するのに使用する。\n            //         if (keyDownChar.key === \"x\"){\n            //           keyTempForNN = keyDownChar.key;\n            //         };\n            //         if(charArrayInDisplayWordAlphaThird.length === 0){\n            //           charArrayInDisplayWordJap[0].className = \"add_red\";\n            //           charArrayInDisplayWordJap.shift();\n            //           shiftAlreadyStartedCountAll = 0;\n            //           keyTempForNN = \"\";\n            //         }}};\n\n            //   // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n            //   if (shiftAlreadyStartedFlagSoleToFourth === 1) {\n            //     correctTyping(); \n            //     shiftAlreadyStartedFlagSoleToFourth = 0;\n            //   } else {\n            //     bonusCountReset();\n            //   };\n            }}};;\n        \n    //   // 最後の文字である場合\n    //     // 母音の場合(splitできないため他の処理と分けて処理を定義する)\n    //     } else if (charArrayInDisplayWordJap[0].textContent === \"あ\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"い\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"う\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"え\"\n    //       || charArrayInDisplayWordJap[0].textContent === \"お\" ) {\n    //       let wordLetter = charArrayInDisplayWordJap[0].textContent;\n    //           if (shiftAlreadyStartedCountAll === 0 ) {\n    //               if (keyDownChar.key === romaMappingTableFirst[wordLetter]){\n    //                   charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                   charArrayInDisplayWordJap.shift();\n    //                   correctTyping();\n    //                 } else {\n    //                   bonusCountReset();\n    //                 };\n    //           };\n\n    //     // 上記以外の場合\n    //     } else {\n    //       let wordLetter = charArrayInDisplayWordJap[0].textContent;\n    //               // ローマ字変換の複数パターンをsplitする。\n    //           if (shiftAlreadyStartedCountAll === 0 ){\n    //               // ローマ字変換パターン１をsplitする。\n    //               charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetter].split(\"\").map(function(value){\n    //               let spanValue = document.createElement(\"span\");\n    //               spanValue.textContent = value;\n    //               return spanValue;\n    //             });\n    //               // ローマ字変換パターン２が存在する場合はsplitする。\n    //               if (romaMappingTableSecond[wordLetter] != null){\n    //                 charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetter].split(\"\").map(function(value){\n    //                 let spanValue = document.createElement(\"span\");\n    //                 spanValue.textContent = value;\n    //                 return spanValue;\n    //               });\n    //             };\n    //               // ローマ字変換パターン３が存在する場合はsplitする。\n    //               if (romaMappingTableThird[wordLetter] != null){\n    //                 charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetter].split(\"\").map(function(value){\n    //                 let spanValue = document.createElement(\"span\");\n    //                 spanValue.textContent = value;\n    //                 return spanValue;\n    //               });\n    //             };\n    //               // ローマ字変換パターン４が存在する場合はsplitする。\n    //               if (romaMappingTableFourth[wordLetter] != null){\n    //                 charArrayInDisplayWordAlphaFourth = romaMappingTableFourth[wordLetter].split(\"\").map(function(value){\n    //                 let spanValue = document.createElement(\"span\");\n    //                 spanValue.textContent = value;\n    //                 return spanValue;\n    //               });\n    //             };\n    //           };\n    //           // タイプキーがローマ字変換パターン１に該当する場合\n    //           if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n    //               charArrayInDisplayWordAlphaFirst.shift();\n    //               shiftAlreadyStartedCountAll = 1;\n    //               shiftAlreadyStartedFlagSoleToFourth = 1;\n    //               if(charArrayInDisplayWordAlphaFirst.length === 0){\n    //                 charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                 charArrayInDisplayWordJap.shift();\n    //                 shiftAlreadyStartedCountAll = 0;\n    //               }};\n    //           // タイプキーがローマ字変換パターン２に該当する場合\n    //           if (romaMappingTableSecond[wordLetter] != null){\n    //               if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent\n    //                   && charArrayInDisplayWordAlphaFirst.length !== 0){\n    //                 charArrayInDisplayWordAlphaSecond.shift();\n    //                 shiftAlreadyStartedCountAll = 1;\n    //                 shiftAlreadyStartedFlagSoleToFourth = 1;\n    //                 if(charArrayInDisplayWordAlphaSecond.length === 0){\n    //                   charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                   charArrayInDisplayWordJap.shift();\n    //                   shiftAlreadyStartedCountAll = 0;\n    //               }}};\n    //           // タイプキーがローマ字変換パターン３に該当する場合\n    //           if (romaMappingTableThird[wordLetter] != null){\n    //               if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent\n    //                 && charArrayInDisplayWordAlphaFirst.length !== 0\n    //                 && charArrayInDisplayWordAlphaSecond.length !== 0){\n    //                 charArrayInDisplayWordAlphaThird.shift();\n    //                 shiftAlreadyStartedCountAll = 1;\n    //                 shiftAlreadyStartedFlagSoleToFourth = 1;\n    //                 if(charArrayInDisplayWordAlphaThird.length === 0){\n    //                   charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                   charArrayInDisplayWordJap.shift();\n    //                   shiftAlreadyStartedCountAll = 0;\n    //                 }}};\n    //           // タイプキーがローマ字変換パターン４に該当する場合\n    //           if (romaMappingTableFourth[wordLetter] != null){\n    //             if(keyDownChar.key === charArrayInDisplayWordAlphaFourth[0].textContent\n    //               && charArrayInDisplayWordAlphaFirst.length !== 0\n    //               && charArrayInDisplayWordAlphaSecond.length !== 0\n    //               && charArrayInDisplayWordAlphaThird.length !== 0){\n    //               charArrayInDisplayWordAlphaFourth.shift();\n    //               shiftAlreadyStartedCountAll = 1;\n    //               shiftAlreadyStartedFlagSoleToFourth = 1;\n    //               if(charArrayInDisplayWordAlphaFourth.length === 0){\n    //                 charArrayInDisplayWordJap[0].className = \"add_red\";\n    //                 charArrayInDisplayWordJap.shift();\n    //                 shiftAlreadyStartedCountAll = 0;\n    //               }}};\n    //           // タイプキーがローマ字変換パターン１〜４のいずれかに該当する場合\n    //           if (shiftAlreadyStartedFlagSoleToFourth === 1) {\n    //             correctTyping(); \n    //             shiftAlreadyStartedFlagSoleToFourth = 0;\n    //           } else {\n    //             bonusCountReset();\n    //           };\n    //     };\n    // };\n\n\n    function correctTyping(){\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter +1;\n      // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n      if(charArrayInDisplayWordJap.length === 0) countUpScore(), createDisplayWord();\n      // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n      if(bonusCountMeter >= bonusCountMeterMax){\n        bonusCountMeter = 0;\n        // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n        initialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n        // 延長した残りプレイ時間を表示する。\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n        // 延長した残りプレイ時間をフェードアウトする。\n        displayBonusAddPlayTime.classList.add('fadeout');\n        // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n        setTimeout(function(){ \n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      };\n      // 更新したメーターを表示する。\n      document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n    };\n\n    function bonusCountReset(){\n      bonusCountMeter = 0;\n      document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n    };\n  }\n});\n"]},"metadata":{},"sourceType":"module"}