{"ast":null,"code":"window.addEventListener('load', function () {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eeeeee\", \"ffffff\", \"gggggg\", \"hhhhhh\"]; // 表示する単語を定義する。\n\n  var displayWord = document.getElementById(\"displayWord\"); // 表示する単語を一文字ずつに分ける変数を定義する。\n\n  var charArrayInDisplayWord = []; // 表示する単語を作成する。\n\n  createDisplayWord(); // 表示する単語を作成する。\n\n  function createDisplayWord() {\n    // 表示単語を初期化する。\n    displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n    var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n    // spanタグで閉じた単語を表示する。\n\n    charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].split(\"\").map(function (value) {\n      // spanタグを作成する。\n      var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n      spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n      displayWord.appendChild(spanValue);\n      return spanValue;\n    });\n  } // 表示する残りのプレイ可能時間を定義する。\n\n\n  var remainPlayingTime = document.getElementById(\"remainPlayingTime\"); // 表示するスタート時のプレイ可能時間を定義する。\n\n  var initialPlayingTimeMSec = 6000; // const closePopup = document.getElementById(\"closePopup\");\n  // let endFlag = \"0\";\n\n  var startTime = Date.now();\n\n  var countDownTime = function countDownTime() {\n    var currentTime = Date.now();\n    var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n    var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n    var remainSec = Math.ceil(remainMSec / 1000);\n    var remainSecLabel = \"\\u6B8B\\u308A\".concat(remainSec, \"\\u79D2\");\n\n    if (remainMSec <= 0) {\n      clearInterval(timerId);\n      remainSecLabel = \"\"; //  const totalScore = score - addPoint;\n      //  point.textContent =\"\";\n      //  point.className = \"transparent\";\n      //  p.textContent =\"\";\n      //  p.className =\"transparent\";\n      //  endFlag = \"1\";\n      //     closePopup.textContent =\"終了\";\n      //     closePopup.className = \"closePopup\";\n      //     setTimeout(function(){\n      //       closePopup.textContent = `あなたの得点は${totalScore}点です!`;\n      //       closePopup.className = \"endPopup\";\n      //     },1000);\n    }\n\n    remainPlayingTime.textContent = remainSecLabel;\n  }; // \n  // setTimeout(countDownTime,0);\n  // 1秒ごとにcountDownを実施する。\n\n\n  var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n  var displayScore = document.getElementById(\"displayScore\"); // 合計スコアの初期値を定義する。\n\n  var totalScore = 0;\n  var textLength = 4;\n  var addPointLevel1 = 1;\n  var addPointLevel2 = 3; // setTimeout(countUpScore,0);\n\n  function countUpScore() {\n    displayScore.textContent = totalScore;\n\n    if (charArrayInDisplayWord.length < textLength) {\n      addPoint = addPointLevel1;\n    } else {\n      addPoint = addPointLevel2;\n    }\n\n    totalScore = totalScore + addPoint;\n    return totalScore;\n  } // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n\n  document.addEventListener(\"keydown\", keyDownCharCountUp); // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10.png', '/assets/メーターPNG/メーター20.png', '/assets/メーターPNG/メーター30.png', '/assets/メーターPNG/メーター40.png', '/assets/メーターPNG/メーター50.png', '/assets/メーターPNG/メーター60.png', '/assets/メーターPNG/メーター70.png', '/assets/メーターPNG/メーター80.png', '/assets/メーターPNG/メーター90.png', '/assets/メーターPNG/メーター100.png']; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 10; // メーターを表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n  function keyDownCharCountUp(keyDownChar) {\n    if (keyDownChar.key === charArrayInDisplayWord[0].textContent) {\n      // && endFlag===\"0\") {\n      // 文字色を変更する。\n      charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n      bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n      charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、次の表示文字を作成する。\n\n      if (charArrayInDisplayWord.length === 0) createDisplayWord(), countUpScore();\n    } // メーターがメーター最大値以上になった場合、メーターを初期化する。\n\n\n    if (bonusCountMeter >= bonusCountMeterMax) {\n      //   playingTime = playingTime +3000;\n      bonusCountMeter = 0;\n    } // else if(endFlag===\"0\"){\n    //   bonusCountMeter =0;\n    // }\n    // 更新したメーターを表示する。\n\n\n    document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n  }\n});","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay.js"],"names":["window","addEventListener","wordList","displayWord","document","getElementById","charArrayInDisplayWord","createDisplayWord","textContent","randomIntegerInTotalWordList","Math","floor","random","length","split","map","value","spanValue","createElement","appendChild","remainPlayingTime","initialPlayingTimeMSec","startTime","Date","now","countDownTime","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","clearInterval","timerId","setInterval","displayScore","totalScore","textLength","addPointLevel1","addPointLevel2","countUpScore","addPoint","keyDownCharCountUp","imgArray","bonusCountMeter","bonusCountMeterMax","src","keyDownChar","key","className","shift"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  const wordList = [\n    \"aaa\",\n    \"bbb\",\n    \"ccc\",\n    \"ddd\",\n    \"eeeeee\",\n    \"ffffff\",\n    \"gggggg\",\n    \"hhhhhh\"\n  ];\n\n  // 表示する単語を定義する。\n  const displayWord = document.getElementById(\"displayWord\");\n  // 表示する単語を一文字ずつに分ける変数を定義する。\n  let charArrayInDisplayWord =[];\n\n  // 表示する単語を作成する。\n  createDisplayWord();\n\n// 表示する単語を作成する。\nfunction createDisplayWord(){\n  // 表示単語を初期化する。\n  displayWord.textContent = \"\";\n  // 0〜textListsの総数間で整数値をランダムで算出する。\n  let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n  // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n  // spanタグで閉じた単語を表示する。\n  charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].split(\"\").map(function(value){\n      // spanタグを作成する。\n      let spanValue = document.createElement(\"span\");\n      // spanタグに一文字を挿入する。\n      spanValue.textContent = value;\n      // 表示する単語にspanタグで閉じた一文字を追加する。\n      displayWord.appendChild(spanValue);\n      return spanValue;\n     });\n}\n\n  // 表示する残りのプレイ可能時間を定義する。\n  let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n  // 表示するスタート時のプレイ可能時間を定義する。\n  let initialPlayingTimeMSec = 6000;\n\n// const closePopup = document.getElementById(\"closePopup\");\n\n// let endFlag = \"0\";\n\n const startTime = Date.now();\n const countDownTime = function(){\n  const currentTime = Date.now();\n  const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n  const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n  const remainSec = Math.ceil(remainMSec/1000);\n  let  remainSecLabel = `残り${remainSec}秒`;\n  if (remainMSec <= 0){\n    clearInterval(timerId);\n    remainSecLabel = \"\";\n//  const totalScore = score - addPoint;\n//  point.textContent =\"\";\n//  point.className = \"transparent\";\n//  p.textContent =\"\";\n//  p.className =\"transparent\";\n\n//  endFlag = \"1\";\n\n//     closePopup.textContent =\"終了\";\n//     closePopup.className = \"closePopup\";\n//     setTimeout(function(){\n//       closePopup.textContent = `あなたの得点は${totalScore}点です!`;\n//       closePopup.className = \"endPopup\";\n//     },1000);\n  }\n  remainPlayingTime.textContent = remainSecLabel;\n}\n  // \n  // setTimeout(countDownTime,0);\n  \n  // 1秒ごとにcountDownを実施する。\n  const timerId = setInterval(countDownTime,1000);\n\n  // 表示するスコアを定義する。\n  let displayScore = document.getElementById(\"displayScore\");\n  // 合計スコアの初期値を定義する。\n  let totalScore = 0;\n  \n  const textLength = 4;\n  const addPointLevel1 = 1;\n  const addPointLevel2 = 3;\n  \n  // setTimeout(countUpScore,0);\n  \n  function countUpScore(){\n    displayScore.textContent = totalScore;\n      if (charArrayInDisplayWord.length < textLength){\n        addPoint = addPointLevel1;\n      } else{\n        addPoint = addPointLevel2;\n      }\n      totalScore = totalScore + addPoint;\n    return totalScore;\n  }\n\n  // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n  document.addEventListener(`keydown`, keyDownCharCountUp);\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10.png',\n    '/assets/メーターPNG/メーター20.png',\n    '/assets/メーターPNG/メーター30.png',\n    '/assets/メーターPNG/メーター40.png',\n    '/assets/メーターPNG/メーター50.png',\n    '/assets/メーターPNG/メーター60.png',\n    '/assets/メーターPNG/メーター70.png',\n    '/assets/メーターPNG/メーター80.png',\n    '/assets/メーターPNG/メーター90.png',\n    '/assets/メーターPNG/メーター100.png'\n  ]\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 10;\n  // メーターを表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n  // タイプした文字が表示文字と一致する場合の処理を定義する。\n  function keyDownCharCountUp(keyDownChar){\n    if(keyDownChar.key === charArrayInDisplayWord[0].textContent ){// && endFlag===\"0\") {\n      // 文字色を変更する。\n      charArrayInDisplayWord[0].className = \"add_red\";\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter +1;\n      // 一致した文字を配列から削除する。\n      charArrayInDisplayWord.shift();\n      // 表示文字全てタイプした場合、次の表示文字を作成する。\n      if(charArrayInDisplayWord.length === 0) createDisplayWord(), countUpScore();\n    }\n    // メーターがメーター最大値以上になった場合、メーターを初期化する。\n    if(bonusCountMeter >= bonusCountMeterMax){\n      //   playingTime = playingTime +3000;\n      bonusCountMeter = 0;\n    }\n      // else if(endFlag===\"0\"){\n      //   bonusCountMeter =0;\n      // }\n    // 更新したメーターを表示する。\n    document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  }\n\n})\n"]},"metadata":{},"sourceType":"module"}