{"ast":null,"code":"// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function () {\n  // Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n  document.addEventListener(\"keydown\", keyDownGameStart);\n}); // スペースかEnterキー押下によるゲームスタートを一回限りとするフラグを設定する。\n\nvar gameStartEnterOnlyOnce = \"0\"; // スペースかEnterキーを押下するとゲーム開始のカウントダウンがスタートする。\n\nfunction keyDownGameStart(keyDownEnter) {\n  if ((keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") && gameStartEnterOnlyOnce == \"0\") {\n    // 表示されている文字を非表示にする。\n    document.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n    document.getElementById(\"pressEnterPopup\").className = \"transparent\";\n    document.getElementById(\"annotationAudio\").className = \"transparent\";\n    document.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n    gameStartEnterOnlyOnce = \"1\";\n    gameStart();\n  }\n\n  ;\n}\n\n; // 選択した英単語難易度によって変わるwordListの定義\n\nvar wordList = gon.wordListAll; // 選択したプレイモードによって変わるplayModeの定義\n\nvar playMode = gon.playMode; // 出題順の設定によって変わるpronounceModeの定義\n\nvar questionOrderMode = gon.questionOrderMode; // 英単語の発音有無の設定によって変わるpronounceModeの定義\n\nvar pronounceMode = gon.pronounceMode; // BGMの設定によって変わるbgmModeの定義\n\nvar bgmMode = gon.bgmMode; // タイプ音の設定によって変わるtypeAudioModeの定義\n\nvar typeAudioMode = gon.typeAudioMode; // 正解音の設定によって変わるcorrectAudioModeの定義\n\nvar correctAudioMode = gon.correctAudioMode; // ミス音の設定によって変わるincorrectAudioModeの定義\n\nvar incorrectAudioMode = gon.incorrectAudioMode; // 英単語を順番に出題する場合の番号の初期値を定義する。\n\nvar sortById = 0;\n\nfunction gameStart() {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  // 表示するメーターリストを定義する。\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png']; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    // カウントダウン文字を１ずつ減らす。\n    countDownPopupNumber = countDownPopupNumber - 1; //カウントダウンが0になれば、ゲームを開始する。\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart); // カウントダウンポップアップのクラスを変更し、非表示にする。\n\n      countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className = \"displayWordJapanese\";\n    var displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n    displayWordAnnotation.className = \"transparent\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 「答えを見る」ボタン押下有無を判定するフラグを定義する。\n\n    var answerOpenFlag = \"0\"; // プレイモード：タイムアタックですべての出題範囲に解答済み判定フラグを設定する。\n\n    var gameCompleteTimeAttackFlag = \"0\"; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。--------------------------------------------------------------\n    // プレイモード：タイムアタックの場合は5分とする。\n\n    var initialPlayingTimeMSec = 300000; // プレイモード：タイムアタックの場合は30分とする。\n\n    if (playMode == \"タイムアタック\") {\n      initialPlayingTimeMSec = 1800000;\n    }\n\n    ; // プレイモード：タイムアタックの場合、ゲームクリア後に合計プレイ時間表示する。\n\n    var totalPlayingTimeMSec = 0; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 正解時に表示する丸を定義する。\n\n    document.getElementById(\"circleImg\").src = '/assets/正解○.png';\n    circleImg.classList.add('transparent'); // \"発音を聞く\"ボタンを表示する。\n\n    var pronounceAgainButton = document.getElementById(\"pronounceAgainButton\");\n    pronounceAgainButton.innerHTML = \"発音を聞く\";\n    pronounceAgainButton.className = \"pronounceAgainButton\";\n\n    pronounceAgainButton.onclick = function () {\n      pronounce(displayWordInList.eng_word);\n    }; // \"ヒントを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\n\n    var hintButton = document.getElementById(\"hintButton\");\n    hintButton.innerHTML = \"ヒントを見る\";\n\n    if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n      hintButton.className = \"hintButton\";\n\n      hintButton.onclick = function () {\n        charArrayInDisplayWord[0].classList.remove('transparent');\n      };\n    } else {\n      hintButton.className = \"hintButtonPractice\";\n    }\n\n    ; // \"答えを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\n    var answerButton = document.getElementById(\"answerButton\");\n    answerButton.innerHTML = \"答えを見る\";\n\n    if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n      answerButton.className = \"answerButton\";\n\n      answerButton.onclick = function () {\n        for (var i = 0; i < charArrayInDisplayWord.length; i++) {\n          charArrayInDisplayWord[i].classList.remove('transparent');\n        } // 連続正解数を0に戻す。\n\n\n        totalConsecutiveNumCorrectNum = 0;\n        displayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum; // メーターを初期値に戻す。\n\n        bonusCountMeter = 0;\n        document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 「答えを見る」判定フラグを更新する。\n\n        answerOpenFlag = \"1\";\n      };\n    } else {\n      // (プレイモード練習の時)\n      answerButton.className = \"answerButtonPractice\";\n    }\n\n    ; // \"最初からやり直す\"ボタンを表示する。\n\n    var restartButtonMidGame = document.getElementById(\"restartButtonMidGame\");\n    restartButtonMidGame.classList.remove('transparent'); // \"コース選択画面に戻る\"ボタンを表示する。\n\n    var courseSettingBackButtonMidGame = document.getElementById(\"courseSettingBackButtonMidGame\");\n    courseSettingBackButtonMidGame.classList.remove('transparent'); // 以下、スコア定義---------------------------------------------------------------------------------------------------\n    // -----------------------------------------------------------------------------------------------------------------\n    // プレイモード：練習・普通の場合はスコアを表示させる。\n    // プレイモード：タイムアタックはスコアを表示させない。\n\n    if (playMode == \"練習\" || playMode == \"普通\") {\n      // 表示するスコアを定義する。\n      var _displayScoreEntire = document.getElementById(\"displayScoreEntire\");\n\n      _displayScoreEntire.className = \"displayScoreEntire\";\n\n      var _displayScore = document.getElementById(\"displayScore\");\n\n      _displayScore.className = \"displayScore\";\n\n      var _displayP = document.getElementById(\"displayP\");\n\n      _displayP.className = \"displayP\";\n    }\n\n    ; // プレモード：練習・普通の場合のみ使用する。----------------------------\n    // ---------------------------------------------------------------\n    // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 500;\n    var addScoreLevel2 = 500; // ---------------------------------------------------------------\n    // ---------------------------------------------------------------\n    // 表示する正解数全体のクラス\n\n    var NumCorrectMidGamePlay = document.getElementById(\"NumCorrectMidGamePlay\");\n    NumCorrectMidGamePlay.className = \"NumCorrectMidGamePlay\"; // 表示する正解数を定義する。\n\n    var displayNumCorrectWord = document.getElementById(\"displayNumCorrectWord\");\n    displayNumCorrectWord.className = \"displayNumCorrectWord\";\n    displayNumCorrectWord.textContent = \"合計正解数\";\n    var displayNumCorrectNum = document.getElementById(\"displayNumCorrectNum\");\n    displayNumCorrectNum.className = \"displayNumCorrectNum\";\n    var totalNumCorrectNum = 0;\n    displayNumCorrectNum.textContent = totalNumCorrectNum; // 表示する連続正解数を定義する。\n\n    var displayConsecutiveNumCorrectWord = document.getElementById(\"displayConsecutiveNumCorrectWord\");\n    displayConsecutiveNumCorrectWord.className = \"displayConsecutiveNumCorrectWord\";\n    displayConsecutiveNumCorrectWord.textContent = \"連続正解数\";\n    var displayConsecutiveNumCorrectNum = document.getElementById(\"displayConsecutiveNumCorrectNum\");\n    displayConsecutiveNumCorrectNum.className = \"displayConsecutiveNumCorrectNum\";\n    var totalConsecutiveNumCorrectNum = 0;\n    displayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum; // 表示する最高連続正解数を定義する。\n\n    var displayMaxConsecutiveNumCorrectWord = document.getElementById(\"displayMaxConsecutiveNumCorrectWord\");\n    displayMaxConsecutiveNumCorrectWord.className = \"displayMaxConsecutiveNumCorrectWord\";\n    displayMaxConsecutiveNumCorrectWord.textContent = \"最高連続正解数\";\n    var displayMaxConsecutiveNumCorrectNum = document.getElementById(\"displayMaxConsecutiveNumCorrectNum\");\n    displayMaxConsecutiveNumCorrectNum.className = \"displayMaxConsecutiveNumCorrectNum\";\n    var totalMaxConsecutiveNumCorrectNum = 0;\n    displayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum; // 以上、スコア定義---------------------------------------------------------------------------------------------------\n    // -----------------------------------------------------------------------------------------------------------------\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n      // ギリギリで問題に正解した場合、○を表示した後、500m秒後にワードを生成する処理が走るため。\n      if (playEndFlag === \"0\") {\n        // 表示単語を初期化する。\n        displayWord.textContent = \"\"; // 出題順の設定により、displayWordInListを変更\n\n        if (questionOrderMode == \"番号順\") {\n          // 英単語を順番に出題する場合の番号の初期値を定義する。\n          displayWordInList = wordList[sortById];\n          sortById++; // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\n          if (sortById >= wordList.length) {\n            sortById = 0; // プレイモード：タイムアタックの場合、次の問題に正解した時点でゲーム終了とする。\n\n            if (playMode == \"タイムアタック\") {\n              // フラグを1に更新する。\n              gameCompleteTimeAttackFlag = \"1\";\n            }\n\n            ;\n          }\n\n          ;\n        } else {\n          // 出題順がランダムの場合\n          // 0〜textListsの総数間で整数値をランダムで算出する。\n          var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // let randomIntegerInTotalWordList = Math.floor(Math.random() * 3);\n          // 表示する単語をランダムで選定する。\n\n          displayWordInList = wordList[randomIntegerInTotalWordList]; // プレイモード：タイムアタックの場合は、wordListから表示単語を削除する。\n\n          if (playMode == \"タイムアタック\") {\n            // 同じ問題を２度出題しないように、一度出題した問題はwordListから削除する。\n            wordList.splice(randomIntegerInTotalWordList, 1); // wordList.length == 0になった場合、次の問題に正解した時点でゲーム終了とする。\n\n            if (wordList.length == 0) {\n              // フラグを1に更新する。\n              gameCompleteTimeAttackFlag = \"1\";\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ; //表示する単語の発音させる。（発音ありの場合のみ）\n\n        if (pronounceMode == \"発音あり\") {\n          pronounce(displayWordInList.eng_word);\n        }\n\n        ; // 表示する単語の日本語訳を表示させる。\n\n        displayWordJapanese.textContent = displayWordInList.jap_trans_1; // 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n        // プレイモード練習では答えを表示しているため処理不要\n\n        if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n          // 前の問題に注釈がある場合消す。\n          displayWordAnnotation.className = \"transparent\"; // ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\n          var duplicateWords = wordList.filter(function (duplicateWord) {\n            return duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1;\n          }); // 日本語訳が重複している他の英単語がある場合\n\n          if (duplicateWords.length > 1) {\n            // 重複している英単語の配列（この時点では答えを含む）を定義する。\n            var duplicateWordsList = [];\n\n            for (var i = 0; i < duplicateWords.length; i++) {\n              // 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n              if (duplicateWords[i].id !== displayWordInList.id) {\n                duplicateWordsList.push(duplicateWords[i].eng_word);\n              }\n\n              ;\n            }\n\n            ;\n            displayWordAnnotation.textContent = \"\\u203B\".concat(duplicateWordsList, \"\\u4EE5\\u5916\");\n            displayWordAnnotation.className = \"displayWordAnnotation\";\n            console.log(displayWordAnnotation.textContent);\n          }\n\n          ;\n        }\n\n        ; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n        // spanタグで閉じた単語を表示する。\n\n        charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function (value) {\n          // spanタグを作成する。\n          var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n          spanValue.textContent = value; // 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、タイムアタックのときのみ）\n\n          if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n            spanValue.className = \"transparent\";\n          }\n\n          ; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n          displayWord.appendChild(spanValue);\n          return spanValue;\n        });\n      }\n\n      ;\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainAllSec = Math.ceil(remainMSec / 1000);\n      var remainMin = Math.floor(remainAllSec / 60);\n      var remainSec = Math.ceil(remainAllSec % 60);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"0\".concat(remainMin), \"\\u5206\", \"0\".concat(remainSec).slice(-2), \"\\u79D2\"); // 残り時間が0になった場合の処理を定義する。\n\n      if (remainMSec <= 0) {\n        gameClose();\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel; // プレイモード：タイムアタックの場合は、使用時間を最後に表示する。\n\n      if (playMode == \"タイムアタック\") {\n        totalPlayingTimeMSec = diffBetweenCurrentTimeAndStartTime;\n      }\n\n      ;\n    }\n\n    ; // 以下、ゲーム終了時の処理を定義する。------------------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function gameClose() {\n      // ゲーム終了後にplayEndFlagを1に更新する。\n      playEndFlag = \"1\"; // プレイ時間のカウントダウンを止める。\n\n      clearInterval(timerId); // 残り時間の表示を消す。\n\n      remainPlayingTime.className = \"transparent\"; // 現在のスコア（左上）の表示を消す。\n      // プレイモード：練習・普通の場合のみ\n\n      if (playMode == \"練習\" || playMode == \"普通\") {\n        displayScoreEntire.className = \"transparent\";\n        displayScore.className = \"transparent\";\n        displayP.className = \"transparent\";\n      }\n\n      ; //正解数全体のクラスを非表示にする。\n\n      NumCorrectMidGamePlay.className = \"transparent\"; // 正解数の表示を消す。\n\n      displayNumCorrectWord.className = \"transparent\";\n      displayNumCorrectNum.className = \"transparent\"; // 連続正解数の表示を消す。\n\n      displayConsecutiveNumCorrectWord.className = \"transparent\";\n      displayConsecutiveNumCorrectNum.className = \"transparent\"; // 最高連続正解数の表示を消す。\n\n      displayMaxConsecutiveNumCorrectWord.className = \"transparent\";\n      displayMaxConsecutiveNumCorrectNum.className = \"transparent\"; // 問題の英単語の表示を消す。\n\n      displayWord.textContent = \"\"; // 解答の日本語の表示を消す。\n\n      displayWordJapanese.textContent = \"\"; // \"発音を聞く\"ボタンを消す。\n\n      pronounceAgainButton.className = \"transparent\"; // \"ヒントを見る\"ボタンを消す。\n\n      hintButton.className = \"transparent\"; // \"答えを見る\"ボタンを消す。\n\n      answerButton.className = \"transparent\"; // 注釈を消す。（プレイモード普通、タイムアタックの時のみ）\n\n      if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n        displayWordAnnotation.className = \"transparent\";\n      }\n\n      ; // \"最初からやり直す\"ボタンを消す。\n\n      restartButtonMidGame.className = \"transparent\"; // \"コース選択画面に戻る\"ボタンを消す。\n\n      courseSettingBackButtonMidGame.className = \"transparent\"; // 正解時に表示される○の画像を消す。\n\n      circleImg.className = \"transparent\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n      // ゲーム終了を知らせるポップアップを定義する。\n\n      var closePopup = document.getElementById(\"closePopup\");\n      closePopup.textContent = \"終了\";\n      closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n      var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n      var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n      setTimeout(function () {\n        // 得点の表示\n        // プレイモード：練習・普通の場合は、スコアを表示する。\n        if (playMode == \"練習\" || playMode == \"普通\") {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n        } else {\n          // プレイモード：タイムアタックの場合は、かかった時間を表示する。\n          // ただし、すべての出題範囲に解答できた場合のみ。\n          if (gameCompleteTimeAttackFlag == \"1\") {\n            var remainAllSecTimeAttack = Math.ceil(totalPlayingTimeMSec / 1000);\n            var remainMinTimeAttack = Math.floor(remainAllSecTimeAttack / 60);\n            var remainSecTimeAttack = Math.ceil(remainAllSecTimeAttack % 60);\n            closePopup.textContent = \"\\u3042\\u306A\\u305F\\u304C\\u304B\\u304B\\u3063\\u305F\\u6642\\u9593\\u306F\".concat(\"0\".concat(remainMinTimeAttack).slice(-2), \"\\u5206\").concat(\"0\".concat(remainSecTimeAttack).slice(-2), \"\\u79D2\\u3067\\u3059!\");\n            closePopup.className = \"endResultPopup\";\n          } else {\n            // 時間切れの場合は、クリアできなかったと表示する。\n            closePopup.textContent = \"\\u6B8B\\u5FF5\\u306A\\u304C\\u3089\\u30AF\\u30EA\\u30A2\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\";\n            closePopup.className = \"endResultPopup\";\n          }\n        }\n\n        ; // もう一度ボタンの表示（transparentを消して表示させる）\n\n        restartBtn.classList.remove('transparent'); // 戻るボタンの表示（transparentを消して表示させる）\n\n        backBtn.classList.remove('transparent');\n      }, 2000);\n    }\n\n    ; // 以上、ゲーム終了時の処理を定義する。------------------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      } // 合計得点を定義する。\n\n\n      totalScore = totalScore + addPoint;\n      displayScore.setAttribute('data-num', totalScore);\n      var countElm = $('.displayScore'),\n          countSpeed = 10;\n      countElm.each(function () {\n        var self = $(this),\n            // 合計得点を定義する。\n        countMax = self.attr('data-num'),\n            thisCount = self.text(),\n            countTimer;\n        countUpAnime(); // 数値をカウントアップするアニメーションを定義する。\n\n        function countUpAnime() {\n          countTimer = setInterval(function () {\n            var countNext = thisCount++;\n            self.text(countNext);\n\n            if (countNext == countMax) {\n              clearInterval(countTimer);\n            }\n          }, countSpeed);\n        }\n\n        ;\n      });\n    } // 正解数をカウントアップする処理を定義する。\n\n\n    function countUpCorrectNum() {\n      // 合計正解数のカウントアップ\n      totalNumCorrectNum = totalNumCorrectNum + 1;\n      displayNumCorrectNum.textContent = totalNumCorrectNum; // 連続正解数のカウントアップ\n\n      totalConsecutiveNumCorrectNum = totalConsecutiveNumCorrectNum + 1;\n      displayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum; // 最高連続正解数のカウントアップ\n\n      if (totalMaxConsecutiveNumCorrectNum < totalConsecutiveNumCorrectNum) {\n        totalMaxConsecutiveNumCorrectNum = totalMaxConsecutiveNumCorrectNum + 1;\n        displayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n      }\n\n      ;\n    }\n\n    ; // ゲーム中にタイプした文字が表示文字と一致する場合、不一致の場合の処理を定義する。\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        correctTyping();\n      } else if (keyDownChar.key === \"e\" && charArrayInDisplayWord[0].textContent === \"é\" && playEndFlag === \"0\") {\n        // éの場合は例外的にeでOKとする。\n        correctTyping();\n      } else if (playEndFlag === \"0\") {\n        // タイプミス音を発生させる。\n        typeMissAudio();\n      } else {}\n\n      ;\n    }\n\n    ; // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n    function correctTyping() {\n      // タイプ音を定義する。\n      // タイプ音ありの場合のみ\n      if (typeAudioMode == \"タイプ音あり\") {\n        var _typeAudioMode = new Audio('/assets/typeAudio.mp3'); // タイプ音を発生させる。\n\n\n        _typeAudioMode.volume = 0.3;\n\n        _typeAudioMode.play();\n      }\n\n      ; // 文字色を変更する。\n\n      charArrayInDisplayWord[0].className = \"add_red\"; // 一致した文字を配列から削除する。\n\n      charArrayInDisplayWord.shift(); // メーターを更新する。\n\n      bonusCountMeter = bonusCountMeter + 1; // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWord.length === 0) {\n        // 正解音を定義する。\n        // 正解音ありの場合のみ\n        if (correctAudioMode == \"正解音あり\") {\n          var correctAudio = new Audio('/assets/correctAudio.mp3'); // 正解した場合、効果音を発生させる。\n\n          correctAudio.volume = 0.3;\n          correctAudio.play();\n        }\n\n        ; // 「答えを見る」を押していなければ、スコアと正解数をカウントアップする。\n\n        if (answerOpenFlag == \"0\") {\n          // プレイモード：練習・普通の場合のみ、スコアアップする。\n          if (playMode == \"練習\" || playMode == \"普通\") {\n            countUpScore();\n          }\n\n          ;\n          countUpCorrectNum();\n        } else {\n          // 「答えを見る」を押していれば、フラグを0に戻す。\n          answerOpenFlag = \"0\";\n        }\n\n        ;\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n        setTimeout(createDisplayWord, 500);\n        setTimeout(function () {\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n        }, 500);\n\n        if (playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") {\n          gameClose();\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; // タイプした文字が表示文字と不一致の場合の処理を定義する。\n\n    function typeMissAudio() {\n      // ミス音を定義する。\n      // ミス音ありの場合のみ\n      if (incorrectAudioMode == \"ミス音あり\") {\n        var incorrectAudio = new Audio('/assets/incorrectAudio.mp3'); // ミス音の場合、効果音を発生させる。\n\n        incorrectAudio.volume = 0.3;\n        incorrectAudio.play();\n      }\n\n      ;\n    }\n\n    ; // 英単語を生成した際に、発音させる処理を定義する。\n\n    function pronounce(eng_word) {\n      // résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n      if (eng_word == \"résumé\") {\n        eng_word = \"rezumei\";\n      }\n\n      ;\n      var pronunciation = new Audio('/assets/発音/' + eng_word + '.mp3');\n      pronunciation.play();\n    }\n\n    ;\n  }\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_eng.js"],"names":["window","addEventListener","document","keyDownGameStart","gameStartEnterOnlyOnce","keyDownEnter","key","getElementById","className","gameStart","wordList","gon","wordListAll","playMode","questionOrderMode","pronounceMode","bgmMode","typeAudioMode","correctAudioMode","incorrectAudioMode","sortById","imgArray","bonusCountMeter","bonusCountMeterMax","displayBonusAddPlayTime","bonusAddPlayTime","src","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","typingPlayStart","displayWord","displayWordJapanese","displayWordAnnotation","charArrayInDisplayWord","playEndFlag","answerOpenFlag","gameCompleteTimeAttackFlag","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","totalPlayingTimeMSec","setTimeout","countDownTime","timerId","circleImg","classList","add","pronounceAgainButton","innerHTML","onclick","pronounce","displayWordInList","eng_word","hintButton","remove","answerButton","i","length","totalConsecutiveNumCorrectNum","displayConsecutiveNumCorrectNum","restartButtonMidGame","courseSettingBackButtonMidGame","displayScoreEntire","displayScore","displayP","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","NumCorrectMidGamePlay","displayNumCorrectWord","displayNumCorrectNum","totalNumCorrectNum","displayConsecutiveNumCorrectWord","displayMaxConsecutiveNumCorrectWord","displayMaxConsecutiveNumCorrectNum","totalMaxConsecutiveNumCorrectNum","keyDownCharCountUp","randomIntegerInTotalWordList","Math","floor","random","splice","jap_trans_1","duplicateWords","filter","duplicateWord","duplicateWordsList","id","push","console","log","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainAllSec","ceil","remainMin","remainSec","remainSecLabel","slice","gameClose","closePopup","backBtn","restartBtn","toLocaleString","remainAllSecTimeAttack","remainMinTimeAttack","remainSecTimeAttack","countUpScore","addPoint","setAttribute","countElm","$","countSpeed","each","self","countMax","attr","thisCount","text","countTimer","countUpAnime","countNext","countUpCorrectNum","keyDownChar","correctTyping","typeMissAudio","Audio","volume","play","shift","correctAudio","incorrectAudio","pronunciation"],"mappings":"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","sourcesContent":["// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function(){\n\t// Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n\tdocument.addEventListener(`keydown`, keyDownGameStart);\n});\n\n// スペースかEnterキー押下によるゲームスタートを一回限りとするフラグを設定する。\n\tlet gameStartEnterOnlyOnce = \"0\";\n\n// スペースかEnterキーを押下するとゲーム開始のカウントダウンがスタートする。\nfunction keyDownGameStart(keyDownEnter){\n\tif ((keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") && gameStartEnterOnlyOnce == \"0\") {\n\t\t// 表示されている文字を非表示にする。\n\t\tdocument.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"pressEnterPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"annotationAudio\").className = \"transparent\";\n\t\tdocument.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n\t\tgameStartEnterOnlyOnce = \"1\";\n\t\tgameStart();\n\t};\n};\n\t// 選択した英単語難易度によって変わるwordListの定義\n\tconst wordList = gon.wordListAll;\n\n\t// 選択したプレイモードによって変わるplayModeの定義\n\tconst playMode = gon.playMode;\n\n\t// 出題順の設定によって変わるpronounceModeの定義\n\tconst questionOrderMode = gon.questionOrderMode;\n\n\t// 英単語の発音有無の設定によって変わるpronounceModeの定義\n\tconst pronounceMode = gon.pronounceMode;\n\n\t// BGMの設定によって変わるbgmModeの定義\n\tconst bgmMode = gon.bgmMode;\n\n\t// タイプ音の設定によって変わるtypeAudioModeの定義\n\tconst typeAudioMode = gon.typeAudioMode;\n\n\t// 正解音の設定によって変わるcorrectAudioModeの定義\n\tconst correctAudioMode = gon.correctAudioMode;\n\n\t// ミス音の設定によって変わるincorrectAudioModeの定義\n\tconst incorrectAudioMode = gon.incorrectAudioMode;\n\n\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\tlet sortById = 0;\n\n\nfunction gameStart(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n\n\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n\t\t// カウントダウン文字を１ずつ減らす。\n\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\tif (countDownPopupNumber <= 0){\n\t\tclearInterval(timerIdToStart);\n\t\t// カウントダウンポップアップのクラスを変更し、非表示にする。\n\t\tcountDownPopup.className = \"countDownPopupAfterClose\";\n\t\ttypingPlayStart();\n\t\t} else {\n\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t}\n  }\n\n\t// ゲームを開始する処理を定義する。\n\tfunction typingPlayStart(){\n\n\t\t// 表示する単語を定義する。\n\t\tconst displayWord = document.getElementById(\"displayWord\");\n\t\tdisplayWord.className =  \"displayWord\";\n\t\tconst displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n\t\tdisplayWordJapanese.className =  \"displayWordJapanese\";\n\t\tconst displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n\t\tdisplayWordAnnotation.className =  \"transparent\";\n\t\t// 表示する単語を一文字ずつに分ける変数を定義する。\n\t\tlet charArrayInDisplayWord =[];\n\n\t\t// ゲーム終了を判定するフラグを定義する。\n\t\tlet playEndFlag = \"0\";\n\n\t\t// 「答えを見る」ボタン押下有無を判定するフラグを定義する。\n\t\tlet answerOpenFlag = \"0\";\n\n\t\t// プレイモード：タイムアタックですべての出題範囲に解答済み判定フラグを設定する。\n\t\tlet gameCompleteTimeAttackFlag = \"0\";\n\n\n\t\t// 表示する単語を作成する。\n\t\tcreateDisplayWord();\n\n\t\t// プレイ開始時間を取得する。\n\t\tconst startTime = Date.now();\n\t\t// 表示する残りのプレイ可能時間を定義する。\n\t\tlet remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n\t\tremainPlayingTime.className =  \"remainPlayingTime\";\n\t\t// 表示するスタート時のプレイ可能時間を定義する。--------------------------------------------------------------\n\t\t// プレイモード：タイムアタックの場合は5分とする。\n\t\tlet initialPlayingTimeMSec = 300000;\n\n\t\t// プレイモード：タイムアタックの場合は30分とする。\n\t\tif ( playMode == \"タイムアタック\") {\n\t\t\tinitialPlayingTimeMSec = 1800000;\n\t\t};\n\t\t// プレイモード：タイムアタックの場合、ゲームクリア後に合計プレイ時間表示する。\n\t\tlet totalPlayingTimeMSec = 0;\n\n\t\t// スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\t\tsetTimeout(countDownTime,0);\n\t\t// 1秒ごとにcountDownTimeを実施するように定義する。\n\t\tconst timerId = setInterval(countDownTime,1000);\n\n\t\t// 正解時に表示する丸を定義する。\n\t\tdocument.getElementById(\"circleImg\").src= '/assets/正解○.png';\n\t\tcircleImg.classList.add('transparent');\n\n\n\t\t// \"発音を聞く\"ボタンを表示する。\n\t\tlet pronounceAgainButton = document.getElementById(\"pronounceAgainButton\");\n\t\tpronounceAgainButton.innerHTML = \"発音を聞く\";\n\t\tpronounceAgainButton.className = \"pronounceAgainButton\";\n\t\tpronounceAgainButton.onclick = function() {\n\t\t\tpronounce(displayWordInList.eng_word);\n\t\t};\n\t\t// \"ヒントを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\t\tlet hintButton = document.getElementById(\"hintButton\");\n\t\thintButton.innerHTML = \"ヒントを見る\";\n\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\" ) {\n\t\t\thintButton.className = \"hintButton\";\n\t\t\thintButton.onclick = function() {\n\t\t\t\tcharArrayInDisplayWord[0].classList.remove('transparent');\n\t\t\t};\n\t\t} else {\n\t\t\thintButton.className = \"hintButtonPractice\";\n\t\t};\n\t\t// \"答えを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\t\tlet answerButton = document.getElementById(\"answerButton\");\n\t\tanswerButton.innerHTML = \"答えを見る\";\n\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\" ) {\n\t\t\tanswerButton.className = \"answerButton\";\n\t\t\tanswerButton.onclick = function() {\n\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t}\n\t\t\t\t// 連続正解数を0に戻す。\n\t\t\t\ttotalConsecutiveNumCorrectNum = 0;\n\t\t\t\tdisplayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t\t// メーターを初期値に戻す。\n\t\t\t\tbonusCountMeter = 0;\n\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\t\t\t\t// 「答えを見る」判定フラグを更新する。\n\t\t\t\tanswerOpenFlag = \"1\";\n\n\t\t\t};\n\t\t} else { // (プレイモード練習の時)\n\t\t\tanswerButton.className = \"answerButtonPractice\";\n\t\t};\n\n\t\t// \"最初からやり直す\"ボタンを表示する。\n\t\t\tconst restartButtonMidGame = document.getElementById(\"restartButtonMidGame\");\n\t\t\trestartButtonMidGame.classList.remove('transparent');\n\t\t// \"コース選択画面に戻る\"ボタンを表示する。\n\t\t\tconst courseSettingBackButtonMidGame = document.getElementById(\"courseSettingBackButtonMidGame\");\n\t\t\tcourseSettingBackButtonMidGame.classList.remove('transparent');\n\n\n\t// 以下、スコア定義---------------------------------------------------------------------------------------------------\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\t// プレイモード：練習・普通の場合はスコアを表示させる。\n\t// プレイモード：タイムアタックはスコアを表示させない。\n\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t// 表示するスコアを定義する。\n\t\tlet displayScoreEntire = document.getElementById(\"displayScoreEntire\");\n\t\tdisplayScoreEntire.className =  \"displayScoreEntire\";\n\t\tlet displayScore = document.getElementById(\"displayScore\");\n\t\tdisplayScore.className =  \"displayScore\";\n\t\tlet displayP = document.getElementById(\"displayP\");\n\t\tdisplayP.className =  \"displayP\";\n\t\t};\n\n\t// プレモード：練習・普通の場合のみ使用する。----------------------------\n\t// ---------------------------------------------------------------\n\t\t// 合計スコアの初期値を定義する。\n\t\tlet totalScore = 0;\n\t\t// スコアアップする基準を定義する。\n\t\tconst refTextLengthForCountUpLevel1 = 4;\n\t\tconst addScoreLevel1 = 500;\n\t\tconst addScoreLevel2 = 500;\n\t// ---------------------------------------------------------------\n\t// ---------------------------------------------------------------\n\n\t\t// 表示する正解数全体のクラス\n\t\tlet NumCorrectMidGamePlay = document.getElementById(\"NumCorrectMidGamePlay\");\n\t\tNumCorrectMidGamePlay.className =  \"NumCorrectMidGamePlay\";\n\n\t\t// 表示する正解数を定義する。\n\t\tlet displayNumCorrectWord = document.getElementById(\"displayNumCorrectWord\");\n\t\tdisplayNumCorrectWord.className =  \"displayNumCorrectWord\";\n\t\tdisplayNumCorrectWord.textContent = \"合計正解数\";\n\t\tlet displayNumCorrectNum = document.getElementById(\"displayNumCorrectNum\");\n\t\tdisplayNumCorrectNum.className =  \"displayNumCorrectNum\";\n\t\tlet totalNumCorrectNum = 0;\n\t\tdisplayNumCorrectNum.textContent = totalNumCorrectNum;\n\n\t\t// 表示する連続正解数を定義する。\n\t\tlet displayConsecutiveNumCorrectWord = document.getElementById(\"displayConsecutiveNumCorrectWord\");\n\t\tdisplayConsecutiveNumCorrectWord.className =  \"displayConsecutiveNumCorrectWord\";\n\t\tdisplayConsecutiveNumCorrectWord.textContent = \"連続正解数\";\n\t\tlet displayConsecutiveNumCorrectNum = document.getElementById(\"displayConsecutiveNumCorrectNum\");\n\t\tdisplayConsecutiveNumCorrectNum.className =  \"displayConsecutiveNumCorrectNum\";\n\t\tlet totalConsecutiveNumCorrectNum = 0;\n\t\tdisplayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t// 表示する最高連続正解数を定義する。\n\t\tlet displayMaxConsecutiveNumCorrectWord = document.getElementById(\"displayMaxConsecutiveNumCorrectWord\");\n\t\tdisplayMaxConsecutiveNumCorrectWord.className =  \"displayMaxConsecutiveNumCorrectWord\";\n\t\tdisplayMaxConsecutiveNumCorrectWord.textContent = \"最高連続正解数\";\n\t\tlet displayMaxConsecutiveNumCorrectNum = document.getElementById(\"displayMaxConsecutiveNumCorrectNum\");\n\t\tdisplayMaxConsecutiveNumCorrectNum.className =  \"displayMaxConsecutiveNumCorrectNum\";\n\t\tlet totalMaxConsecutiveNumCorrectNum = 0;\n\t\tdisplayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n\n\t// 以上、スコア定義---------------------------------------------------------------------------------------------------\n\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\n\n\t\t// タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\t\tdocument.addEventListener(`keydown`, keyDownCharCountUp);\n\n\t\t// 表示する単語を作成する処理を定義する。\n\t\tfunction createDisplayWord(){\n\t\t\t// すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n\t\t\t// ギリギリで問題に正解した場合、○を表示した後、500m秒後にワードを生成する処理が走るため。\n\t\t\tif(playEndFlag === \"0\"){\n\t\t\t\t// 表示単語を初期化する。\n\t\t\t\tdisplayWord.textContent = \"\";\n\n\t\t\t\t// 出題順の設定により、displayWordInListを変更\n\t\t\t\tif (questionOrderMode == \"番号順\") {\n\t\t\t\t\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\t\t\t\t\tdisplayWordInList = wordList[sortById];\n\t\t\t\t\tsortById++;\n\t\t\t\t\t// sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\t\t\t\t\tif (sortById >= wordList.length) {\n\t\t\t\t\t\tsortById = 0;\n\t\t\t\t\t\t// プレイモード：タイムアタックの場合、次の問題に正解した時点でゲーム終了とする。\n\t\t\t\t\t\tif ( playMode == \"タイムアタック\" ) {\n\t\t\t\t\t\t\t// フラグを1に更新する。\n\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"1\";\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t} else { // 出題順がランダムの場合\n\t\t\t\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\t\t\t\tlet randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\t\t\t\t\t// let randomIntegerInTotalWordList = Math.floor(Math.random() * 3);\n\t\t\t\t\t// 表示する単語をランダムで選定する。\n\t\t\t\t\tdisplayWordInList = wordList[randomIntegerInTotalWordList];\n\n\t\t\t\t\t// プレイモード：タイムアタックの場合は、wordListから表示単語を削除する。\n\t\t\t\t\tif ( playMode == \"タイムアタック\" ) {\n\t\t\t\t\t\t// 同じ問題を２度出題しないように、一度出題した問題はwordListから削除する。\n\t\t\t\t\t\twordList.splice( randomIntegerInTotalWordList, 1);\n\t\t\t\t\t\t// wordList.length == 0になった場合、次の問題に正解した時点でゲーム終了とする。\n\t\t\t\t\t\tif (wordList.length == 0){\n\t\t\t\t\t\t\t// フラグを1に更新する。\n\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"1\";\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t//表示する単語の発音させる。（発音ありの場合のみ）\n\t\t\t\tif (pronounceMode == \"発音あり\") {\n\t\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t};\n\n\t\t\t\t// 表示する単語の日本語訳を表示させる。\n\t\t\t\tdisplayWordJapanese.textContent = displayWordInList.jap_trans_1;\n\n\t\t\t\t// 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n\t\t\t\t// プレイモード練習では答えを表示しているため処理不要\n\t\t\t\tif ( playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t// 前の問題に注釈がある場合消す。\n\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t// ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\t\t\t\t\tlet duplicateWords = wordList.filter(duplicateWord => duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1);\n\t\t\t\t\t// 日本語訳が重複している他の英単語がある場合\n\t\t\t\t\tif (duplicateWords.length > 1) {\n\t\t\t\t\t\t// 重複している英単語の配列（この時点では答えを含む）を定義する。\n\t\t\t\t\t\tlet duplicateWordsList = [];\n\t\t\t\t\t\tfor (let i = 0; i < duplicateWords.length; i++) {\n\t\t\t\t\t\t\t// 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n\t\t\t\t\t\t\tif (duplicateWords[i].id !== displayWordInList.id){\n\t\t\t\t\t\t\t\tduplicateWordsList.push(duplicateWords[i].eng_word);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdisplayWordAnnotation.textContent = `※${duplicateWordsList}以外`;\n\t\t\t\t\t\tdisplayWordAnnotation.className = \"displayWordAnnotation\";\n\t\t\t\t\t\tconsole.log(displayWordAnnotation.textContent);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t\t\t// spanタグで閉じた単語を表示する。\n\t\t\t\tcharArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n\t\t\t\t\t// spanタグを作成する。\n\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t// spanタグに一文字を挿入する。\n\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t// 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、タイムアタックのときのみ）\n\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\tspanValue.className = \"transparent\";\n\t\t\t\t\t};\n\t\t\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\t\t\treturn spanValue;\n\t\t\t\t});\n\t\t\t};\n\t\t}\n\n\t\t// プレイ時間をカウントダウンする処理を定義する。\n\t\tfunction countDownTime(){\n\t\t\tconst currentTime = Date.now();\n\t\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\t\tconst remainAllSec = Math.ceil(remainMSec/1000);\n\t\t\tconst remainMin = Math.floor(remainAllSec / 60);\n\t\t\tconst remainSec = Math.ceil(remainAllSec % 60);\n\t\t\tlet  remainSecLabel = `残り${(`0${remainMin}` )}分${(`0${remainSec}` ).slice( -2 )}秒`;\n\n\t\t\t// 残り時間が0になった場合の処理を定義する。\n\t\t\tif (remainMSec <= 0){\n\t\t\t\tgameClose();\n\t\t\t}\n\t\t\t// 残りプレイ可能時間を更新する。\n\t\t\tremainPlayingTime.textContent = remainSecLabel;\n\t\t\t// プレイモード：タイムアタックの場合は、使用時間を最後に表示する。\n\t\t\tif (playMode == \"タイムアタック\"){\n\t\t\t\ttotalPlayingTimeMSec = diffBetweenCurrentTimeAndStartTime;\n\t\t\t};\n\t\t};\n\n\t// 以下、ゲーム終了時の処理を定義する。------------------------------------------------------\n\t// ------------------------------------------------------------------------------------\n\t\tfunction gameClose(){\n\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\tplayEndFlag = \"1\";\n\t\t\t// プレイ時間のカウントダウンを止める。\n\t\t\tclearInterval(timerId);\n\t\t\t// 残り時間の表示を消す。\n\t\t\tremainPlayingTime.className = \"transparent\";\n\t\t\t// 現在のスコア（左上）の表示を消す。\n\t\t\t// プレイモード：練習・普通の場合のみ\n\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\tdisplayScoreEntire.className = \"transparent\";\n\t\t\tdisplayScore.className = \"transparent\";\n\t\t\tdisplayP.className = \"transparent\";\n\t\t\t};\n\n\t\t\t//正解数全体のクラスを非表示にする。\n\t\t\tNumCorrectMidGamePlay.className = \"transparent\";\n\t\t\t// 正解数の表示を消す。\n\t\t\tdisplayNumCorrectWord.className = \"transparent\";\n\t\t\tdisplayNumCorrectNum.className = \"transparent\";\n\t\t\t// 連続正解数の表示を消す。\n\t\t\tdisplayConsecutiveNumCorrectWord.className = \"transparent\";\n\t\t\tdisplayConsecutiveNumCorrectNum.className = \"transparent\";\n\t\t\t// 最高連続正解数の表示を消す。\n\t\t\tdisplayMaxConsecutiveNumCorrectWord.className = \"transparent\";\n\t\t\tdisplayMaxConsecutiveNumCorrectNum.className = \"transparent\";\n\t\t\t// 問題の英単語の表示を消す。\n\t\t\tdisplayWord.textContent =\"\";\n\t\t\t// 解答の日本語の表示を消す。\n\t\t\tdisplayWordJapanese.textContent =\"\";\n\t\t\t// \"発音を聞く\"ボタンを消す。\n\t\t\tpronounceAgainButton.className = \"transparent\";\n\t\t\t// \"ヒントを見る\"ボタンを消す。\n\t\t\thintButton.className = \"transparent\";\n\t\t\t// \"答えを見る\"ボタンを消す。\n\t\t\tanswerButton.className = \"transparent\";\n\t\t\t// 注釈を消す。（プレイモード普通、タイムアタックの時のみ）\n\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t};\n\t\t\t// \"最初からやり直す\"ボタンを消す。\n\t\t\trestartButtonMidGame.className = \"transparent\";\n\t\t\t// \"コース選択画面に戻る\"ボタンを消す。\n\t\t\tcourseSettingBackButtonMidGame.className = \"transparent\";\n\n\t\t\t// 正解時に表示される○の画像を消す。\n\t\t\tcircleImg.className = \"transparent\";\n\n\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\tclosePopup.textContent =\"終了\";\n\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t// 戻るボタンを定義する。\n\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\t\t\t// もう一度ボタンを定義する。\n\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\tsetTimeout(function(){\n\t\t\t// 得点の表示\n\t\t\t// プレイモード：練習・普通の場合は、スコアを表示する。\n\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\tclosePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t} else { // プレイモード：タイムアタックの場合は、かかった時間を表示する。\n\t\t\t\t\t// ただし、すべての出題範囲に解答できた場合のみ。\n\t\t\t\tif ( gameCompleteTimeAttackFlag == \"1\") {\n\t\t\t\t\tconst remainAllSecTimeAttack = Math.ceil(totalPlayingTimeMSec/1000);\n\t\t\t\t\tconst remainMinTimeAttack = Math.floor(remainAllSecTimeAttack / 60);\n\t\t\t\t\tconst remainSecTimeAttack = Math.ceil(remainAllSecTimeAttack % 60);\n\t\t\t\t\tclosePopup.textContent = `あなたがかかった時間は${(`0${remainMinTimeAttack}` ).slice( -2 )}分${(`0${remainSecTimeAttack}` ).slice( -2 )}秒です!`;\n\t\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t} else { // 時間切れの場合は、クリアできなかったと表示する。\n\t\t\t\t\tclosePopup.textContent = `残念ながらクリアできませんでした。`;\n\t\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t}\n\t\t\t};\n\t\t\t// もう一度ボタンの表示（transparentを消して表示させる）\n\t\t\trestartBtn.classList.remove('transparent');\n\t\t\t// 戻るボタンの表示（transparentを消して表示させる）\n\t\t\tbackBtn.classList.remove('transparent');\n\t\t\t},2000);\n\t\t};\n\n\t// 以上、ゲーム終了時の処理を定義する。------------------------------------------------------\n\t// ------------------------------------------------------------------------------------\n\n\t\t// スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\t\tfunction countUpScore(){\n\t\tif (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\taddPoint = addScoreLevel1;\n\t\t} else {\n\t\t\taddPoint = addScoreLevel2;\n\t\t}\n\t\t\t// 合計得点を定義する。\n\t\t\ttotalScore = totalScore + addPoint;\n\t\t\tdisplayScore.setAttribute('data-num', totalScore);\n\n\t\t\tvar countElm = $('.displayScore'),\n\t\t\tcountSpeed = 10;\n\n\t\t\tcountElm.each(function(){\n\t\t\t\tvar self = $(this),\n\t\t\t\t// 合計得点を定義する。\n\t\t\t\tcountMax = self.attr('data-num'),\n\t\t\t\tthisCount = self.text(),\n\t\t\t\tcountTimer;\n\t\t\t\tcountUpAnime();\n\n\t\t\t\t// 数値をカウントアップするアニメーションを定義する。\n\t\t\t\tfunction countUpAnime(){\n\t\t\t\t\tcountTimer = setInterval(function(){\n\t\t\t\t\t\tvar countNext = thisCount++;\n\t\t\t\t\t\tself.text(countNext);\n\t\t\t\t\t\tif(countNext == countMax){\n\t\t\t\t\t\t\tclearInterval(countTimer);\n\t\t\t\t\t\t}\n\t\t\t\t\t},countSpeed);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\t// 正解数をカウントアップする処理を定義する。\n\t\tfunction countUpCorrectNum(){\n\t\t\t// 合計正解数のカウントアップ\n\t\t\ttotalNumCorrectNum = totalNumCorrectNum + 1;\n\t\t\tdisplayNumCorrectNum.textContent = totalNumCorrectNum;\n\n\t\t\t// 連続正解数のカウントアップ\n\t\t\ttotalConsecutiveNumCorrectNum = totalConsecutiveNumCorrectNum + 1;\n\t\t\tdisplayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t// 最高連続正解数のカウントアップ\n\t\t\tif (totalMaxConsecutiveNumCorrectNum < totalConsecutiveNumCorrectNum) {\n\t\t\t\ttotalMaxConsecutiveNumCorrectNum = totalMaxConsecutiveNumCorrectNum + 1;\n\t\t\t\tdisplayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n\t\t\t};\n\t\t};\n\n\t\t// ゲーム中にタイプした文字が表示文字と一致する場合、不一致の場合の処理を定義する。\n\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\t\tif(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n\t\t\t\tcorrectTyping();\n\t\t\t} else if (keyDownChar.key === \"e\"\n\t\t\t\t\t\t&& charArrayInDisplayWord[0].textContent === \"é\"\n\t\t\t\t\t\t&& playEndFlag===\"0\") {\n\t\t\t\t// éの場合は例外的にeでOKとする。\n\t\t\t\tcorrectTyping();\n\t\t\t} else if (playEndFlag===\"0\") {\n\t\t\t\t// タイプミス音を発生させる。\n\t\t\t\ttypeMissAudio();\n\t\t\t} else {\n\n\t\t\t};\n\t\t};\n\n\t\t// タイプした文字が表示文字と一致する場合の処理を定義する。\n\t\tfunction correctTyping(){\n\t\t\t// タイプ音を定義する。\n\t\t\t// タイプ音ありの場合のみ\n\t\t\tif (typeAudioMode == \"タイプ音あり\") {\n\t\t\t\tlet typeAudioMode = new Audio('/assets/typeAudio.mp3');\n\t\t\t\t// タイプ音を発生させる。\n\t\t\t\ttypeAudioMode.volume = 0.3;\n\t\t\t\ttypeAudioMode.play();\n\t\t\t};\n\t\t\t// 文字色を変更する。\n\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t// 一致した文字を配列から削除する。\n\t\t\tcharArrayInDisplayWord.shift();\n\n\t\t\t// メーターを更新する。\n\t\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\t\tbonusCountMeter = 0;\n\t\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t\t}, 2000);\n\t\t\t};\n\t\t\t// 更新したメーターを表示する。\n\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\t\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\t\tif(charArrayInDisplayWord.length === 0) {\n\t\t\t\t// 正解音を定義する。\n\t\t\t\t// 正解音ありの場合のみ\n\t\t\t\tif (correctAudioMode == \"正解音あり\") {\n\t\t\t\t\tlet correctAudio = new Audio('/assets/correctAudio.mp3');\n\t\t\t\t\t// 正解した場合、効果音を発生させる。\n\t\t\t\t\tcorrectAudio.volume = 0.3;\n\t\t\t\t\tcorrectAudio.play();\n\t\t\t\t};\n\t\t\t\t// 「答えを見る」を押していなければ、スコアと正解数をカウントアップする。\n\t\t\t\tif (answerOpenFlag == \"0\"){\n\t\t\t\t\t// プレイモード：練習・普通の場合のみ、スコアアップする。\n\t\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\t\tcountUpScore();\n\t\t\t\t\t};\n\t\t\t\t\tcountUpCorrectNum();\n\t\t\t\t} else {\n\t\t\t\t// 「答えを見る」を押していれば、フラグを0に戻す。\n\t\t\t\t\tanswerOpenFlag = \"0\";\n\t\t\t\t};\n\t\t\t\tcircleImg.classList.add('circle');\n\t\t\t\tcircleImg.classList.remove('transparent');\n\t\t\t\tsetTimeout(createDisplayWord,500);\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tcircleImg.classList.add('transparent');\n\t\t\t\t\tcircleImg.classList.remove('circle');\n\t\t\t\t}, 500);\n\n\t\t\t\tif (playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") {\n\t\t\t\t\tgameClose();\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\n\t\t// タイプした文字が表示文字と不一致の場合の処理を定義する。\n\t\tfunction typeMissAudio(){\n\t\t\t// ミス音を定義する。\n\t\t\t// ミス音ありの場合のみ\n\t\t\tif (incorrectAudioMode == \"ミス音あり\") {\n\t\t\t\tlet incorrectAudio = new Audio('/assets/incorrectAudio.mp3');\n\t\t\t\t// ミス音の場合、効果音を発生させる。\n\t\t\t\tincorrectAudio.volume = 0.3;\n\t\t\t\tincorrectAudio.play();\n\t\t\t};\n\t\t};\n\n\t\t// 英単語を生成した際に、発音させる処理を定義する。\n\t\tfunction pronounce(eng_word){\n\t\t\t\t// résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n\t\t\t\tif (eng_word == \"résumé\"){\n\t\t\t\t\teng_word = \"rezumei\";\n\t\t\t\t};\n\t\t\tlet pronunciation = new Audio('/assets/発音/'+ eng_word + '.mp3');\n\t\t\tpronunciation.play();\n\t\t};\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}