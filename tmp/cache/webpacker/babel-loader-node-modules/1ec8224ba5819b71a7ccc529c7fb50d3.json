{"ast":null,"code":"// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function () {\n  // Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n  document.addEventListener(\"keydown\", keyDownGameStart);\n}); // スペースかEnterキー押下によるゲームスタートを一回限りとするフラグを設定する。\n\nvar gameStartEnterOnlyOnce = \"0\"; // 使用しているブラウザを取得する。\n// chromeのみ、\"f\"が２つ並んでいる場合、\"ff\"に対するadd_redがうまくいかない。\n// 一つ目の\"f\"押下で、２つ目の\"f\"までadd_redが適応される。\n\nvar agent = window.navigator.userAgent.toLowerCase(); // chromeのみ、\"f\"が２つ並んでいる場合に使用するフラグを用意する。\n\nvar addHalfRedFlag = \"0\"; // スペースかEnterキーを押下するとゲーム開始のカウントダウンがスタートする。\n\nfunction keyDownGameStart(keyDownEnter) {\n  if ((keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") && gameStartEnterOnlyOnce == \"0\") {\n    // 表示されている文字を非表示にする。\n    document.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n    document.getElementById(\"pressEnterPopup\").className = \"transparent\";\n    document.getElementById(\"annotationAudio\").className = \"transparent\";\n    document.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n    gameStartEnterOnlyOnce = \"1\";\n    gameStart();\n  }\n\n  ;\n}\n\n; // 選択した英単語難易度によって変わるwordListの定義\n\nvar wordList = gon.wordListAll; // 選択したプレイモードによって変わるplayModeの定義\n\nvar playMode = gon.playMode; // 出題順の設定によって変わるpronounceModeの定義\n\nvar questionOrderMode = gon.questionOrderMode; // 英単語の発音有無の設定によって変わるpronounceModeの定義\n\nvar pronounceMode = gon.pronounceMode; // BGMの設定によって変わるbgmModeの定義\n\nvar bgmMode = gon.bgmMode; // タイプ音の設定によって変わるtypeAudioModeの定義\n\nvar typeAudioMode = gon.typeAudioMode; // 正解音の設定によって変わるcorrectAudioModeの定義\n\nvar correctAudioMode = gon.correctAudioMode; // ミス音の設定によって変わるincorrectAudioModeの定義\n\nvar incorrectAudioMode = gon.incorrectAudioMode;\n\nfunction gameStart() {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。⇨対応済み\n  // 表示するメーターリストを定義する。\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png']; // 英単語を順番に出題する場合の番号の初期値を定義する。\n\n  var sortById = 0; // 英単語の出題順の初期値を定義する。\n\n  var eachQuestionOrder = 0; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // 合計正解数をカウントアップする際に+1を表示する。\n\n  var displayAddCorrectNum = document.getElementById(\"displayAddCorrectNum\");\n  displayAddCorrectNum.className = \"displayAddCorrectNum\"; // 連続正解数をカウントアップする際に+1を表示する。\n\n  var displayAddConsecutiveCorrectNum = document.getElementById(\"displayAddConsecutiveCorrectNum\");\n  displayAddConsecutiveCorrectNum.className = \"displayAddConsecutiveCorrectNum\"; // 最大連続正解数をカウントアップする際に+1を表示する。\n\n  var displayAddMaxConsecutiveCorrectNum = document.getElementById(\"displayAddMaxConsecutiveCorrectNum\");\n  displayAddMaxConsecutiveCorrectNum.className = \"displayAddMaxConsecutiveCorrectNum\"; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // 以下、BGMありの場合、BGMを流す処理を定義する。---------------------------------------------\n  // ------------------------------------------------------------------------------------\n\n  if (bgmMode == \"BGMあり\") {\n    var bgmAudio = new Audio('/assets/bgm1.mp3');\n    var baseVol = 1;\n    var fadeSpeed = 100;\n    bgmAudio.volume = 0;\n    bgmAudio.play();\n    var start_func = setInterval(function () {\n      bgmAudio.volume = bgmAudio.volume + baseVol / 100;\n\n      if (bgmAudio.volume >= baseVol - baseVol / 100) {\n        bgmAudio.volume = baseVol;\n        clearInterval(start_func);\n      }\n    }, fadeSpeed * baseVol / 100);\n  }\n\n  ; // 以上、BGMありの場合、BGMを流す処理を定義する。---------------------------------------------\n  // ------------------------------------------------------------------------------------\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    // カウントダウン文字を１ずつ減らす。\n    countDownPopupNumber = countDownPopupNumber - 1; //カウントダウンが0になれば、ゲームを開始する。\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart); // カウントダウンポップアップのクラスを変更し、非表示にする。\n\n      countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className = \"displayWordJapanese\";\n    var displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n    displayWordAnnotation.className = \"transparent\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // 出題した英単語を格納する配列を定義する。\n\n    var allQuestionWords = []; // 出題したすべての英単語を格納する配列を定義する。\n\n    var allQuestionWordsList = []; // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 「答えを見る」ボタン押下有無を判定するフラグを定義する。\n\n    var answerOpenFlag = \"0\"; // プレイモード：タイムアタックですべての出題範囲に解答済み判定フラグを設定する。\n\n    var gameCompleteTimeAttackFlag = \"0\"; // 問題を作成した時間を定義する。\n\n    var eachQuestionCreateTime = 0; // 問題を解答するのに要した時間を定義する。\n\n    var eachQuestionAnswerTime = 0; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n    // プレイモード：タイムアタックの場合は5分とする。\n\n    var initialPlayingTimeMSec = 300000; // プレイモード：タイムアタックの場合は50分とする。\n\n    if (playMode == \"タイムアタック\") {\n      initialPlayingTimeMSec = 3000000;\n    }\n\n    ; // プレイモード：タイムアタックの場合、ゲームクリア後に合計プレイ時間表示する。\n\n    var totalPlayingTimeMSec = 0; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 正解時に表示する丸を定義する。\n\n    document.getElementById(\"circleImg\").src = '/assets/正解○.png';\n    circleImg.classList.add('transparent'); // \"発音を聞く\"ボタンを表示する。\n\n    var pronounceAgainButton = document.getElementById(\"pronounceAgainButton\");\n    pronounceAgainButton.innerHTML = \"発音を聞く\";\n    pronounceAgainButton.className = \"pronounceAgainButton\";\n\n    pronounceAgainButton.onclick = function () {\n      pronounce(displayWordInList.eng_word);\n    }; // \"ヒントを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\n\n    var hintButton = document.getElementById(\"hintButton\");\n    hintButton.innerHTML = \"ヒントを見る\";\n\n    if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n      hintButton.className = \"hintButton\";\n\n      hintButton.onclick = function () {\n        charArrayInDisplayWord[0].classList.remove('transparent');\n      };\n    } else {\n      hintButton.className = \"hintButtonPractice\";\n    }\n\n    ; // \"答えを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\n    var answerButton = document.getElementById(\"answerButton\");\n    answerButton.innerHTML = \"答えを見る\";\n\n    if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n      answerButton.className = \"answerButton\";\n\n      answerButton.onclick = function () {\n        for (var i = 0; i < charArrayInDisplayWord.length; i++) {\n          charArrayInDisplayWord[i].classList.remove('transparent');\n        } // 連続正解数を0に戻す。\n\n\n        totalConsecutiveNumCorrectNum = 0;\n        displayConsecutiveCorrectNum.textContent = totalConsecutiveNumCorrectNum; // メーターを初期値に戻す。\n\n        bonusCountMeter = 0;\n        document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 「答えを見る」判定フラグを更新する。\n\n        answerOpenFlag = \"1\";\n      };\n    } else {\n      // (プレイモード練習の時)\n      answerButton.className = \"answerButtonPractice\";\n    }\n\n    ; // \"最初からやり直す\"ボタンを表示する。\n\n    var restartButtonMidGame = document.getElementById(\"restartButtonMidGame\");\n    restartButtonMidGame.classList.remove('transparent'); // \"コース選択画面に戻る\"ボタンを表示する。\n\n    var courseSettingBackButtonMidGame = document.getElementById(\"courseSettingBackButtonMidGame\");\n    courseSettingBackButtonMidGame.classList.remove('transparent'); // 以下、スコア定義---------------------------------------------------------------------------------------------------\n    // -----------------------------------------------------------------------------------------------------------------\n    // // プレイモード：練習・普通の場合はスコアを表示させる。\n    // // プレイモード：タイムアタックはスコアを表示させない。\n    // if ( playMode == \"練習\" || playMode == \"普通\") {\n    // // 表示するスコアを定義する。\n    // let displayScoreEntire = document.getElementById(\"displayScoreEntire\");\n    // displayScoreEntire.className =  \"displayScoreEntire\";\n    // let displayScore = document.getElementById(\"displayScore\");\n    // displayScore.className =  \"displayScore\";\n    // let displayP = document.getElementById(\"displayP\");\n    // displayP.className =  \"displayP\";\n    // };\n    // プレモード：練習・普通の場合のみ使用する。----------------------------\n    // ---------------------------------------------------------------\n    // // 合計スコアの初期値を定義する。\n    // let totalScore = 0;\n    // // スコアアップする基準を定義する。\n    // const refTextLengthForCountUpLevel1 = 4;\n    // const addScoreLevel1 = 50;\n    // const addScoreLevel2 = 50;\n    // ---------------------------------------------------------------\n    // ---------------------------------------------------------------\n    // 表示する正解数全体のクラス\n\n    var NumCorrectMidGamePlay = document.getElementById(\"NumCorrectMidGamePlay\");\n    NumCorrectMidGamePlay.className = \"NumCorrectMidGamePlay\"; // 表示する正解数を定義する。\n\n    var displayNumCorrectWord = document.getElementById(\"displayNumCorrectWord\");\n    displayNumCorrectWord.className = \"displayNumCorrectWord\";\n    displayNumCorrectWord.textContent = \"合計正解数\";\n    var displayNumCorrectNum = document.getElementById(\"displayNumCorrectNum\");\n    displayNumCorrectNum.className = \"displayNumCorrectNum\";\n    var totalNumCorrectNum = 0;\n    displayNumCorrectNum.textContent = totalNumCorrectNum; // 表示する連続正解数を定義する。\n\n    var displayConsecutiveCorrectWord = document.getElementById(\"displayConsecutiveCorrectWord\");\n    displayConsecutiveCorrectWord.className = \"displayConsecutiveCorrectWord\";\n    displayConsecutiveCorrectWord.textContent = \"連続正解数\";\n    var displayConsecutiveCorrectNum = document.getElementById(\"displayConsecutiveCorrectNum\");\n    displayConsecutiveCorrectNum.className = \"displayConsecutiveCorrectNum\";\n    var totalConsecutiveNumCorrectNum = 0;\n    displayConsecutiveCorrectNum.textContent = totalConsecutiveNumCorrectNum; // 表示する最高連続正解数を定義する。\n\n    var displayMaxConsecutiveCorrectWord = document.getElementById(\"displayMaxConsecutiveCorrectWord\");\n    displayMaxConsecutiveCorrectWord.className = \"displayMaxConsecutiveCorrectWord\";\n    displayMaxConsecutiveCorrectWord.textContent = \"最高連続正解数\";\n    var displayMaxConsecutiveCorrectNum = document.getElementById(\"displayMaxConsecutiveCorrectNum\");\n    displayMaxConsecutiveCorrectNum.className = \"displayMaxConsecutiveCorrectNum\";\n    var totalMaxConsecutiveNumCorrectNum = 0;\n    displayMaxConsecutiveCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum; // 以上、スコア定義---------------------------------------------------------------------------------------------------\n    // -----------------------------------------------------------------------------------------------------------------\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // 以下、表示する単語を作成する処理を定義する。-----------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function createDisplayWord() {\n      // すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n      // ギリギリで問題に正解した場合、○を表示した後、500m秒後にワードを生成する処理が走るため。\n      if (playEndFlag === \"0\") {\n        // 表示単語を初期化する。\n        displayWord.textContent = \"\"; // 問題を作成した時間を記録する。\n\n        eachQuestionCreateTime = Date.now(); // 前回の問題に要した時間を初期値に戻す。\n\n        eachQuestionAnswerTime = 0; // 出題順の設定により、displayWordInListを変更\n\n        if (questionOrderMode == \"番号順\") {\n          // 英単語を順番に出題する場合の番号の初期値を定義する。\n          displayWordInList = wordList[sortById];\n          sortById++; // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\n          if (sortById >= wordList.length) {\n            sortById = 0; // プレイモード：タイムアタックの場合、次の問題に正解した時点でゲーム終了とする。\n\n            if (playMode == \"タイムアタック\") {\n              // フラグを1に更新する。\n              gameCompleteTimeAttackFlag = \"1\";\n            }\n\n            ;\n          }\n\n          ;\n        } else {\n          // 出題順がランダムの場合\n          // 0〜textListsの総数間で整数値をランダムで算出する。\n          var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語をランダムで選定する。\n\n          displayWordInList = wordList[randomIntegerInTotalWordList]; // プレイモード：タイムアタックの場合は、wordListから表示単語を削除する。\n\n          if (playMode == \"タイムアタック\") {\n            // 同じ問題を２度出題しないように、一度出題した問題はwordListから削除する。\n            wordList.splice(randomIntegerInTotalWordList, 1); // wordList.length == 0になった場合、次の問題に正解した時点でゲーム終了とする。\n\n            if (wordList.length == 0) {\n              // フラグを1に更新する。\n              gameCompleteTimeAttackFlag = \"1\";\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ; // 前回出題した英単語を allQuestionWords から削除し、初期値に戻す。\n\n        allQuestionWords = []; // 問題の出題順を+1する。\n\n        eachQuestionOrder = eachQuestionOrder + 1; // 出題した英単語displayWordInList を allQuestionWords に格納する。\n\n        allQuestionWords.push(eachQuestionOrder, displayWordInList.id, \"▷\", displayWordInList.eng_word, displayWordInList.jap_trans_1, \"未解答\", \"-\"); // 英単語を生成した際に、発音させる。（発音ありの場合のみ）\n\n        if (pronounceMode == \"発音あり\") {\n          pronounce(displayWordInList.eng_word);\n        }\n\n        ; // 表示する単語の日本語訳を表示させる。\n\n        displayWordJapanese.textContent = displayWordInList.jap_trans_1; // 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n        // プレイモード練習では答えを表示しているため処理不要\n\n        if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n          // 前の問題に注釈がある場合消す。\n          displayWordAnnotation.className = \"transparent\"; // ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\n          var duplicateWords = wordList.filter(function (duplicateWord) {\n            return duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1;\n          }); // 日本語訳が重複している他の英単語がある場合\n\n          if (duplicateWords.length > 1) {\n            // 重複している英単語の配列（この時点では答えを含む）を定義する。\n            var duplicateWordsList = [];\n\n            for (var i = 0; i < duplicateWords.length; i++) {\n              // 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n              if (duplicateWords[i].id !== displayWordInList.id) {\n                duplicateWordsList.push(duplicateWords[i].eng_word);\n              }\n\n              ;\n            }\n\n            ;\n            displayWordAnnotation.textContent = \"\\u203B\".concat(duplicateWordsList, \"\\u4EE5\\u5916\");\n            displayWordAnnotation.className = \"displayWordAnnotation\";\n          }\n\n          ;\n        }\n\n        ; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n        // spanタグで閉じた単語を表示する。\n\n        charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function (value) {\n          // spanタグを作成する。\n          var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n          spanValue.textContent = value; // 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、タイムアタックのときのみ）\n\n          if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n            spanValue.className = \"transparent\";\n          }\n\n          ; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n          displayWord.appendChild(spanValue);\n          return spanValue;\n        });\n      }\n\n      ;\n    }\n\n    ; // 以上、表示する単語を作成する処理を定義する。-----------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainAllSec = Math.ceil(remainMSec / 1000);\n      var remainMin = Math.floor(remainAllSec / 60);\n      var remainSec = Math.ceil(remainAllSec % 60);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"0\".concat(remainMin).slice(-2), \"\\u5206\").concat(\"0\".concat(remainSec).slice(-2), \"\\u79D2\"); // 残り時間が0になった場合の処理を定義する。\n\n      if (remainMSec <= 0) {\n        gameClose();\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel; // プレイモード：タイムアタックの場合は、使用時間を最後に表示する。\n\n      if (playMode == \"タイムアタック\") {\n        totalPlayingTimeMSec = diffBetweenCurrentTimeAndStartTime;\n      }\n\n      ;\n    }\n\n    ; // 以上、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、ゲーム終了時の処理を定義する。------------------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function gameClose() {\n      // ゲーム終了後にplayEndFlagを1に更新する。\n      playEndFlag = \"1\"; // プレイ時間のカウントダウンを止める。\n\n      clearInterval(timerId); // 最後に出題していた英単語を allQuestionWordsList に格納する。\n      // ただし、プレイモード：タイムアタックでクリアしている場合、出題している単語はないため処理不要。\n      // また、終了直前で正解した場合、次の問題生成前に本処理に入り、最後に正解した問題が２つ表示されるため、\"未解答\"であることも条件に加える。\n\n      if (!(playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"2\") && allQuestionWords[allQuestionWords.length - 2] == \"未解答\") {\n        // 出題したすべての英単語リストに追加する。\n        allQuestionWordsList.push(allQuestionWords);\n      }\n\n      ; // 残り時間の表示を消す。\n\n      remainPlayingTime.className = \"transparent\"; // 現在のスコア（左上）の表示を消す。\n      // プレイモード：練習・普通の場合のみ\n      // if ( playMode == \"練習\" || playMode == \"普通\") {\n      // displayScoreEntire.className = \"transparent\";\n      // displayScore.className = \"transparent\";\n      // displayP.className = \"transparent\";\n      // };\n      //正解数全体のクラスを非表示にする。\n\n      NumCorrectMidGamePlay.className = \"transparent\"; // 正解数の表示を消す。\n\n      displayNumCorrectWord.className = \"transparent\";\n      displayNumCorrectNum.className = \"transparent\"; // 連続正解数の表示を消す。\n\n      displayConsecutiveCorrectWord.className = \"transparent\";\n      displayConsecutiveCorrectNum.className = \"transparent\"; // 最高連続正解数の表示を消す。\n\n      displayMaxConsecutiveCorrectWord.className = \"transparent\";\n      displayMaxConsecutiveCorrectNum.className = \"transparent\"; // 問題の英単語の表示を消す。\n\n      displayWord.textContent = \"\"; // 解答の日本語の表示を消す。\n\n      displayWordJapanese.textContent = \"\"; // 出題や解答を表示していたdivを消す。\n\n      var btnWrapperPlay = document.getElementById(\"btnWrapperPlay\");\n      btnWrapperPlay.className = \"transparent\"; // \"発音を聞く\"ボタンを消す。\n\n      pronounceAgainButton.className = \"transparent\"; // \"ヒントを見る\"ボタンを消す。\n\n      hintButton.className = \"transparent\"; // \"答えを見る\"ボタンを消す。\n\n      answerButton.className = \"transparent\"; // 注釈を消す。（プレイモード普通、タイムアタックの時のみ）\n\n      if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n        displayWordAnnotation.className = \"transparent\";\n      }\n\n      ; // \"最初からやり直す\"ボタンを消す。\n\n      restartButtonMidGame.className = \"transparent\"; // \"コース選択画面に戻る\"ボタンを消す。\n\n      courseSettingBackButtonMidGame.className = \"transparent\"; // 正解時に表示される○の画像を消す。\n\n      circleImg.className = \"transparent\"; // ゲーム終了後に、\"お疲れ様でした\"を表示する。\n\n      var closePopupClear = document.getElementById(\"closePopupClear\"); // ゲーム終了後に終了を知らせるポップアップを作成する。\n      // ゲーム終了を知らせるポップアップを定義する。\n\n      var closePopup = document.getElementById(\"closePopup\");\n      closePopup.textContent = \"終了\";\n      closePopup.className = \"closePopup\"; // ゲーム終了後に、問題数、合計正解数、最大連続正解数を表示する。\n\n      var closePopupTotalQuestionNum = document.getElementById(\"closePopupTotalQuestionNum\");\n      closePopupTotalQuestionNum.className = \"closePopupTotalQuestionNum\";\n      var closePopupFinalCorrectNum = document.getElementById(\"closePopupFinalCorrectNum\");\n      closePopupFinalCorrectNum.className = \"closePopupFinalCorrectNum\";\n      var closePopupFinalMaxConsecutiveCorrectNum = document.getElementById(\"closePopupFinalMaxConsecutiveCorrectNum\");\n      closePopupFinalMaxConsecutiveCorrectNum.className = \"closePopupFinalMaxConsecutiveCorrectNum\"; // もう一度ボタンを定義する。\n\n      var restartBtn = document.getElementById(\"restartBtn\"); // 戻るボタンを定義する。\n\n      var backBtn = document.getElementById(\"backBtn\"); // 問題を振り返るボタンを定義する。\n\n      var checkQuestions = document.getElementById(\"checkQuestions\"); // 出題問題リスト表示を定義する。\n\n      var allQuestionsListEntireScr = document.getElementById(\"allQuestionsListEntireScr\");\n      var allQuestionsList = document.getElementById(\"allQuestionsList\"); // 出題した問題を表にする。\n      // 出題した問題の数だけ処理を実施する。\n\n      allQuestionWordsList.forEach(function (allQuestionWords) {\n        var tr = document.createElement(\"tr\");\n        allQuestionsList.appendChild(tr); // 問題ごとにobjArrayを変え、表に各項目を入れていく。\n\n        var objArray = Object.entries(allQuestionWords);\n        objArray.forEach(function (arr) {\n          var td = document.createElement(\"td\");\n          td.textContent = arr[1];\n\n          if (arr[1] == \"▷\") {\n            // ▷を押下した時\n            td.onclick = function () {\n              pronounce(objArray[3][1]); // その行の英単語を発音させる。\n            };\n          }\n\n          ;\n          tr.appendChild(td);\n        });\n      }); // 出題した出題問題リストポップアップを表示した後の「閉じる」ボタンを定義する。\n\n      var closeAllQuestionsList = document.getElementById(\"closeAllQuestionsList\"); // 「問題を振り返る」ボタン押下で出題問題リストポップアップを開く。\n\n      checkQuestions.onclick = function () {\n        // メーターを非表示にする。\n        document.getElementById(\"meterImg\").className = \"transparent\"; // 出題問題リストを表示させる。\n\n        allQuestionsListEntireScr.className = \"allQuestionsListEntireScr\";\n        closeAllQuestionsList.className = \"closeAllQuestionsList\";\n      }; // 「閉じる」ボタン押下で出題問題リストポップアップを閉じる。\n\n\n      closeAllQuestionsList.onclick = function () {\n        // メーターを表示にさせる。\n        document.getElementById(\"meterImg\").className = \"meter\"; // 出題問題リストを非表示にする。\n\n        allQuestionsListEntireScr.className = \"transparent\";\n        closeAllQuestionsList.className = \"transparent\";\n      }; // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n\n      setTimeout(function () {\n        // 得点の表示\n        // プレイモード：練習・普通の場合は、スコアを表示する。\n        if (playMode == \"練習\" || playMode == \"普通\") {\n          closePopupClear.textContent = \"お疲れ様でした！\";\n          closePopupClear.className = \"closePopupClear\";\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u6210\\u7E3E\\u306F\\u4EE5\\u4E0B\\u306E\\u901A\\u308A\\u3067\\u3059!\"; //closePopup.textContent = `あなたの得点は ${totalScore.toLocaleString()} 点です!`;\n\n          closePopup.className = \"endResultPopupNoClear\";\n        } else {\n          // プレイモード：タイムアタックの場合は、かかった時間を表示する。\n          // ただし、すべての出題範囲に解答できた場合のみ。\n          if (gameCompleteTimeAttackFlag == \"2\") {\n            var remainAllSecTimeAttack = Math.ceil(totalPlayingTimeMSec / 1000);\n            var remainMinTimeAttack = Math.floor(remainAllSecTimeAttack / 60);\n            var remainSecTimeAttack = Math.ceil(remainAllSecTimeAttack % 60);\n            closePopupClear.textContent = \"お疲れ様でした！ゲームクリアです！\";\n            closePopupClear.className = \"closePopupClear\";\n            closePopup.textContent = \"\\u3042\\u306A\\u305F\\u304C\\u304B\\u304B\\u3063\\u305F\\u6642\\u9593\\u306F \".concat(\"0\".concat(remainMinTimeAttack).slice(-2), \"\\u5206\").concat(\"0\".concat(remainSecTimeAttack).slice(-2), \"\\u79D2 \\u3067\\u3059!\");\n            closePopup.className = \"endResultPopupClear\";\n          } else {\n            // 時間切れの場合は、クリアできなかったと表示する。\n            closePopup.textContent = \"\\u6B8B\\u5FF5\\u306A\\u304C\\u3089\\u30AF\\u30EA\\u30A2\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\";\n            closePopup.className = \"endResultPopupNoClear\";\n          }\n        }\n\n        ; // 最終結果として、問題数、合計正解数、最高連続正解数を表示する。\n\n        closePopupTotalQuestionNum.textContent = \"\\u51FA\\u984C\\u6570 : \".concat(eachQuestionOrder);\n        closePopupFinalCorrectNum.textContent = \"\".concat(displayNumCorrectWord.textContent, \" : \").concat(totalNumCorrectNum);\n        closePopupFinalMaxConsecutiveCorrectNum.textContent = \"\".concat(displayMaxConsecutiveCorrectWord.textContent, \" : \").concat(totalMaxConsecutiveNumCorrectNum); // もう一度ボタンの表示（transparentを消して表示させる）\n\n        restartBtn.classList.remove('transparent'); // 戻るボタンの表示（transparentを消して表示させる）\n\n        backBtn.classList.remove('transparent'); // 問題を振り返るボタンの表示\n\n        checkQuestions.className = \"checkQuestions\";\n        checkQuestions.textContent = \"問題を振り返る\";\n      }, 2000);\n    }\n\n    ; // 以上、ゲーム終了時の処理を定義する。------------------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n    // ------------------------------------------------------------------------------------\n    // function countUpScore(){\n    // if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n    // \taddPoint = addScoreLevel1;\n    // } else {\n    // \taddPoint = addScoreLevel2;\n    // };\n    // \t// 合計得点を定義する。\n    // \ttotalScore = totalScore + addPoint;\n    // \tdisplayScore.setAttribute('data-num', totalScore);\n    // \tvar countElm = $('.displayScore'),\n    // \tcountSpeed = 10;\n    // \tcountElm.each(function(){\n    // \t\tvar self = $(this),\n    // \t\t// 合計得点を定義する。\n    // \t\tcountMax = self.attr('data-num'),\n    // \t\tthisCount = self.text(),\n    // \t\tcountTimer;\n    // \t\tcountUpAnime();\n    // \t\t// 数値をカウントアップするアニメーションを定義する。\n    // \t\tfunction countUpAnime(){\n    // \t\t\tcountTimer = setInterval(function(){\n    // \t\t\t\tvar countNext = thisCount++;\n    // \t\t\t\tself.text(countNext);\n    // \t\t\t\tif(countNext == countMax){\n    // \t\t\t\t\tclearInterval(countTimer);\n    // \t\t\t\t}\n    // \t\t\t},countSpeed);\n    // \t\t};\n    // \t});\n    // };\n    // 以上、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、正解数をカウントアップする処理を定義する。--------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function countUpCorrectNum() {\n      // 合計正解数のカウントアップ\n      totalNumCorrectNum = totalNumCorrectNum + 1;\n      displayNumCorrectNum.textContent = totalNumCorrectNum; // 合計正解数、連続正解数、最高連続正解数をカウントアップする+1を定義。\n\n      displayAddCorrectNum.textContent = \"+1\"; // 合計正解数、連続正解数、最高連続正解数+1をフェードアウトする。\n\n      displayAddCorrectNum.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も+1が表示されるようにする。\n\n      setTimeout(function () {\n        displayAddCorrectNum.textContent = \"\";\n        displayAddCorrectNum.classList.remove('fadeout');\n      }, 1000); // 連続正解数のカウントアップ\n\n      totalConsecutiveNumCorrectNum = totalConsecutiveNumCorrectNum + 1;\n      displayConsecutiveCorrectNum.textContent = totalConsecutiveNumCorrectNum; // 連続正解数をカウントアップする+1を定義。\n\n      displayAddConsecutiveCorrectNum.textContent = \"+1\"; // 連続正解数+1をフェードアウトする。\n\n      displayAddConsecutiveCorrectNum.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も+1が表示されるようにする。\n\n      setTimeout(function () {\n        displayAddConsecutiveCorrectNum.textContent = \"\";\n        displayAddConsecutiveCorrectNum.classList.remove('fadeout');\n      }, 1000); // 最高連続正解数のカウントアップ\n\n      if (totalMaxConsecutiveNumCorrectNum < totalConsecutiveNumCorrectNum) {\n        totalMaxConsecutiveNumCorrectNum = totalMaxConsecutiveNumCorrectNum + 1;\n        displayMaxConsecutiveCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum; // 最高連続正解数をカウントアップする+1を定義。\n\n        displayAddMaxConsecutiveCorrectNum.textContent = \"+1\"; // 最高連続正解数+1をフェードアウトする。\n\n        displayAddMaxConsecutiveCorrectNum.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も+1が表示されるようにする。\n\n        setTimeout(function () {\n          displayAddMaxConsecutiveCorrectNum.textContent = \"\";\n          displayAddMaxConsecutiveCorrectNum.classList.remove('fadeout');\n        }, 1000);\n      }\n\n      ;\n    }\n\n    ; // 以上、正解数をカウントアップする処理を定義する。--------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        correctTyping();\n      } else if (keyDownChar.key === \"e\" && charArrayInDisplayWord[0].textContent === \"é\" && playEndFlag === \"0\") {\n        // éの場合は例外的にeでOKとする。\n        correctTyping();\n      } else if (playEndFlag === \"0\") {\n        // タイプミス音を発生させる。\n        typeMissAudio();\n      } else {}\n\n      ;\n    }\n\n    ; // 以上、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n    // ------------------------------------------------------------------------------------\n\n    function correctTyping() {\n      // タイプ音を定義する。\n      // タイプ音ありの場合のみ\n      if (typeAudioMode == \"タイプ音あり\") {\n        var _typeAudioMode = new Audio('/assets/typeAudio.mp3'); // タイプ音を発生させる。\n\n\n        _typeAudioMode.volume = 0.3;\n\n        _typeAudioMode.play();\n      }\n\n      ; // 文字色を変更する。\n      // ただし、chromeの場合かつ、\"f\"が２つ並んでいる場合、別のclassを適応させる。\n\n      if (agent.indexOf(\"chrome\") != -1 && charArrayInDisplayWord[0].textContent == \"f\" && charArrayInDisplayWord[1].textContent == \"f\" && addHalfRedFlag == \"0\") {\n        charArrayInDisplayWord[0].className = \"addHalfRed\";\n        addHalfRedFlag = \"1\";\n      } else if (agent.indexOf(\"chrome\") != -1 // \"addHalfRed適応後に、２つ目の\"f\"押下でadd_redに戻す。\"f\"が３つ並ぶことはないという前提。\n      && charArrayInDisplayWord[0].textContent == \"f\" && charArrayInDisplayWord[1].textContent == \"f\" && addHalfRedFlag == \"1\") {\n        charArrayInDisplayWord[0].className = \"add_red\"; // 一致した文字を配列から削除する。charArrayInDisplayWord[0]の\"f\"とcharArrayInDisplayWord[1]の\"f\"を削除する。\n\n        charArrayInDisplayWord.shift();\n        charArrayInDisplayWord.shift();\n        addHalfRedFlag = \"0\";\n      } else {\n        // chromeではない場合、もしくは\"f\"が２つ並んでいない場合\n        charArrayInDisplayWord[0].className = \"add_red\"; // 一致した文字を配列から削除する。\n\n        charArrayInDisplayWord.shift();\n      } // メーターを更新する。\n\n\n      bonusCountMeter = bonusCountMeter + 1; // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWord.length === 0) {\n        // 正解音を定義する。\n        // 正解音ありの場合のみ\n        if (correctAudioMode == \"正解音あり\") {\n          var correctAudio = new Audio('/assets/correctAudio.mp3'); // 正解した場合、効果音を発生させる。\n\n          correctAudio.volume = 0.3;\n          correctAudio.play();\n        }\n\n        ; // 「答えを見る」を押していなければ、スコアと正解数をカウントアップする。\n\n        if (answerOpenFlag == \"0\") {\n          // プレイモード：練習・普通の場合のみ、スコアアップする。\n          if (playMode == \"練習\" || playMode == \"普通\") {//countUpScore(); // スコアアップ処理を不要とする。\n          }\n\n          ;\n          countUpCorrectNum(); // 「答えを見る」を押していない場合、正解として記録する。\n\n          allQuestionWords.splice(allQuestionWords.length - 2, 1, \"正解\");\n        } else {\n          // 「答えを見る」を押していれば、フラグを0に戻す。\n          answerOpenFlag = \"0\"; // 「答えを見る」を押している場合、不正解として記録する。\n\n          allQuestionWords.splice(allQuestionWords.length - 2, 1, \"不正解\");\n        }\n\n        ; // 解答するまでにかかった時間を記録する。\n\n        eachQuestionAnswerTime = Math.ceil((Date.now() - eachQuestionCreateTime) / 1000);\n        var eachQuestionAnswerMin = Math.floor(eachQuestionAnswerTime / 60);\n        var eachQuestionAnswerSec = Math.ceil(eachQuestionAnswerTime % 60);\n        allQuestionWords.splice(allQuestionWords.length - 1, 1, \"\".concat(\"0\".concat(eachQuestionAnswerMin).slice(-2), \":\").concat(\"0\".concat(eachQuestionAnswerSec).slice(-2))); // 出題したすべての英単語リストに追加する。\n\n        allQuestionWordsList.push(allQuestionWords); // 丸を表示、答えを表示するなどのアニメーションを実施する。\n\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n        setTimeout(createDisplayWord, 500);\n        setTimeout(function () {\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n        }, 500);\n\n        if (playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") {\n          // プレイモード：タイムアタックの場合、最後の問題に解答できた瞬間にフラグを２に更新する。\n          gameCompleteTimeAttackFlag = \"2\";\n          gameClose();\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; // 以上、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function typeMissAudio() {\n      // ミス音を定義する。\n      // ミス音ありの場合のみ\n      if (incorrectAudioMode == \"ミス音あり\") {\n        var incorrectAudio = new Audio('/assets/incorrectAudio.mp3'); // ミスの場合、効果音を発生させる。\n\n        incorrectAudio.volume = 0.3;\n        incorrectAudio.play();\n      }\n\n      ;\n    }\n\n    ; // 以上、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function pronounce(eng_word) {\n      // résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n      if (eng_word == \"résumé\") {\n        eng_word = \"rezumei\";\n      }\n\n      ;\n      var pronunciation = new Audio('/assets/発音/' + eng_word + '.mp3');\n      pronunciation.play();\n    }\n\n    ; // 以上、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n    // ------------------------------------------------------------------------------------\n  }\n\n  ;\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_eng.js"],"names":["window","addEventListener","document","keyDownGameStart","gameStartEnterOnlyOnce","agent","navigator","userAgent","toLowerCase","addHalfRedFlag","keyDownEnter","key","getElementById","className","gameStart","wordList","gon","wordListAll","playMode","questionOrderMode","pronounceMode","bgmMode","typeAudioMode","correctAudioMode","incorrectAudioMode","imgArray","sortById","eachQuestionOrder","bonusCountMeter","bonusCountMeterMax","displayBonusAddPlayTime","bonusAddPlayTime","displayAddCorrectNum","displayAddConsecutiveCorrectNum","displayAddMaxConsecutiveCorrectNum","src","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","bgmAudio","Audio","baseVol","fadeSpeed","volume","play","start_func","clearInterval","typingPlayStart","displayWord","displayWordJapanese","displayWordAnnotation","charArrayInDisplayWord","allQuestionWords","allQuestionWordsList","playEndFlag","answerOpenFlag","gameCompleteTimeAttackFlag","eachQuestionCreateTime","eachQuestionAnswerTime","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","totalPlayingTimeMSec","setTimeout","countDownTime","timerId","circleImg","classList","add","pronounceAgainButton","innerHTML","onclick","pronounce","displayWordInList","eng_word","hintButton","remove","answerButton","i","length","totalConsecutiveNumCorrectNum","displayConsecutiveCorrectNum","restartButtonMidGame","courseSettingBackButtonMidGame","NumCorrectMidGamePlay","displayNumCorrectWord","displayNumCorrectNum","totalNumCorrectNum","displayConsecutiveCorrectWord","displayMaxConsecutiveCorrectWord","displayMaxConsecutiveCorrectNum","totalMaxConsecutiveNumCorrectNum","keyDownCharCountUp","randomIntegerInTotalWordList","Math","floor","random","splice","push","id","jap_trans_1","duplicateWords","filter","duplicateWord","duplicateWordsList","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainAllSec","ceil","remainMin","remainSec","remainSecLabel","slice","gameClose","btnWrapperPlay","closePopupClear","closePopup","closePopupTotalQuestionNum","closePopupFinalCorrectNum","closePopupFinalMaxConsecutiveCorrectNum","restartBtn","backBtn","checkQuestions","allQuestionsListEntireScr","allQuestionsList","forEach","tr","objArray","Object","entries","arr","td","closeAllQuestionsList","remainAllSecTimeAttack","remainMinTimeAttack","remainSecTimeAttack","countUpCorrectNum","keyDownChar","correctTyping","typeMissAudio","indexOf","shift","correctAudio","eachQuestionAnswerMin","eachQuestionAnswerSec","incorrectAudio","pronunciation"],"mappings":"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","sourcesContent":["// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function(){\n\t// Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n\tdocument.addEventListener(`keydown`, keyDownGameStart);\n});\n\n// スペースかEnterキー押下によるゲームスタートを一回限りとするフラグを設定する。\nlet gameStartEnterOnlyOnce = \"0\";\n\n// 使用しているブラウザを取得する。\n// chromeのみ、\"f\"が２つ並んでいる場合、\"ff\"に対するadd_redがうまくいかない。\n// 一つ目の\"f\"押下で、２つ目の\"f\"までadd_redが適応される。\nconst agent = window.navigator.userAgent.toLowerCase()\n// chromeのみ、\"f\"が２つ並んでいる場合に使用するフラグを用意する。\nlet addHalfRedFlag = \"0\";\n\n// スペースかEnterキーを押下するとゲーム開始のカウントダウンがスタートする。\nfunction keyDownGameStart(keyDownEnter){\n\tif ((keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") && gameStartEnterOnlyOnce == \"0\") {\n\t\t// 表示されている文字を非表示にする。\n\t\tdocument.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"pressEnterPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"annotationAudio\").className = \"transparent\";\n\t\tdocument.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n\t\tgameStartEnterOnlyOnce = \"1\";\n\t\tgameStart();\n\t};\n};\n\n\n// 選択した英単語難易度によって変わるwordListの定義\nconst wordList = gon.wordListAll;\n\n// 選択したプレイモードによって変わるplayModeの定義\nconst playMode = gon.playMode;\n\n// 出題順の設定によって変わるpronounceModeの定義\nconst questionOrderMode = gon.questionOrderMode;\n\n// 英単語の発音有無の設定によって変わるpronounceModeの定義\nconst pronounceMode = gon.pronounceMode;\n\n// BGMの設定によって変わるbgmModeの定義\nconst bgmMode = gon.bgmMode;\n\n// タイプ音の設定によって変わるtypeAudioModeの定義\nconst typeAudioMode = gon.typeAudioMode;\n\n// 正解音の設定によって変わるcorrectAudioModeの定義\nconst correctAudioMode = gon.correctAudioMode;\n\n// ミス音の設定によって変わるincorrectAudioModeの定義\nconst incorrectAudioMode = gon.incorrectAudioMode;\n\n\n\nfunction gameStart(){\n\n\t// 表示する単語リストを定義する。\n\t// chromeの場合\"ff\"が正常に動作しない。⇨対応済み\n\n\t// 表示するメーターリストを定義する。\n\tconst imgArray =[\n\t\t'/assets/メーターPNG/メーター0.png',\n\t\t'/assets/メーターPNG/メーター10_yellow.png',\n\t\t'/assets/メーターPNG/メーター20_yellow.png',\n\t\t'/assets/メーターPNG/メーター30_yellow.png',\n\t\t'/assets/メーターPNG/メーター40_yellow.png',\n\t\t'/assets/メーターPNG/メーター50_yellow.png',\n\t\t'/assets/メーターPNG/メーター60_yellow.png',\n\t\t'/assets/メーターPNG/メーター70_yellow.png',\n\t\t'/assets/メーターPNG/メーター80_yellow.png',\n\t\t'/assets/メーターPNG/メーター90_yellow.png',\n\t\t'/assets/メーターPNG/メーター100_yellow.png',\n\t\t'/assets/メーターPNG/メーター10_green.png',\n\t\t'/assets/メーターPNG/メーター20_green.png',\n\t\t'/assets/メーターPNG/メーター30_green.png',\n\t\t'/assets/メーターPNG/メーター40_green.png',\n\t\t'/assets/メーターPNG/メーター50_green.png',\n\t\t'/assets/メーターPNG/メーター60_green.png',\n\t\t'/assets/メーターPNG/メーター70_green.png',\n\t\t'/assets/メーターPNG/メーター80_green.png',\n\t\t'/assets/メーターPNG/メーター90_green.png',\n\t\t'/assets/メーターPNG/メーター100_green.png',\n\t\t'/assets/メーターPNG/メーター10_blue.png',\n\t\t'/assets/メーターPNG/メーター20_blue.png',\n\t\t'/assets/メーターPNG/メーター30_blue.png',\n\t\t'/assets/メーターPNG/メーター40_blue.png',\n\t\t'/assets/メーターPNG/メーター50_blue.png',\n\t\t'/assets/メーターPNG/メーター60_blue.png',\n\t\t'/assets/メーターPNG/メーター70_blue.png',\n\t\t'/assets/メーターPNG/メーター80_blue.png',\n\t\t'/assets/メーターPNG/メーター90_blue.png',\n\t\t'/assets/メーターPNG/メーター100_blue.png',\n\t\t'/assets/メーターPNG/メーター10_pink.png',\n\t\t'/assets/メーターPNG/メーター20_pink.png',\n\t\t'/assets/メーターPNG/メーター30_pink.png',\n\t\t'/assets/メーターPNG/メーター40_pink.png',\n\t\t'/assets/メーターPNG/メーター50_pink.png',\n\t\t'/assets/メーターPNG/メーター60_pink.png',\n\t\t'/assets/メーターPNG/メーター70_pink.png',\n\t\t'/assets/メーターPNG/メーター80_pink.png',\n\t\t'/assets/メーターPNG/メーター90_pink.png',\n\t\t'/assets/メーターPNG/メーター100_pink.png',\n\t\t'/assets/メーターPNG/メーター10_red.png',\n\t\t'/assets/メーターPNG/メーター20_red.png',\n\t\t'/assets/メーターPNG/メーター30_red.png',\n\t\t'/assets/メーターPNG/メーター40_red.png',\n\t\t'/assets/メーターPNG/メーター50_red.png',\n\t\t'/assets/メーターPNG/メーター60_red.png',\n\t\t'/assets/メーターPNG/メーター70_red.png',\n\t\t'/assets/メーターPNG/メーター80_red.png',\n\t\t'/assets/メーターPNG/メーター90_red.png',\n\t\t'/assets/メーターPNG/メーター100_red.png'\n\t];\n\n\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\tlet sortById = 0;\n\n\t// 英単語の出題順の初期値を定義する。\n\tlet eachQuestionOrder = 0;\n\n\t// 表示するメーター初期値を定義する。\n\tlet bonusCountMeter = 0;\n\t// 表示するメーター最大値を定義する。\n\tconst bonusCountMeterMax = 50;\n\t// 表示するプレイ延長時間を定義する。\n\tconst displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n\tdisplayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n\t// メーター最大値に達した際の延長するプレイ時間を定義する。\n\tconst bonusAddPlayTime = 3000;\n\n\t// 合計正解数をカウントアップする際に+1を表示する。\n\tconst displayAddCorrectNum = document.getElementById(\"displayAddCorrectNum\");\n\tdisplayAddCorrectNum.className =  \"displayAddCorrectNum\";\n\t// 連続正解数をカウントアップする際に+1を表示する。\n\tconst displayAddConsecutiveCorrectNum = document.getElementById(\"displayAddConsecutiveCorrectNum\");\n\tdisplayAddConsecutiveCorrectNum.className =  \"displayAddConsecutiveCorrectNum\";\n\t// 最大連続正解数をカウントアップする際に+1を表示する。\n\tconst displayAddMaxConsecutiveCorrectNum = document.getElementById(\"displayAddMaxConsecutiveCorrectNum\");\n\tdisplayAddMaxConsecutiveCorrectNum.className =  \"displayAddMaxConsecutiveCorrectNum\";\n\n\n\t// メーターの初期値を表示する。\n\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t// ゲーム開始までをカウントダウン変数を定義する。\n\tlet countDownPopup = document.getElementById(\"countDownPopup\");\n\t// class属性を付与する。\n\tcountDownPopup.className = \"countDownPopup\";\n\t// ゲーム開始までをカウントダウン変数の初期値を定義する。\n\tlet countDownPopupNumber = 3;\n\t// ゲーム開始までをカウントダウン変数の初期値を表示する。\n\tcountDownPopup.textContent = countDownPopupNumber;\n\n\n\t// ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\tconst timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n\t// 以下、BGMありの場合、BGMを流す処理を定義する。---------------------------------------------\n\t// ------------------------------------------------------------------------------------\n\tif (bgmMode == \"BGMあり\") {\n\t\tlet bgmAudio = new Audio('/assets/bgm1.mp3');\n\t\tvar baseVol = 1;\n\t\tvar fadeSpeed = 100;\n\t\tbgmAudio.volume = 0;\n\t\tbgmAudio.play();\n\t\tvar start_func = setInterval(function() {\n\t\t\tbgmAudio.volume = bgmAudio.volume + (baseVol / 100);\n\t\t\tif(bgmAudio.volume >= baseVol - (baseVol / 100)) {\n\t\t\t\tbgmAudio.volume = baseVol;\n\t\t\t\tclearInterval(start_func);\n\t\t\t}\n\t\t}, fadeSpeed * baseVol / 100);\n\t};\n\t// 以上、BGMありの場合、BGMを流す処理を定義する。---------------------------------------------\n\t// ------------------------------------------------------------------------------------\n\n\n\n\n\t\t// ゲーム開始までをカウントダウンを実施する処理を定義する。\n\t\tfunction countDownTimeToStart(){\n\t\t\t\t// カウントダウン文字を１ずつ減らす。\n\t\t\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n\t\t\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\t\t\tif (countDownPopupNumber <= 0){\n\t\t\t\tclearInterval(timerIdToStart);\n\t\t\t\t// カウントダウンポップアップのクラスを変更し、非表示にする。\n\t\t\t\tcountDownPopup.className = \"countDownPopupAfterClose\";\n\t\t\t\ttypingPlayStart();\n\t\t\t\t} else {\n\t\t\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t\t\t}\n\t\t}\n\n\n\t\t// ゲームを開始する処理を定義する。\n\t\tfunction typingPlayStart(){\n\n\t\t\t\t// 表示する単語を定義する。\n\t\t\t\tconst displayWord = document.getElementById(\"displayWord\");\n\t\t\t\tdisplayWord.className =  \"displayWord\";\n\t\t\t\tconst displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n\t\t\t\tdisplayWordJapanese.className =  \"displayWordJapanese\";\n\t\t\t\tconst displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n\t\t\t\tdisplayWordAnnotation.className =  \"transparent\";\n\n\t\t\t\t// 表示する単語を一文字ずつに分ける変数を定義する。\n\t\t\t\tlet charArrayInDisplayWord =[];\n\n\t\t\t\t// 出題した英単語を格納する配列を定義する。\n\t\t\t\tlet allQuestionWords =[];\n\t\t\t\t// 出題したすべての英単語を格納する配列を定義する。\n\t\t\t\tlet allQuestionWordsList =[];\n\n\n\t\t\t\t// ゲーム終了を判定するフラグを定義する。\n\t\t\t\tlet playEndFlag = \"0\";\n\n\t\t\t\t// 「答えを見る」ボタン押下有無を判定するフラグを定義する。\n\t\t\t\tlet answerOpenFlag = \"0\";\n\n\t\t\t\t// プレイモード：タイムアタックですべての出題範囲に解答済み判定フラグを設定する。\n\t\t\t\tlet gameCompleteTimeAttackFlag = \"0\";\n\n\t\t\t\t// 問題を作成した時間を定義する。\n\t\t\t\tlet eachQuestionCreateTime = 0;\n\t\t\t\t// 問題を解答するのに要した時間を定義する。\n\t\t\t\tlet eachQuestionAnswerTime = 0;\n\n\t\t\t\t// 表示する単語を作成する。\n\t\t\t\tcreateDisplayWord();\n\n\t\t\t\t// プレイ開始時間を取得する。\n\t\t\t\tconst startTime = Date.now();\n\t\t\t\t// 表示する残りのプレイ可能時間を定義する。\n\t\t\t\tlet remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n\t\t\t\tremainPlayingTime.className =  \"remainPlayingTime\";\n\n\n\n\t\t\t\t// 表示するスタート時のプレイ可能時間を定義する。\n\t\t\t\t// プレイモード：タイムアタックの場合は5分とする。\n\t\t\t\tlet initialPlayingTimeMSec = 300000;\n\n\t\t\t\t// プレイモード：タイムアタックの場合は50分とする。\n\t\t\t\tif ( playMode == \"タイムアタック\") {\n\t\t\t\t\tinitialPlayingTimeMSec = 3000000;\n\t\t\t\t};\n\t\t\t\t// プレイモード：タイムアタックの場合、ゲームクリア後に合計プレイ時間表示する。\n\t\t\t\tlet totalPlayingTimeMSec = 0;\n\n\n\n\t\t\t\t// スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\t\t\t\tsetTimeout(countDownTime,0);\n\t\t\t\t// 1秒ごとにcountDownTimeを実施するように定義する。\n\t\t\t\tconst timerId = setInterval(countDownTime,1000);\n\n\t\t\t\t// 正解時に表示する丸を定義する。\n\t\t\t\tdocument.getElementById(\"circleImg\").src= '/assets/正解○.png';\n\t\t\t\tcircleImg.classList.add('transparent');\n\n\n\t\t\t\t// \"発音を聞く\"ボタンを表示する。\n\t\t\t\tlet pronounceAgainButton = document.getElementById(\"pronounceAgainButton\");\n\t\t\t\tpronounceAgainButton.innerHTML = \"発音を聞く\";\n\t\t\t\tpronounceAgainButton.className = \"pronounceAgainButton\";\n\t\t\t\tpronounceAgainButton.onclick = function() {\n\t\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t};\n\t\t\t\t// \"ヒントを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\t\t\t\tlet hintButton = document.getElementById(\"hintButton\");\n\t\t\t\thintButton.innerHTML = \"ヒントを見る\";\n\t\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\" ) {\n\t\t\t\t\thintButton.className = \"hintButton\";\n\t\t\t\t\thintButton.onclick = function() {\n\t\t\t\t\t\tcharArrayInDisplayWord[0].classList.remove('transparent');\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\thintButton.className = \"hintButtonPractice\";\n\t\t\t\t};\n\t\t\t\t// \"答えを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\t\t\t\tlet answerButton = document.getElementById(\"answerButton\");\n\t\t\t\tanswerButton.innerHTML = \"答えを見る\";\n\t\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\" ) {\n\t\t\t\t\tanswerButton.className = \"answerButton\";\n\t\t\t\t\tanswerButton.onclick = function() {\n\t\t\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 連続正解数を0に戻す。\n\t\t\t\t\t\ttotalConsecutiveNumCorrectNum = 0;\n\t\t\t\t\t\tdisplayConsecutiveCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t\t\t\t// メーターを初期値に戻す。\n\t\t\t\t\t\tbonusCountMeter = 0;\n\t\t\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\t\t\t\t\t\t// 「答えを見る」判定フラグを更新する。\n\t\t\t\t\t\tanswerOpenFlag = \"1\";\n\n\t\t\t\t\t};\n\t\t\t\t} else { // (プレイモード練習の時)\n\t\t\t\t\tanswerButton.className = \"answerButtonPractice\";\n\t\t\t\t};\n\n\t\t\t\t// \"最初からやり直す\"ボタンを表示する。\n\t\t\t\tconst restartButtonMidGame = document.getElementById(\"restartButtonMidGame\");\n\t\t\t\trestartButtonMidGame.classList.remove('transparent');\n\t\t\t\t// \"コース選択画面に戻る\"ボタンを表示する。\n\t\t\t\tconst courseSettingBackButtonMidGame = document.getElementById(\"courseSettingBackButtonMidGame\");\n\t\t\t\tcourseSettingBackButtonMidGame.classList.remove('transparent');\n\n\n\t\t\t\t// 以下、スコア定義---------------------------------------------------------------------------------------------------\n\t\t\t\t// -----------------------------------------------------------------------------------------------------------------\n\n\t\t\t\t// // プレイモード：練習・普通の場合はスコアを表示させる。\n\t\t\t\t// // プレイモード：タイムアタックはスコアを表示させない。\n\t\t\t\t// if ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t// // 表示するスコアを定義する。\n\t\t\t\t// let displayScoreEntire = document.getElementById(\"displayScoreEntire\");\n\t\t\t\t// displayScoreEntire.className =  \"displayScoreEntire\";\n\t\t\t\t// let displayScore = document.getElementById(\"displayScore\");\n\t\t\t\t// displayScore.className =  \"displayScore\";\n\t\t\t\t// let displayP = document.getElementById(\"displayP\");\n\t\t\t\t// displayP.className =  \"displayP\";\n\t\t\t\t// };\n\n\t\t\t\t// プレモード：練習・普通の場合のみ使用する。----------------------------\n\t\t\t\t// ---------------------------------------------------------------\n\t\t\t\t// // 合計スコアの初期値を定義する。\n\t\t\t\t// let totalScore = 0;\n\t\t\t\t// // スコアアップする基準を定義する。\n\t\t\t\t// const refTextLengthForCountUpLevel1 = 4;\n\t\t\t\t// const addScoreLevel1 = 50;\n\t\t\t\t// const addScoreLevel2 = 50;\n\t\t\t\t// ---------------------------------------------------------------\n\t\t\t\t// ---------------------------------------------------------------\n\n\n\t\t\t\t// 表示する正解数全体のクラス\n\t\t\t\tlet NumCorrectMidGamePlay = document.getElementById(\"NumCorrectMidGamePlay\");\n\t\t\t\tNumCorrectMidGamePlay.className =  \"NumCorrectMidGamePlay\";\n\n\t\t\t\t// 表示する正解数を定義する。\n\t\t\t\tlet displayNumCorrectWord = document.getElementById(\"displayNumCorrectWord\");\n\t\t\t\tdisplayNumCorrectWord.className =  \"displayNumCorrectWord\";\n\t\t\t\tdisplayNumCorrectWord.textContent = \"合計正解数\";\n\t\t\t\tlet displayNumCorrectNum = document.getElementById(\"displayNumCorrectNum\");\n\t\t\t\tdisplayNumCorrectNum.className =  \"displayNumCorrectNum\";\n\t\t\t\tlet totalNumCorrectNum = 0;\n\t\t\t\tdisplayNumCorrectNum.textContent = totalNumCorrectNum;\n\n\t\t\t\t// 表示する連続正解数を定義する。\n\t\t\t\tlet displayConsecutiveCorrectWord = document.getElementById(\"displayConsecutiveCorrectWord\");\n\t\t\t\tdisplayConsecutiveCorrectWord.className =  \"displayConsecutiveCorrectWord\";\n\t\t\t\tdisplayConsecutiveCorrectWord.textContent = \"連続正解数\";\n\t\t\t\tlet displayConsecutiveCorrectNum = document.getElementById(\"displayConsecutiveCorrectNum\");\n\t\t\t\tdisplayConsecutiveCorrectNum.className =  \"displayConsecutiveCorrectNum\";\n\t\t\t\tlet totalConsecutiveNumCorrectNum = 0;\n\t\t\t\tdisplayConsecutiveCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t\t// 表示する最高連続正解数を定義する。\n\t\t\t\tlet displayMaxConsecutiveCorrectWord = document.getElementById(\"displayMaxConsecutiveCorrectWord\");\n\t\t\t\tdisplayMaxConsecutiveCorrectWord.className =  \"displayMaxConsecutiveCorrectWord\";\n\t\t\t\tdisplayMaxConsecutiveCorrectWord.textContent = \"最高連続正解数\";\n\t\t\t\tlet displayMaxConsecutiveCorrectNum = document.getElementById(\"displayMaxConsecutiveCorrectNum\");\n\t\t\t\tdisplayMaxConsecutiveCorrectNum.className =  \"displayMaxConsecutiveCorrectNum\";\n\t\t\t\tlet totalMaxConsecutiveNumCorrectNum = 0;\n\t\t\t\tdisplayMaxConsecutiveCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n\n\t\t\t\t// 以上、スコア定義---------------------------------------------------------------------------------------------------\n\t\t\t\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t\t\t\t// タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\t\t\t\tdocument.addEventListener(`keydown`, keyDownCharCountUp);\n\n\n\n\t\t\t\t// 以下、表示する単語を作成する処理を定義する。-----------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction createDisplayWord(){\n\t\t\t\t\t// すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n\t\t\t\t\t// ギリギリで問題に正解した場合、○を表示した後、500m秒後にワードを生成する処理が走るため。\n\t\t\t\t\tif(playEndFlag === \"0\"){\n\n\t\t\t\t\t\t// 表示単語を初期化する。\n\t\t\t\t\t\tdisplayWord.textContent = \"\";\n\n\t\t\t\t\t\t// 問題を作成した時間を記録する。\n\t\t\t\t\t\teachQuestionCreateTime = Date.now();\n\n\t\t\t\t\t\t// 前回の問題に要した時間を初期値に戻す。\n\t\t\t\t\t\teachQuestionAnswerTime = 0;\n\n\t\t\t\t\t\t// 出題順の設定により、displayWordInListを変更\n\t\t\t\t\t\tif (questionOrderMode == \"番号順\") {\n\t\t\t\t\t\t\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\t\t\t\t\t\t\tdisplayWordInList = wordList[sortById];\n\t\t\t\t\t\t\tsortById++;\n\t\t\t\t\t\t\t// sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\t\t\t\t\t\t\tif (sortById >= wordList.length) {\n\t\t\t\t\t\t\t\tsortById = 0;\n\t\t\t\t\t\t\t\t// プレイモード：タイムアタックの場合、次の問題に正解した時点でゲーム終了とする。\n\t\t\t\t\t\t\t\tif ( playMode == \"タイムアタック\" ) {\n\t\t\t\t\t\t\t\t\t// フラグを1に更新する。\n\t\t\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"1\";\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\n\n\t\t\t\t\t\t} else { // 出題順がランダムの場合\n\t\t\t\t\t\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\t\t\t\t\t\tlet randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\n\t\t\t\t\t\t\t// 表示する単語をランダムで選定する。\n\t\t\t\t\t\t\tdisplayWordInList = wordList[randomIntegerInTotalWordList];\n\n\t\t\t\t\t\t\t// プレイモード：タイムアタックの場合は、wordListから表示単語を削除する。\n\t\t\t\t\t\t\tif ( playMode == \"タイムアタック\" ) {\n\t\t\t\t\t\t\t\t// 同じ問題を２度出題しないように、一度出題した問題はwordListから削除する。\n\t\t\t\t\t\t\t\twordList.splice( randomIntegerInTotalWordList, 1);\n\t\t\t\t\t\t\t\t// wordList.length == 0になった場合、次の問題に正解した時点でゲーム終了とする。\n\t\t\t\t\t\t\t\tif (wordList.length == 0){\n\t\t\t\t\t\t\t\t\t// フラグを1に更新する。\n\t\t\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"1\";\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 前回出題した英単語を allQuestionWords から削除し、初期値に戻す。\n\t\t\t\t\t\tallQuestionWords = [];\n\t\t\t\t\t\t// 問題の出題順を+1する。\n\t\t\t\t\t\teachQuestionOrder = eachQuestionOrder + 1;\n\t\t\t\t\t\t// 出題した英単語displayWordInList を allQuestionWords に格納する。\n\t\t\t\t\t\tallQuestionWords.push(eachQuestionOrder, displayWordInList.id,\"▷\" ,displayWordInList.eng_word, displayWordInList.jap_trans_1, \"未解答\", \"-\");\n\n\n\t\t\t\t\t\t// 英単語を生成した際に、発音させる。（発音ありの場合のみ）\n\t\t\t\t\t\tif (pronounceMode == \"発音あり\") {\n\t\t\t\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 表示する単語の日本語訳を表示させる。\n\t\t\t\t\t\tdisplayWordJapanese.textContent = displayWordInList.jap_trans_1;\n\n\t\t\t\t\t\t// 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n\t\t\t\t\t\t// プレイモード練習では答えを表示しているため処理不要\n\t\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\t\t// 前の問題に注釈がある場合消す。\n\t\t\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t\t\t// ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\t\t\t\t\t\t\tlet duplicateWords = wordList.filter(duplicateWord => duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1);\n\t\t\t\t\t\t\t// 日本語訳が重複している他の英単語がある場合\n\t\t\t\t\t\t\tif (duplicateWords.length > 1) {\n\t\t\t\t\t\t\t\t// 重複している英単語の配列（この時点では答えを含む）を定義する。\n\t\t\t\t\t\t\t\tlet duplicateWordsList = [];\n\t\t\t\t\t\t\t\tfor (let i = 0; i < duplicateWords.length; i++) {\n\t\t\t\t\t\t\t\t\t// 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n\t\t\t\t\t\t\t\t\tif (duplicateWords[i].id !== displayWordInList.id){\n\t\t\t\t\t\t\t\t\t\tduplicateWordsList.push(duplicateWords[i].eng_word);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tdisplayWordAnnotation.textContent = `※${duplicateWordsList}以外`;\n\t\t\t\t\t\t\t\tdisplayWordAnnotation.className = \"displayWordAnnotation\";\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t\t\t\t\t// spanタグで閉じた単語を表示する。\n\t\t\t\t\t\tcharArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n\t\t\t\t\t\t\t// spanタグを作成する。\n\t\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\t\t// spanタグに一文字を挿入する。\n\t\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\t\t// 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、タイムアタックのときのみ）\n\t\t\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\t\t\tspanValue.className = \"transparent\";\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\t\t\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、表示する単語を作成する処理を定義する。-----------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction countDownTime(){\n\t\t\t\t\tconst currentTime = Date.now();\n\t\t\t\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\t\t\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\t\t\t\tconst remainAllSec = Math.ceil(remainMSec/1000);\n\t\t\t\t\tconst remainMin = Math.floor(remainAllSec / 60);\n\t\t\t\t\tconst remainSec = Math.ceil(remainAllSec % 60);\n\t\t\t\t\tlet  remainSecLabel = `残り${(`0${remainMin}` ).slice( -2 )}分${(`0${remainSec}` ).slice( -2 )}秒`;\n\n\t\t\t\t\t// 残り時間が0になった場合の処理を定義する。\n\t\t\t\t\tif (remainMSec <= 0){\n\t\t\t\t\t\tgameClose();\n\t\t\t\t\t}\n\t\t\t\t\t// 残りプレイ可能時間を更新する。\n\t\t\t\t\tremainPlayingTime.textContent = remainSecLabel;\n\n\t\t\t\t\t// プレイモード：タイムアタックの場合は、使用時間を最後に表示する。\n\t\t\t\t\tif (playMode == \"タイムアタック\"){\n\t\t\t\t\t\ttotalPlayingTimeMSec = diffBetweenCurrentTimeAndStartTime;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、ゲーム終了時の処理を定義する。------------------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction gameClose(){\n\t\t\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\t\t\tplayEndFlag = \"1\";\n\n\t\t\t\t\t// プレイ時間のカウントダウンを止める。\n\t\t\t\t\tclearInterval(timerId);\n\n\t\t\t\t\t// 最後に出題していた英単語を allQuestionWordsList に格納する。\n\t\t\t\t\t// ただし、プレイモード：タイムアタックでクリアしている場合、出題している単語はないため処理不要。\n\t\t\t\t\t// また、終了直前で正解した場合、次の問題生成前に本処理に入り、最後に正解した問題が２つ表示されるため、\"未解答\"であることも条件に加える。\n\t\t\t\t\tif ( !( playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"2\")\n\t\t\t\t\t\t&& allQuestionWords[allQuestionWords.length - 2] == \"未解答\") {\n\t\t\t\t\t\t// 出題したすべての英単語リストに追加する。\n\t\t\t\t\t\tallQuestionWordsList.push(allQuestionWords);\n\t\t\t\t\t};\n\n\t\t\t\t\t// 残り時間の表示を消す。\n\t\t\t\t\tremainPlayingTime.className = \"transparent\";\n\n\t\t\t\t\t// 現在のスコア（左上）の表示を消す。\n\t\t\t\t\t// プレイモード：練習・普通の場合のみ\n\t\t\t\t\t// if ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\t// displayScoreEntire.className = \"transparent\";\n\t\t\t\t\t// displayScore.className = \"transparent\";\n\t\t\t\t\t// displayP.className = \"transparent\";\n\t\t\t\t\t// };\n\n\t\t\t\t\t//正解数全体のクラスを非表示にする。\n\t\t\t\t\tNumCorrectMidGamePlay.className = \"transparent\";\n\t\t\t\t\t// 正解数の表示を消す。\n\t\t\t\t\tdisplayNumCorrectWord.className = \"transparent\";\n\t\t\t\t\tdisplayNumCorrectNum.className = \"transparent\";\n\t\t\t\t\t// 連続正解数の表示を消す。\n\t\t\t\t\tdisplayConsecutiveCorrectWord.className = \"transparent\";\n\t\t\t\t\tdisplayConsecutiveCorrectNum.className = \"transparent\";\n\t\t\t\t\t// 最高連続正解数の表示を消す。\n\t\t\t\t\tdisplayMaxConsecutiveCorrectWord.className = \"transparent\";\n\t\t\t\t\tdisplayMaxConsecutiveCorrectNum.className = \"transparent\";\n\t\t\t\t\t// 問題の英単語の表示を消す。\n\t\t\t\t\tdisplayWord.textContent =\"\";\n\t\t\t\t\t// 解答の日本語の表示を消す。\n\t\t\t\t\tdisplayWordJapanese.textContent =\"\";\n\n\t\t\t\t\t// 出題や解答を表示していたdivを消す。\n\t\t\t\t\tconst btnWrapperPlay = document.getElementById(\"btnWrapperPlay\");\n\t\t\t\t\tbtnWrapperPlay.className = \"transparent\";\n\n\t\t\t\t\t// \"発音を聞く\"ボタンを消す。\n\t\t\t\t\tpronounceAgainButton.className = \"transparent\";\n\t\t\t\t\t// \"ヒントを見る\"ボタンを消す。\n\t\t\t\t\thintButton.className = \"transparent\";\n\t\t\t\t\t// \"答えを見る\"ボタンを消す。\n\t\t\t\t\tanswerButton.className = \"transparent\";\n\t\t\t\t\t// 注釈を消す。（プレイモード普通、タイムアタックの時のみ）\n\t\t\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t};\n\t\t\t\t\t// \"最初からやり直す\"ボタンを消す。\n\t\t\t\t\trestartButtonMidGame.className = \"transparent\";\n\t\t\t\t\t// \"コース選択画面に戻る\"ボタンを消す。\n\t\t\t\t\tcourseSettingBackButtonMidGame.className = \"transparent\";\n\n\t\t\t\t\t// 正解時に表示される○の画像を消す。\n\t\t\t\t\tcircleImg.className = \"transparent\";\n\n\t\t\t\t\t// ゲーム終了後に、\"お疲れ様でした\"を表示する。\n\t\t\t\t\tconst closePopupClear = document.getElementById(\"closePopupClear\");\n\t\t\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\t\t\tclosePopup.textContent =\"終了\";\n\t\t\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t\t\t// ゲーム終了後に、問題数、合計正解数、最大連続正解数を表示する。\n\t\t\t\t\tconst closePopupTotalQuestionNum = document.getElementById(\"closePopupTotalQuestionNum\");\n\t\t\t\t\tclosePopupTotalQuestionNum.className = \"closePopupTotalQuestionNum\";\n\t\t\t\t\tconst closePopupFinalCorrectNum = document.getElementById(\"closePopupFinalCorrectNum\");\n\t\t\t\t\tclosePopupFinalCorrectNum.className = \"closePopupFinalCorrectNum\";\n\t\t\t\t\tconst closePopupFinalMaxConsecutiveCorrectNum = document.getElementById(\"closePopupFinalMaxConsecutiveCorrectNum\");\n\t\t\t\t\tclosePopupFinalMaxConsecutiveCorrectNum.className = \"closePopupFinalMaxConsecutiveCorrectNum\";\n\n\t\t\t\t\t// もう一度ボタンを定義する。\n\t\t\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t\t\t// 戻るボタンを定義する。\n\t\t\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\n\t\t\t\t\t// 問題を振り返るボタンを定義する。\n\t\t\t\t\tconst checkQuestions = document.getElementById(\"checkQuestions\");\n\t\t\t\t\t// 出題問題リスト表示を定義する。\n\t\t\t\t\tconst allQuestionsListEntireScr = document.getElementById(\"allQuestionsListEntireScr\");\n\t\t\t\t\tconst allQuestionsList = document.getElementById(\"allQuestionsList\");\n\n\t\t\t\t\t// 出題した問題を表にする。\n\t\t\t\t\t// 出題した問題の数だけ処理を実施する。\n\t\t\t\t\tallQuestionWordsList.forEach((allQuestionWords) => {\n\t\t\t\t\t  const tr = document.createElement(\"tr\");\n\t\t\t\t\t  allQuestionsList.appendChild(tr);\n\t\t\t\t\t  // 問題ごとにobjArrayを変え、表に各項目を入れていく。\n\t\t\t\t\t  const objArray = Object.entries(allQuestionWords);\n\t\t\t\t\t  objArray.forEach((arr) => {\n\t\t\t\t\t\tconst td = document.createElement(\"td\");\n\t\t\t\t\t\ttd.textContent = arr[1];\n\t\t\t\t\t\tif (arr[1] == \"▷\") { // ▷を押下した時\n\t\t\t\t\t\t\ttd.onclick = function() {\n\t\t\t\t\t\t\t\tpronounce(objArray[3][1]); // その行の英単語を発音させる。\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttr.appendChild(td);\n\t\t\t\t\t  });\n\t\t\t\t\t});\n\n\t\t\t\t\t// 出題した出題問題リストポップアップを表示した後の「閉じる」ボタンを定義する。\n\t\t\t\t\tconst closeAllQuestionsList = document.getElementById(\"closeAllQuestionsList\");\n\n\t\t\t\t\t// 「問題を振り返る」ボタン押下で出題問題リストポップアップを開く。\n\t\t\t\t\tcheckQuestions.onclick = function() {\n\t\t\t\t\t\t// メーターを非表示にする。\n\t\t\t\t\t\tdocument.getElementById(\"meterImg\").className = \"transparent\";\n\t\t\t\t\t\t// 出題問題リストを表示させる。\n\t\t\t\t\t\tallQuestionsListEntireScr.className = \"allQuestionsListEntireScr\";\n\t\t\t\t\t\tcloseAllQuestionsList.className = \"closeAllQuestionsList\";\n\t\t\t\t\t};\n\t\t\t\t\t// 「閉じる」ボタン押下で出題問題リストポップアップを閉じる。\n\t\t\t\t\t\tcloseAllQuestionsList.onclick = function() {\n\t\t\t\t\t\t// メーターを表示にさせる。\n\t\t\t\t\t\tdocument.getElementById(\"meterImg\").className = \"meter\";\n\t\t\t\t\t\t// 出題問題リストを非表示にする。\n\t\t\t\t\t\tallQuestionsListEntireScr.className = \"transparent\";\n\t\t\t\t\t\tcloseAllQuestionsList.className = \"transparent\";\n\t\t\t\t\t};\n\n\n\t\t\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t// 得点の表示\n\t\t\t\t\t// プレイモード：練習・普通の場合は、スコアを表示する。\n\t\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\t\tclosePopupClear.textContent = \"お疲れ様でした！\";\n\t\t\t\t\t\tclosePopupClear.className = \"closePopupClear\";\n\t\t\t\t\t\tclosePopup.textContent = `あなたの成績は以下の通りです!`;\n\t\t\t\t\t\t//closePopup.textContent = `あなたの得点は ${totalScore.toLocaleString()} 点です!`;\n\t\t\t\t\t\tclosePopup.className = \"endResultPopupNoClear\";\n\t\t\t\t\t} else { // プレイモード：タイムアタックの場合は、かかった時間を表示する。\n\t\t\t\t\t\t\t// ただし、すべての出題範囲に解答できた場合のみ。\n\t\t\t\t\t\tif ( gameCompleteTimeAttackFlag == \"2\") {\n\t\t\t\t\t\t\tconst remainAllSecTimeAttack = Math.ceil(totalPlayingTimeMSec/1000);\n\t\t\t\t\t\t\tconst remainMinTimeAttack = Math.floor(remainAllSecTimeAttack / 60);\n\t\t\t\t\t\t\tconst remainSecTimeAttack = Math.ceil(remainAllSecTimeAttack % 60);\n\t\t\t\t\t\t\tclosePopupClear.textContent = \"お疲れ様でした！ゲームクリアです！\";\n\t\t\t\t\t\t\tclosePopupClear.className = \"closePopupClear\";\n\t\t\t\t\t\t\tclosePopup.textContent = `あなたがかかった時間は ${(`0${remainMinTimeAttack}` ).slice( -2 )}分${(`0${remainSecTimeAttack}` ).slice( -2 )}秒 です!`;\n\t\t\t\t\t\t\tclosePopup.className = \"endResultPopupClear\";\n\t\t\t\t\t\t} else { // 時間切れの場合は、クリアできなかったと表示する。\n\t\t\t\t\t\t\tclosePopup.textContent = `残念ながらクリアできませんでした。`;\n\t\t\t\t\t\t\tclosePopup.className = \"endResultPopupNoClear\";\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// 最終結果として、問題数、合計正解数、最高連続正解数を表示する。\n\t\t\t\t\tclosePopupTotalQuestionNum.textContent = `出題数 : ${eachQuestionOrder}`;\n\t\t\t\t\tclosePopupFinalCorrectNum.textContent = `${displayNumCorrectWord.textContent} : ${totalNumCorrectNum}`;\n\t\t\t\t\tclosePopupFinalMaxConsecutiveCorrectNum.textContent = `${displayMaxConsecutiveCorrectWord.textContent} : ${totalMaxConsecutiveNumCorrectNum}`;\n\n\t\t\t\t\t// もう一度ボタンの表示（transparentを消して表示させる）\n\t\t\t\t\trestartBtn.classList.remove('transparent');\n\t\t\t\t\t// 戻るボタンの表示（transparentを消して表示させる）\n\t\t\t\t\tbackBtn.classList.remove('transparent');\n\t\t\t\t\t// 問題を振り返るボタンの表示\n\t\t\t\t\tcheckQuestions.className = \"checkQuestions\";\n\t\t\t\t\tcheckQuestions.textContent =\"問題を振り返る\";\n\t\t\t\t\t},2000);\n\t\t\t\t};\n\t\t\t\t// 以上、ゲーム終了時の処理を定義する。------------------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\t// function countUpScore(){\n\t\t\t\t// if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\t\t// \taddPoint = addScoreLevel1;\n\t\t\t\t// } else {\n\t\t\t\t// \taddPoint = addScoreLevel2;\n\t\t\t\t// };\n\t\t\t\t// \t// 合計得点を定義する。\n\t\t\t\t// \ttotalScore = totalScore + addPoint;\n\t\t\t\t// \tdisplayScore.setAttribute('data-num', totalScore);\n\n\t\t\t\t// \tvar countElm = $('.displayScore'),\n\t\t\t\t// \tcountSpeed = 10;\n\n\t\t\t\t// \tcountElm.each(function(){\n\t\t\t\t// \t\tvar self = $(this),\n\t\t\t\t// \t\t// 合計得点を定義する。\n\t\t\t\t// \t\tcountMax = self.attr('data-num'),\n\t\t\t\t// \t\tthisCount = self.text(),\n\t\t\t\t// \t\tcountTimer;\n\t\t\t\t// \t\tcountUpAnime();\n\n\t\t\t\t// \t\t// 数値をカウントアップするアニメーションを定義する。\n\t\t\t\t// \t\tfunction countUpAnime(){\n\t\t\t\t// \t\t\tcountTimer = setInterval(function(){\n\t\t\t\t// \t\t\t\tvar countNext = thisCount++;\n\t\t\t\t// \t\t\t\tself.text(countNext);\n\t\t\t\t// \t\t\t\tif(countNext == countMax){\n\t\t\t\t// \t\t\t\t\tclearInterval(countTimer);\n\t\t\t\t// \t\t\t\t}\n\t\t\t\t// \t\t\t},countSpeed);\n\t\t\t\t// \t\t};\n\t\t\t\t// \t});\n\t\t\t\t// };\n\t\t\t\t// 以上、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、正解数をカウントアップする処理を定義する。--------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction countUpCorrectNum(){\n\t\t\t\t\t// 合計正解数のカウントアップ\n\t\t\t\t\ttotalNumCorrectNum = totalNumCorrectNum + 1;\n\t\t\t\t\tdisplayNumCorrectNum.textContent = totalNumCorrectNum;\n\t\t\t\t\t// 合計正解数、連続正解数、最高連続正解数をカウントアップする+1を定義。\n\t\t\t\t\tdisplayAddCorrectNum.textContent = \"+1\";\n\t\t\t\t\t// 合計正解数、連続正解数、最高連続正解数+1をフェードアウトする。\n\t\t\t\t\tdisplayAddCorrectNum.classList.add('fadeout');\n\t\t\t\t\t// fadeoutのclassを取り除くことで、2回目以降も+1が表示されるようにする。\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tdisplayAddCorrectNum.textContent = \"\";\n\t\t\t\t\t\tdisplayAddCorrectNum.classList.remove('fadeout');\n\t\t\t\t\t}, 1000);\n\n\t\t\t\t\t// 連続正解数のカウントアップ\n\t\t\t\t\ttotalConsecutiveNumCorrectNum = totalConsecutiveNumCorrectNum + 1;\n\t\t\t\t\tdisplayConsecutiveCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\t\t\t\t\t// 連続正解数をカウントアップする+1を定義。\n\t\t\t\t\tdisplayAddConsecutiveCorrectNum.textContent = \"+1\";\n\t\t\t\t\t// 連続正解数+1をフェードアウトする。\n\t\t\t\t\tdisplayAddConsecutiveCorrectNum.classList.add('fadeout');\n\t\t\t\t\t// fadeoutのclassを取り除くことで、2回目以降も+1が表示されるようにする。\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tdisplayAddConsecutiveCorrectNum.textContent = \"\";\n\t\t\t\t\t\tdisplayAddConsecutiveCorrectNum.classList.remove('fadeout');\n\t\t\t\t\t}, 1000);\n\n\t\t\t\t\t// 最高連続正解数のカウントアップ\n\t\t\t\t\tif (totalMaxConsecutiveNumCorrectNum < totalConsecutiveNumCorrectNum) {\n\t\t\t\t\t\ttotalMaxConsecutiveNumCorrectNum = totalMaxConsecutiveNumCorrectNum + 1;\n\t\t\t\t\t\tdisplayMaxConsecutiveCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n\t\t\t\t\t\t// 最高連続正解数をカウントアップする+1を定義。\n\t\t\t\t\t\tdisplayAddMaxConsecutiveCorrectNum.textContent = \"+1\";\n\t\t\t\t\t\t// 最高連続正解数+1をフェードアウトする。\n\t\t\t\t\t\tdisplayAddMaxConsecutiveCorrectNum.classList.add('fadeout');\n\t\t\t\t\t\t// fadeoutのclassを取り除くことで、2回目以降も+1が表示されるようにする。\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\tdisplayAddMaxConsecutiveCorrectNum.textContent = \"\";\n\t\t\t\t\t\t\tdisplayAddMaxConsecutiveCorrectNum.classList.remove('fadeout');\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、正解数をカウントアップする処理を定義する。--------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t} else if (keyDownChar.key === \"e\"\n\t\t\t\t\t\t\t\t&& charArrayInDisplayWord[0].textContent === \"é\"\n\t\t\t\t\t\t\t\t&& playEndFlag===\"0\") {\n\t\t\t\t\t\t// éの場合は例外的にeでOKとする。\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t} else if (playEndFlag===\"0\") {\n\t\t\t\t\t\t// タイプミス音を発生させる。\n\t\t\t\t\t\ttypeMissAudio();\n\t\t\t\t\t} else {\n\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction correctTyping(){\n\t\t\t\t\t// タイプ音を定義する。\n\t\t\t\t\t// タイプ音ありの場合のみ\n\t\t\t\t\tif (typeAudioMode == \"タイプ音あり\") {\n\t\t\t\t\t\tlet typeAudioMode = new Audio('/assets/typeAudio.mp3');\n\t\t\t\t\t\t// タイプ音を発生させる。\n\t\t\t\t\t\ttypeAudioMode.volume = 0.3;\n\t\t\t\t\t\ttypeAudioMode.play();\n\t\t\t\t\t};\n\n\n\t\t\t\t\t// 文字色を変更する。\n\t\t\t\t\t// ただし、chromeの場合かつ、\"f\"が２つ並んでいる場合、別のclassを適応させる。\n\t\t\t\t\tif (agent.indexOf(\"chrome\") != -1\n\t\t\t\t\t\t&& charArrayInDisplayWord[0].textContent == \"f\"\n\t\t\t\t\t\t&& charArrayInDisplayWord[1].textContent == \"f\"\n\t\t\t\t\t\t&& addHalfRedFlag == \"0\") {\n\t\t\t\t\t\tcharArrayInDisplayWord[0].className = \"addHalfRed\";\n\t\t\t\t\t\taddHalfRedFlag = \"1\";\n\t\t\t\t\t} else if (agent.indexOf(\"chrome\") != -1 // \"addHalfRed適応後に、２つ目の\"f\"押下でadd_redに戻す。\"f\"が３つ並ぶことはないという前提。\n\t\t\t\t\t\t&& charArrayInDisplayWord[0].textContent == \"f\"\n\t\t\t\t\t\t&& charArrayInDisplayWord[1].textContent == \"f\"\n\t\t\t\t\t\t&& addHalfRedFlag == \"1\"){\n\t\t\t\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t\t\t\t// 一致した文字を配列から削除する。charArrayInDisplayWord[0]の\"f\"とcharArrayInDisplayWord[1]の\"f\"を削除する。\n\t\t\t\t\t\tcharArrayInDisplayWord.shift();\n\t\t\t\t\t\tcharArrayInDisplayWord.shift();\n\t\t\t\t\t\taddHalfRedFlag = \"0\";\n\t\t\t\t\t}else { // chromeではない場合、もしくは\"f\"が２つ並んでいない場合\n\t\t\t\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t\t\t\t// 一致した文字を配列から削除する。\n\t\t\t\t\t\tcharArrayInDisplayWord.shift();\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// メーターを更新する。\n\t\t\t\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t\t\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\t\t\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\t\t\t\tbonusCountMeter = 0;\n\t\t\t\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\t\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\t\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\t\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\t\t\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t};\n\t\t\t\t\t// 更新したメーターを表示する。\n\t\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\t\t\t\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\t\t\t\tif(charArrayInDisplayWord.length === 0) {\n\t\t\t\t\t\t// 正解音を定義する。\n\t\t\t\t\t\t// 正解音ありの場合のみ\n\t\t\t\t\t\tif (correctAudioMode == \"正解音あり\") {\n\t\t\t\t\t\t\tlet correctAudio = new Audio('/assets/correctAudio.mp3');\n\t\t\t\t\t\t\t// 正解した場合、効果音を発生させる。\n\t\t\t\t\t\t\tcorrectAudio.volume = 0.3;\n\t\t\t\t\t\t\tcorrectAudio.play();\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// 「答えを見る」を押していなければ、スコアと正解数をカウントアップする。\n\t\t\t\t\t\tif (answerOpenFlag == \"0\"){\n\t\t\t\t\t\t\t// プレイモード：練習・普通の場合のみ、スコアアップする。\n\t\t\t\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\t\t\t\t//countUpScore(); // スコアアップ処理を不要とする。\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcountUpCorrectNum();\n\n\t\t\t\t\t\t\t// 「答えを見る」を押していない場合、正解として記録する。\n\t\t\t\t\t\t\tallQuestionWords.splice(allQuestionWords.length - 2, 1, \"正解\");\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// 「答えを見る」を押していれば、フラグを0に戻す。\n\t\t\t\t\t\t\tanswerOpenFlag = \"0\";\n\n\t\t\t\t\t\t\t// 「答えを見る」を押している場合、不正解として記録する。\n\t\t\t\t\t\t\tallQuestionWords.splice(allQuestionWords.length - 2, 1, \"不正解\");\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 解答するまでにかかった時間を記録する。\n\t\t\t\t\t\teachQuestionAnswerTime = Math.ceil((Date.now() - eachQuestionCreateTime)/1000);\n\t\t\t\t\t\tlet eachQuestionAnswerMin = Math.floor(eachQuestionAnswerTime / 60);\n\t\t\t\t\t\tlet eachQuestionAnswerSec = Math.ceil(eachQuestionAnswerTime % 60);\n\t\t\t\t\t\tallQuestionWords.splice(allQuestionWords.length - 1, 1, `${(`0${eachQuestionAnswerMin}` ).slice( -2 )}:${(`0${eachQuestionAnswerSec}` ).slice( -2 )}`);\n\n\n\t\t\t\t\t\t// 出題したすべての英単語リストに追加する。\n\t\t\t\t\t\tallQuestionWordsList.push(allQuestionWords);\n\n\t\t\t\t\t\t// 丸を表示、答えを表示するなどのアニメーションを実施する。\n\t\t\t\t\t\tcircleImg.classList.add('circle');\n\t\t\t\t\t\tcircleImg.classList.remove('transparent');\n\t\t\t\t\t\tsetTimeout(createDisplayWord,500);\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\tcircleImg.classList.add('transparent');\n\t\t\t\t\t\t\tcircleImg.classList.remove('circle');\n\t\t\t\t\t\t}, 500);\n\n\t\t\t\t\t\tif (playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") {\n\t\t\t\t\t\t\t// プレイモード：タイムアタックの場合、最後の問題に解答できた瞬間にフラグを２に更新する。\n\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"2\";\n\t\t\t\t\t\t\tgameClose();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction typeMissAudio(){\n\t\t\t\t\t// ミス音を定義する。\n\t\t\t\t\t// ミス音ありの場合のみ\n\t\t\t\t\tif (incorrectAudioMode == \"ミス音あり\") {\n\t\t\t\t\t\tlet incorrectAudio = new Audio('/assets/incorrectAudio.mp3');\n\t\t\t\t\t\t// ミスの場合、効果音を発生させる。\n\t\t\t\t\t\tincorrectAudio.volume = 0.3;\n\t\t\t\t\t\tincorrectAudio.play();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction pronounce(eng_word){\n\t\t\t\t\t\t// résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n\t\t\t\t\t\tif (eng_word == \"résumé\"){\n\t\t\t\t\t\t\teng_word = \"rezumei\";\n\t\t\t\t\t\t};\n\t\t\t\t\tlet pronunciation = new Audio('/assets/発音/'+ eng_word + '.mp3');\n\t\t\t\t\tpronunciation.play();\n\t\t\t\t};\n\t\t\t\t// 以上、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\t\t\t};\n};\n"]},"metadata":{},"sourceType":"module"}