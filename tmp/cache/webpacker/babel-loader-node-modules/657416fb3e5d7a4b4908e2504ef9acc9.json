{"ast":null,"code":"window.addEventListener('load', function () {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = gon.wordListAll; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10.png', '/assets/メーターPNG/メーター20.png', '/assets/メーターPNG/メーター30.png', '/assets/メーターPNG/メーター40.png', '/assets/メーターPNG/メーター50.png', '/assets/メーターPNG/メーター60.png', '/assets/メーターPNG/メーター70.png', '/assets/メーターPNG/メーター80.png', '/assets/メーターPNG/メーター90.png', '/assets/メーターPNG/メーター100.png']; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 10; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    countDownPopupNumber = countDownPopupNumber - 1;\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 5000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n      var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n\n      charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].eng_word.split(\"\").map(function (value) {\n        // spanタグを作成する。\n        var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n        spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"00\".concat(remainSec).slice(-3), \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent = \"\";\n        displayWord.textContent = \"\"; // ゲーム終了後にplayEndFlagを1に更新する。\n\n        playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n          restartBtn.innerHTML = \"<a href='../'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='../'>タイトルに戻る</a>\";\n          backBtn.className = \"backBtn\";\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    } // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = totalScore.toLocaleString();\n      return totalScore;\n    } // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        // 文字色を変更する。\n        charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n        bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n        charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n        if (charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord(); // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n        if (bonusCountMeter >= bonusCountMeterMax) {\n          bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n          initialPlayingTimeMSec = initialPlayingTimeMSec + 3000;\n        }\n      } else if (playEndFlag === \"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountMeter = 0;\n      } // 更新したメーターを表示する。\n\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n  }\n});","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay.js"],"names":["window","addEventListener","wordList","gon","wordListAll","imgArray","bonusCountMeter","bonusCountMeterMax","document","getElementById","src","countDownPopup","className","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","remove","typingPlayStart","displayWord","charArrayInDisplayWord","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","playEndFlag","randomIntegerInTotalWordList","Math","floor","random","length","eng_word","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","slice","closePopup","backBtn","restartBtn","toLocaleString","innerHTML","countUpScore","addPoint","keyDownChar","key","shift"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  const wordList = gon.wordListAll;\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10.png',\n    '/assets/メーターPNG/メーター20.png',\n    '/assets/メーターPNG/メーター30.png',\n    '/assets/メーターPNG/メーター40.png',\n    '/assets/メーターPNG/メーター50.png',\n    '/assets/メーターPNG/メーター60.png',\n    '/assets/メーターPNG/メーター70.png',\n    '/assets/メーターPNG/メーター80.png',\n    '/assets/メーターPNG/メーター90.png',\n    '/assets/メーターPNG/メーター100.png'\n  ]\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 10;\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n    countDownPopupNumber = countDownPopupNumber - 1;\n    if (countDownPopupNumber <= 0){\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  }\n\n\n  // ゲームを開始する処理を定義する。\n  function typingPlayStart(){\n\n    // 表示する単語を定義する。\n    const displayWord = document.getElementById(\"displayWord\");\n    displayWord.className =  \"displayWord\";\n    // 表示する単語を一文字ずつに分ける変数を定義する。\n    let charArrayInDisplayWord =[];\n    // 表示する単語を作成する。\n    createDisplayWord();\n\n    // プレイ開始時間を取得する。\n    const startTime = Date.now();\n    // 表示する残りのプレイ可能時間を定義する。\n    let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className =  \"remainPlayingTime\";\n    // 表示するスタート時のプレイ可能時間を定義する。\n    let initialPlayingTimeMSec = 5000;\n    // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n    setTimeout(countDownTime,0);\n    // 1秒ごとにcountDownTimeを実施するように定義する。\n    const timerId = setInterval(countDownTime,1000);\n\n    // 表示するスコアを定義する。\n    let displayScore = document.getElementById(\"displayScore\");\n    displayScore.className =  \"displayScore\";\n    // 合計スコアの初期値を定義する。\n    let totalScore = 0;\n    // 表示するスコアに初期値を定義する。\n    displayScore.textContent = totalScore;\n    // スコアアップする基準を定義する。\n    const refTextLengthForCountUpLevel1 = 4;\n    const addScoreLevel1 = 1000;\n    const addScoreLevel2 = 3000;\n\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n    document.addEventListener(`keydown`, keyDownCharCountUp);\n\n    // ゲーム終了を判定するフラグを定義する。\n    let playEndFlag = \"0\";\n\n    // 表示する単語を作成する処理を定義する。\n    function createDisplayWord(){\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\";\n      // 0〜textListsの総数間で整数値をランダムで算出する。\n      let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n      // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n      charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].eng_word.split(\"\").map(function(value){\n        // spanタグを作成する。\n        let spanValue = document.createElement(\"span\");\n        // spanタグに一文字を挿入する。\n        spanValue.textContent = value;\n        // 表示する単語にspanタグで閉じた一文字を追加する。\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    }\n\n    // プレイ時間をカウントダウンする処理を定義する。\n    function countDownTime(){\n      const currentTime = Date.now();\n      const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      const remainSec = Math.ceil(remainMSec/1000);\n      let  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n      if (remainMSec <= 0){\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent =\"\";\n        displayWord.textContent =\"\";\n        // ゲーム終了後にplayEndFlagを1に更新する。\n        playEndFlag = \"1\";\n        // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n        const closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent =\"終了\";\n        closePopup.className = \"closePopup\";\n        // 戻るボタンを定義する。\n        const backBtn = document.getElementById(\"backBtn\");\n        // もう一度ボタンを定義する。\n        const restartBtn = document.getElementById(\"restartBtn\");\n        // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n        setTimeout(function(){\n          closePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n          closePopup.className = \"endResultPopup\";\n          restartBtn.innerHTML = \"<a href='../'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='../'>タイトルに戻る</a>\";\n          backBtn.className = \"backBtn\";\n        },2000);\n      }\n      // 残りプレイ可能時間を更新する。\n      remainPlayingTime.textContent = remainSecLabel;\n    }\n\n    // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n    function countUpScore(){\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = totalScore.toLocaleString();\n      return totalScore;\n    }\n\n    // タイプした文字が表示文字と一致する場合の処理を定義する。\n    function keyDownCharCountUp(keyDownChar){\n      if(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n        // 文字色を変更する。\n        charArrayInDisplayWord[0].className = \"add_red\";\n        // メーターを更新する。\n        bonusCountMeter = bonusCountMeter +1;\n        // 一致した文字を配列から削除する。\n        charArrayInDisplayWord.shift();\n        // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n        if(charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord();\n        // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n        if(bonusCountMeter >= bonusCountMeterMax){\n          bonusCountMeter = 0;\n          // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n          initialPlayingTimeMSec = initialPlayingTimeMSec +3000;\n        }\n      } else if (playEndFlag===\"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountMeter = 0;\n      }\n      // 更新したメーターを表示する。\n      document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}