{"ast":null,"code":"// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function () {\n  // Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n  document.addEventListener(\"keydown\", keyDownGameStart);\n}); // Enterを押下するとゲーム開始のカウントダウンがスタートする。\n\nfunction keyDownGameStart(keyDownEnter) {\n  if (keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") {\n    // 表示されている文字を非表示にする。\n    document.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n    document.getElementById(\"pressEnterPopup\").className = \"transparent\";\n    document.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n    gameStart();\n  }\n\n  ;\n}\n\n; // 選択した英単語難易度によって変わるwordListの定義\n\nvar wordList = gon.wordListAll; // 選択したプレイモードによって変わるplayModeの定義\n\nvar playMode = gon.playMode; // 英単語の発音有無の設定によって変わるpronounceModeの定義\n\nvar pronounceMode = gon.pronounceMode; // 出題順の設定によって変わるpronounceModeの定義\n\nvar questionOrderMode = gon.questionOrderMode; // 英単語を順番に出題する場合の番号の初期値を定義する。\n\nvar sortById = 0;\n\nfunction gameStart() {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  // 表示するメーターリストを定義する。\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png']; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    // カウントダウン文字を１ずつ減らす。\n    countDownPopupNumber = countDownPopupNumber - 1; //カウントダウンが0になれば、ゲームを開始する。\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart); // カウントダウンポップアップのクラスを変更し、非表示にする。\n\n      countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className = \"displayWordJapanese\";\n    var displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n    displayWordAnnotation.className = \"transparent\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n    // bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\n    var createDisplayWordOkFlagFromBonusCountReset = \"0\"; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。--------------------------------------------------------------\n\n    var initialPlayingTimeMSec = 10000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 正解時に表示する丸を定義する。\n\n    document.getElementById(\"circleImg\").src = '/assets/正解○.png';\n    circleImg.classList.add('transparent'); // \"答えを見る\"ボタンを表示する。(プレイモード普通、正確重視の時のみ)\n\n    if (playMode == \"普通\" || playMode == \"正確重視\") {\n      var _answerButton = document.getElementById(\"answerButton\");\n\n      _answerButton.innerHTML = \"答えを見る\";\n      _answerButton.className = \"answerButton\";\n\n      _answerButton.onclick = function () {\n        for (var i = 0; i < charArrayInDisplayWord.length; i++) {\n          charArrayInDisplayWord[i].classList.remove('transparent');\n        }\n\n        displayWord.className = \"displayWord\";\n      };\n    }\n\n    ; // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore + \" P\"; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n      // ギリギリで問題に正解した場合、○を表示した後、200m秒後にワードを生成する処理が走るため。\n      if (playEndFlag === \"0\") {\n        // 表示単語を初期化する。\n        displayWord.textContent = \"\"; // 出題順の設定により、displayWordInListを変更\n\n        if (questionOrderMode == \"番号順\") {\n          // 英単語を順番に出題する場合の番号の初期値を定義する。\n          displayWordInList = wordList[sortById];\n          sortById++; // // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\n          if (sortById >= wordList.length) {\n            sortById = 0;\n          }\n\n          ;\n        } else {\n          // 出題順がランダムの場合\n          // 0〜textListsの総数間で整数値をランダムで算出する。\n          var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // let randomIntegerInTotalWordList = Math.floor(Math.random() * 3);\n          // 表示する単語をランダムで選定する。\n\n          displayWordInList = wordList[randomIntegerInTotalWordList];\n        }\n\n        ; //表示する単語の発音させる。（プレイモードが練習の時のみ）\n\n        pronounce(displayWordInList.eng_word); // 表示する単語の日本語訳を表示させる。\n\n        displayWordJapanese.textContent = displayWordInList.jap_trans_1; // 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n        // プレイモード練習では答えを表示しているため処理不要\n\n        if (playMode == \"普通\" || playMode == \"正確重視\") {\n          // 前の問題に注釈がある場合消す。\n          displayWordAnnotation.className = \"transparent\"; // ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\n          var duplicateWords = wordList.filter(function (duplicateWord) {\n            return duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1;\n          }); // 日本語訳が重複している他の英単語がある場合\n\n          if (duplicateWords.length > 1) {\n            // 重複している英単語の配列（この時点では答えを含む）を定義する。\n            var duplicateWordsList = [];\n\n            for (var i = 0; i < duplicateWords.length; i++) {\n              // 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n              if (duplicateWords[i].id !== displayWordInList.id) {\n                duplicateWordsList.push(duplicateWords[i].eng_word);\n              }\n\n              ;\n            }\n\n            ;\n            displayWordAnnotation.textContent = \"\\u203B\".concat(duplicateWordsList, \"\\u4EE5\\u5916\");\n            displayWordAnnotation.className = \"displayWordAnnotation\";\n            console.log(displayWordAnnotation.textContent);\n          }\n\n          ;\n        }\n\n        ; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n        // spanタグで閉じた単語を表示する。\n\n        charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function (value) {\n          // spanタグを作成する。\n          var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n          spanValue.textContent = value; // 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、正確重視のときのみ）\n\n          if (playMode == \"普通\" || playMode == \"正確重視\") {\n            spanValue.className = \"transparent\";\n          }\n\n          ; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n          displayWord.appendChild(spanValue);\n          return spanValue;\n        });\n      }\n\n      ; //  createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n      // bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\n      createDisplayWordOkFlagFromBonusCountReset = \"0\";\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"00\".concat(remainSec).slice(-3), \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        // ゲーム終了後にplayEndFlagを1に更新する。\n        playEndFlag = \"1\"; // プレイ時間のカウントダウンを止める。\n\n        clearInterval(timerId); // 残り時間の表示を消す。\n\n        remainSecLabel = \"\"; // 現在のスコア（左上）の表示を消す。\n\n        displayScore.textContent = \"\"; // 問題の英単語の表示を消す。\n\n        displayWord.textContent = \"\"; // 解答の日本語の表示を消す。\n\n        displayWordJapanese.textContent = \"\"; // 答えを見るボタンを消す。（プレイモード普通、正確重視の時のみ）\n        // また、注釈も消す。\n\n        if (playMode == \"普通\" || playMode == \"正確重視\") {\n          answerButton.className = \"transparent\";\n          displayWordAnnotation.className = \"transparent\";\n        }\n\n        ; // 正解時に表示される○の画像を消す。\n\n        circleImg.className = \"transparent\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          // 得点の表示\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\"; // もう一度ボタンの表示（transparentを消して表示させる）\n\n          restartBtn.classList.remove('transparent'); // 戻るボタンの表示（transparentを消して表示させる）\n\n          backBtn.classList.remove('transparent');\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    }\n\n    ; // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = \"\".concat(totalScore.toLocaleString(), \" P\");\n      return totalScore;\n    } // ゲーム中にタイプした文字が表示文字と一致する場合、不一致の場合の処理を定義する。\n\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        correctTyping();\n      } else if (keyDownChar.key === \"e\" && charArrayInDisplayWord[0].textContent === \"é\" && playEndFlag === \"0\") {\n        // éの場合は例外的にeでOKとする。\n        correctTyping();\n      } else if (playEndFlag === \"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountReset();\n      } else {}\n\n      ;\n    }\n\n    ; // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n    function correctTyping() {\n      // キーボード音を定義する。\n      var keyboardAudio = new Audio('/assets/keyboardAudio.mp3'); // キーボード音を発生させる。\n\n      keyboardAudio.play(); // 文字色を変更する。\n\n      charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n      bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n      charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWord.length === 0) {\n        // 正解音を定義する。\n        var correctAudio = new Audio('/assets/correctAudio.mp3'); // 正解した場合、効果音を発生させる。\n\n        correctAudio.play();\n        countUpScore();\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n        setTimeout(createDisplayWord, 200);\n        setTimeout(function () {\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n        }, 200);\n      }\n\n      ; // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n\n    ; // タイプした文字が表示文字と不一致の場合の処理を定義する。（プレイモードが正確重視の場合のみ）\n    // 不正解の単語の答えを表示し、次の単語を生成する処理。\n    // メーターを0にリセットする処理。\n    // createDisplayWord処理が200m秒に連続で生じないためにbonusCountResetにフラグを用意する。\n\n    function bonusCountReset() {\n      // 不正解音を定義する。\n      var incorrectAudio = new Audio('/assets/incorrectAudio.mp3'); // 不正解の場合、効果音を発生させる。\n\n      incorrectAudio.play();\n\n      if (playMode == \"正確重視\" && createDisplayWordOkFlagFromBonusCountReset == \"0\") {\n        for (var i = 0; i < charArrayInDisplayWord.length; i++) {\n          charArrayInDisplayWord[i].classList.add('add_gray');\n          charArrayInDisplayWord[i].classList.remove('transparent');\n        }\n\n        createDisplayWordOkFlagFromBonusCountReset = \"1\";\n        setTimeout(createDisplayWord, 200); //createDisplayWord処理実行後にcreateDisplayWordOkFlagFromBonusCountReset==0に戻す。\n\n        bonusCountMeter = 0;\n        document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n      }\n\n      ;\n    }\n\n    ; // 英単語を生成した際に、発音させる処理を定義する。\n\n    function pronounce(eng_word) {\n      if (pronounceMode == \"発音あり\") {\n        // résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n        if (eng_word == \"résumé\") {\n          eng_word = \"rezumei\";\n        }\n\n        ;\n        var pronunciation = new Audio('/assets/発音/' + eng_word + '.mp3');\n        pronunciation.play();\n      }\n\n      ;\n    }\n\n    ;\n  }\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_eng.js"],"names":["window","addEventListener","document","keyDownGameStart","keyDownEnter","key","getElementById","className","gameStart","wordList","gon","wordListAll","playMode","pronounceMode","questionOrderMode","sortById","imgArray","bonusCountMeter","bonusCountMeterMax","displayBonusAddPlayTime","bonusAddPlayTime","src","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","typingPlayStart","displayWord","displayWordJapanese","displayWordAnnotation","charArrayInDisplayWord","playEndFlag","createDisplayWordOkFlagFromBonusCountReset","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","circleImg","classList","add","answerButton","innerHTML","onclick","i","length","remove","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","displayWordInList","randomIntegerInTotalWordList","Math","floor","random","pronounce","eng_word","jap_trans_1","duplicateWords","filter","duplicateWord","duplicateWordsList","id","push","console","log","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","slice","closePopup","backBtn","restartBtn","toLocaleString","countUpScore","addPoint","keyDownChar","correctTyping","bonusCountReset","keyboardAudio","Audio","play","shift","correctAudio","incorrectAudio","pronunciation"],"mappings":"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","sourcesContent":["// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function(){\n\t// Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n\tdocument.addEventListener(`keydown`, keyDownGameStart);\n});\n\n// Enterを押下するとゲーム開始のカウントダウンがスタートする。\nfunction keyDownGameStart(keyDownEnter){\n\tif(keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") {\n\t\t// 表示されている文字を非表示にする。\n\t\tdocument.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"pressEnterPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n\t\tgameStart();\n\t};\n};\n\t// 選択した英単語難易度によって変わるwordListの定義\n\tconst wordList = gon.wordListAll;\n\n\t// 選択したプレイモードによって変わるplayModeの定義\n\tconst playMode = gon.playMode;\n\n\t// 英単語の発音有無の設定によって変わるpronounceModeの定義\n\tconst pronounceMode = gon.pronounceMode;\n\n\t// 出題順の設定によって変わるpronounceModeの定義\n\tconst questionOrderMode = gon.questionOrderMode;\n\n\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\tlet sortById = 0;\n\n\nfunction gameStart(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n\n\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n\t\t// カウントダウン文字を１ずつ減らす。\n\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\tif (countDownPopupNumber <= 0){\n\t\tclearInterval(timerIdToStart);\n\t\t// カウントダウンポップアップのクラスを変更し、非表示にする。\n\t\tcountDownPopup.className = \"countDownPopupAfterClose\";\n\t\ttypingPlayStart();\n\t\t} else {\n\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t}\n  }\n\n\t// ゲームを開始する処理を定義する。\n\tfunction typingPlayStart(){\n\n\t\t// 表示する単語を定義する。\n\t\tconst displayWord = document.getElementById(\"displayWord\");\n\t\tdisplayWord.className =  \"displayWord\";\n\t\tconst displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n\t\tdisplayWordJapanese.className =  \"displayWordJapanese\";\n\t\tconst displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n\t\tdisplayWordAnnotation.className =  \"transparent\";\n\t\t// 表示する単語を一文字ずつに分ける変数を定義する。\n\t\tlet charArrayInDisplayWord =[];\n\n\t\t// ゲーム終了を判定するフラグを定義する。\n\t\tlet playEndFlag = \"0\";\n\n\n\t\t// createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n\t\t// bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\t\tlet createDisplayWordOkFlagFromBonusCountReset = \"0\";\n\n\t\t// 表示する単語を作成する。\n\t\tcreateDisplayWord();\n\n\t\t// プレイ開始時間を取得する。\n\t\tconst startTime = Date.now();\n\t\t// 表示する残りのプレイ可能時間を定義する。\n\t\tlet remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n\t\tremainPlayingTime.className =  \"remainPlayingTime\";\n\t\t// 表示するスタート時のプレイ可能時間を定義する。--------------------------------------------------------------\n\t\tlet initialPlayingTimeMSec = 10000;\n\t\t// スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\t\tsetTimeout(countDownTime,0);\n\t\t// 1秒ごとにcountDownTimeを実施するように定義する。\n\t\tconst timerId = setInterval(countDownTime,1000);\n\n\t\t// 正解時に表示する丸を定義する。\n\t\tdocument.getElementById(\"circleImg\").src= '/assets/正解○.png';\n\t\tcircleImg.classList.add('transparent');\n\n\t\t// \"答えを見る\"ボタンを表示する。(プレイモード普通、正確重視の時のみ)\n\t\tif (playMode == \"普通\" || playMode == \"正確重視\" ) {\n\t\t\tlet answerButton = document.getElementById(\"answerButton\");\n\t\t\tanswerButton.innerHTML = \"答えを見る\";\n\t\t\tanswerButton.className = \"answerButton\";\n\t\t\tanswerButton.onclick = function() {\n\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t}\n\t\t\t\tdisplayWord.className =  \"displayWord\";\n\t\t\t};\n\t\t};\n\n\t\t// 表示するスコアを定義する。\n\t\tlet displayScore = document.getElementById(\"displayScore\");\n\t\tdisplayScore.className =  \"displayScore\";\n\t\t// 合計スコアの初期値を定義する。\n\t\tlet totalScore = 0;\n\t\t// 表示するスコアに初期値を定義する。\n\t\tdisplayScore.textContent = totalScore + \" P\";\n\t\t// スコアアップする基準を定義する。\n\t\tconst refTextLengthForCountUpLevel1 = 4;\n\t\tconst addScoreLevel1 = 1000;\n\t\tconst addScoreLevel2 = 3000;\n\n\t\t// タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\t\tdocument.addEventListener(`keydown`, keyDownCharCountUp);\n\n\t\t// 表示する単語を作成する処理を定義する。\n\t\tfunction createDisplayWord(){\n\t\t\t// すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n\t\t\t// ギリギリで問題に正解した場合、○を表示した後、200m秒後にワードを生成する処理が走るため。\n\t\t\tif(playEndFlag === \"0\"){\n\t\t\t\t// 表示単語を初期化する。\n\t\t\t\tdisplayWord.textContent = \"\";\n\n\t\t\t\t// 出題順の設定により、displayWordInListを変更\n\t\t\t\tif (questionOrderMode == \"番号順\") {\n\t\t\t\t\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\t\t\t\t\tdisplayWordInList = wordList[sortById];\n\t\t\t\t\tsortById++;\n\t\t\t\t\t// // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\t\t\t\t\tif (sortById >= wordList.length) {\n\t\t\t\t\t\tsortById = 0;\n\t\t\t\t\t};\n\t\t\t\t} else { // 出題順がランダムの場合\n\t\t\t\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\t\t\t\tlet randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\t\t\t\t\t// let randomIntegerInTotalWordList = Math.floor(Math.random() * 3);\n\t\t\t\t\t// 表示する単語をランダムで選定する。\n\t\t\t\t\tdisplayWordInList = wordList[randomIntegerInTotalWordList];\n\t\t\t\t};\n\n\t\t\t\t//表示する単語の発音させる。（プレイモードが練習の時のみ）\n\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t// 表示する単語の日本語訳を表示させる。\n\t\t\t\tdisplayWordJapanese.textContent = displayWordInList.jap_trans_1;\n\n\t\t\t\t// 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n\t\t\t\t// プレイモード練習では答えを表示しているため処理不要\n\t\t\t\tif ( playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\t// 前の問題に注釈がある場合消す。\n\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t// ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\t\t\t\t\tlet duplicateWords = wordList.filter(duplicateWord => duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1);\n\t\t\t\t\t// 日本語訳が重複している他の英単語がある場合\n\t\t\t\t\tif (duplicateWords.length > 1) {\n\t\t\t\t\t\t// 重複している英単語の配列（この時点では答えを含む）を定義する。\n\t\t\t\t\t\tlet duplicateWordsList = [];\n\t\t\t\t\t\tfor (let i = 0; i < duplicateWords.length; i++) {\n\t\t\t\t\t\t\t// 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n\t\t\t\t\t\t\tif (duplicateWords[i].id !== displayWordInList.id){\n\t\t\t\t\t\t\t\tduplicateWordsList.push(duplicateWords[i].eng_word);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdisplayWordAnnotation.textContent = `※${duplicateWordsList}以外`;\n\t\t\t\t\t\tdisplayWordAnnotation.className = \"displayWordAnnotation\";\n\t\t\t\t\t\tconsole.log(displayWordAnnotation.textContent);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t\t\t// spanタグで閉じた単語を表示する。\n\t\t\t\tcharArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n\t\t\t\t\t// spanタグを作成する。\n\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t// spanタグに一文字を挿入する。\n\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t// 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、正確重視のときのみ）\n\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\t\tspanValue.className = \"transparent\";\n\t\t\t\t\t};\n\t\t\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\t\t\treturn spanValue;\n\t\t\t\t});\n\t\t\t};\n\t\t\t//  createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n\t\t\t// bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\t\t\tcreateDisplayWordOkFlagFromBonusCountReset = \"0\";\n\t\t}\n\n\t\t// プレイ時間をカウントダウンする処理を定義する。\n\t\tfunction countDownTime(){\n\t\t\tconst currentTime = Date.now();\n\t\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\t\tconst remainSec = Math.ceil(remainMSec/1000);\n\t\t\tlet  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n\t\t\tif (remainMSec <= 0){\n\t\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\t\tplayEndFlag = \"1\";\n\t\t\t\t// プレイ時間のカウントダウンを止める。\n\t\t\t\tclearInterval(timerId);\n\t\t\t\t// 残り時間の表示を消す。\n\t\t\t\tremainSecLabel = \"\";\n\t\t\t\t// 現在のスコア（左上）の表示を消す。\n\t\t\t\tdisplayScore.textContent =\"\";\n\t\t\t\t// 問題の英単語の表示を消す。\n\t\t\t\tdisplayWord.textContent =\"\";\n\t\t\t\t// 解答の日本語の表示を消す。\n\t\t\t\tdisplayWordJapanese.textContent =\"\";\n\t\t\t\t// 答えを見るボタンを消す。（プレイモード普通、正確重視の時のみ）\n\t\t\t\t// また、注釈も消す。\n\t\t\t\tif (playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\tanswerButton.className = \"transparent\";\n\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t};\n\t\t\t\t// 正解時に表示される○の画像を消す。\n\t\t\t\tcircleImg.className = \"transparent\";\n\n\t\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\t\tclosePopup.textContent =\"終了\";\n\t\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t\t// 戻るボタンを定義する。\n\t\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\t\t\t\t// もう一度ボタンを定義する。\n\t\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t// 得点の表示\n\t\t\t\tclosePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t// もう一度ボタンの表示（transparentを消して表示させる）\n\t\t\t\trestartBtn.classList.remove('transparent');\n\t\t\t\t// 戻るボタンの表示（transparentを消して表示させる）\n\t\t\t\tbackBtn.classList.remove('transparent');\n\t\t\t\t},2000);\n\t\t\t}\n\t\t\t// 残りプレイ可能時間を更新する。\n\t\t\tremainPlayingTime.textContent = remainSecLabel;\n\t\t};\n\n\t\t// スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\t\tfunction countUpScore(){\n\t\tif (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\taddPoint = addScoreLevel1;\n\t\t} else {\n\t\t\taddPoint = addScoreLevel2;\n\t\t}\n\t\ttotalScore = totalScore + addPoint;\n\t\tdisplayScore.textContent = `${totalScore.toLocaleString()} P`;\n\t\treturn totalScore;\n\t\t}\n\n\t\t// ゲーム中にタイプした文字が表示文字と一致する場合、不一致の場合の処理を定義する。\n\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\t\tif(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n\t\t\t\tcorrectTyping();\n\t\t\t} else if (keyDownChar.key === \"e\"\n\t\t\t\t\t\t&& charArrayInDisplayWord[0].textContent === \"é\"\n\t\t\t\t\t\t&& playEndFlag===\"0\") {\n\t\t\t\t// éの場合は例外的にeでOKとする。\n\t\t\t\tcorrectTyping();\n\t\t\t} else if (playEndFlag===\"0\") {\n\t\t\t\t// タイプミスでメーターを初期値に戻す。\n\t\t\t\tbonusCountReset();\n\t\t\t} else {\n\n\t\t\t};\n\t\t};\n\n\t\t// タイプした文字が表示文字と一致する場合の処理を定義する。\n\t\tfunction correctTyping(){\n\t\t\t// キーボード音を定義する。\n\t\t\tlet keyboardAudio = new Audio('/assets/keyboardAudio.mp3');\n\t\t\t// キーボード音を発生させる。\n\t\t\tkeyboardAudio.play();\n\t\t\t// 文字色を変更する。\n\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t// メーターを更新する。\n\t\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t\t// 一致した文字を配列から削除する。\n\t\t\tcharArrayInDisplayWord.shift();\n\t\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\t\tif(charArrayInDisplayWord.length === 0) {\n\t\t\t\t// 正解音を定義する。\n\t\t\t\tlet correctAudio = new Audio('/assets/correctAudio.mp3');\n\t\t\t\t// 正解した場合、効果音を発生させる。\n\t\t\t\tcorrectAudio.play();\n\t\t\t\tcountUpScore();\n\t\t\t\tcircleImg.classList.add('circle');\n\t\t\t\tcircleImg.classList.remove('transparent');\n\t\t\t\tsetTimeout(createDisplayWord,200);\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tcircleImg.classList.add('transparent');\n\t\t\t\t\tcircleImg.classList.remove('circle');\n\t\t\t\t}, 200);\n\t\t\t};\n\n\t\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\tbonusCountMeter = 0;\n\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\tsetTimeout(function(){\n\t\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t}, 2000);\n\t\t\t};\n\n\t\t\t// 更新したメーターを表示する。\n\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t};\n\n\t\t// タイプした文字が表示文字と不一致の場合の処理を定義する。（プレイモードが正確重視の場合のみ）\n\t\t// 不正解の単語の答えを表示し、次の単語を生成する処理。\n\t\t// メーターを0にリセットする処理。\n\t\t// createDisplayWord処理が200m秒に連続で生じないためにbonusCountResetにフラグを用意する。\n\t\tfunction bonusCountReset(){\n\t\t\t// 不正解音を定義する。\n\t\t\tlet incorrectAudio = new Audio('/assets/incorrectAudio.mp3');\n\t\t\t// 不正解の場合、効果音を発生させる。\n\t\t\tincorrectAudio.play();\n\t\t\tif (playMode == \"正確重視\" && createDisplayWordOkFlagFromBonusCountReset == \"0\") {\n\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.add('add_gray');\n\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t}\n\t\t\t\tcreateDisplayWordOkFlagFromBonusCountReset = \"1\";\n\t\t\t\tsetTimeout(createDisplayWord,200); //createDisplayWord処理実行後にcreateDisplayWordOkFlagFromBonusCountReset==0に戻す。\n\t\t\t\tbonusCountMeter = 0;\n\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t\t};\n\t\t};\n\n\t\t// 英単語を生成した際に、発音させる処理を定義する。\n\t\tfunction pronounce(eng_word){\n\t\t\tif (pronounceMode == \"発音あり\") {\n\t\t\t\t// résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n\t\t\t\tif (eng_word == \"résumé\"){\n\t\t\t\t\teng_word = \"rezumei\";\n\t\t\t\t};\n\t\t\tlet pronunciation = new Audio('/assets/発音/'+ eng_word + '.mp3');\n\t\t\tpronunciation.play();\n\t\t\t};\n\t\t};\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}