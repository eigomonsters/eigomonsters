{"ast":null,"code":"window.addEventListener('load', function () {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eeeeee\", \"ffffff\", \"gggggg\", \"hhhhhh\"]; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10.png', '/assets/メーターPNG/メーター20.png', '/assets/メーターPNG/メーター30.png', '/assets/メーターPNG/メーター40.png', '/assets/メーターPNG/メーター50.png', '/assets/メーターPNG/メーター60.png', '/assets/メーターPNG/メーター70.png', '/assets/メーターPNG/メーター80.png', '/assets/メーターPNG/メーター90.png', '/assets/メーターPNG/メーター100.png']; // 画面遷移から3秒後にゲームを開始するよう定義する。\n\n  setTimeout(typingPlayStart, 3000); // ゲームを開始する処理を定義する。\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\"); // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\"); // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 1000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\"); // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1;\n    var addScoreLevel2 = 3; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // 表示するメーター初期値を定義する。\n\n    var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n    var bonusCountMeterMax = 10; // メーターの初期値を表示する。\n\n    document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n      var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n\n      charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].split(\"\").map(function (value) {\n        // spanタグを作成する。\n        var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n        spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(remainSec, \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent = \"\";\n        displayWord.textContent = \"\"; // ゲーム終了後にplayEndFlagを1に更新する。\n\n        playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore, \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n          restartBtn.innerHTML = \"<a href='../'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='../'>タイトルに戻る</a>\";\n          backBtn.className = \"backBtn\";\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    } // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = totalScore;\n      return totalScore;\n    } // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        // 文字色を変更する。\n        charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n        bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n        charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n        if (charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord(); // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n        if (bonusCountMeter >= bonusCountMeterMax) {\n          bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n          initialPlayingTimeMSec = initialPlayingTimeMSec + 3000;\n        }\n      } else if (playEndFlag === \"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountMeter = 0;\n      } // 更新したメーターを表示する。\n\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n  }\n});","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay.js"],"names":["window","addEventListener","wordList","imgArray","setTimeout","typingPlayStart","displayWord","document","getElementById","charArrayInDisplayWord","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","countDownTime","timerId","setInterval","displayScore","totalScore","textContent","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","bonusCountMeter","bonusCountMeterMax","src","playEndFlag","randomIntegerInTotalWordList","Math","floor","random","length","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","clearInterval","closePopup","className","backBtn","restartBtn","innerHTML","countUpScore","addPoint","keyDownChar","key","shift"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  const wordList = [\n    \"aaa\",\n    \"bbb\",\n    \"ccc\",\n    \"ddd\",\n    \"eeeeee\",\n    \"ffffff\",\n    \"gggggg\",\n    \"hhhhhh\"\n  ];\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10.png',\n    '/assets/メーターPNG/メーター20.png',\n    '/assets/メーターPNG/メーター30.png',\n    '/assets/メーターPNG/メーター40.png',\n    '/assets/メーターPNG/メーター50.png',\n    '/assets/メーターPNG/メーター60.png',\n    '/assets/メーターPNG/メーター70.png',\n    '/assets/メーターPNG/メーター80.png',\n    '/assets/メーターPNG/メーター90.png',\n    '/assets/メーターPNG/メーター100.png'\n  ]\n\n  // 画面遷移から3秒後にゲームを開始するよう定義する。\n  setTimeout(typingPlayStart,3000);\n\n  // ゲームを開始する処理を定義する。\n  function typingPlayStart(){\n  \n  // 表示する単語を定義する。\n  const displayWord = document.getElementById(\"displayWord\");\n  // 表示する単語を一文字ずつに分ける変数を定義する。\n  let charArrayInDisplayWord =[];\n  // 表示する単語を作成する。\n  createDisplayWord();\n\n  // プレイ開始時間を取得する。\n  const startTime = Date.now();\n  // 表示する残りのプレイ可能時間を定義する。\n  let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n  // 表示するスタート時のプレイ可能時間を定義する。\n  let initialPlayingTimeMSec = 1000;\n  // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n  setTimeout(countDownTime,0);\n  // 1秒ごとにcountDownTimeを実施するように定義する。\n  const timerId = setInterval(countDownTime,1000);\n\n  // 表示するスコアを定義する。\n  let displayScore = document.getElementById(\"displayScore\");\n  // 合計スコアの初期値を定義する。\n  let totalScore = 0;\n  // 表示するスコアに初期値を定義する。\n  displayScore.textContent = totalScore;\n  // スコアアップする基準を定義する。\n  const refTextLengthForCountUpLevel1 = 4;\n  const addScoreLevel1 = 1;\n  const addScoreLevel2 = 3;\n\n  // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n  document.addEventListener(`keydown`, keyDownCharCountUp);\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 10;\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n  // ゲーム終了を判定するフラグを定義する。\n  let playEndFlag = \"0\";\n\n\n  // 表示する単語を作成する処理を定義する。\n  function createDisplayWord(){\n    // 表示単語を初期化する。\n    displayWord.textContent = \"\";\n    // 0〜textListsの総数間で整数値をランダムで算出する。\n    let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n    // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n    // spanタグで閉じた単語を表示する。\n    charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].split(\"\").map(function(value){\n      // spanタグを作成する。\n      let spanValue = document.createElement(\"span\");\n      // spanタグに一文字を挿入する。\n      spanValue.textContent = value;\n      // 表示する単語にspanタグで閉じた一文字を追加する。\n      displayWord.appendChild(spanValue);\n      return spanValue;\n    });\n  }\n\n  // プレイ時間をカウントダウンする処理を定義する。\n  function countDownTime(){\n    const currentTime = Date.now();\n    const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n    const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n    const remainSec = Math.ceil(remainMSec/1000);\n    let  remainSecLabel = `残り${remainSec}秒`;\n    if (remainMSec <= 0){\n      clearInterval(timerId);\n      remainSecLabel = \"\";\n      displayScore.textContent =\"\";\n      displayWord.textContent =\"\";\n      // ゲーム終了後にplayEndFlagを1に更新する。\n      playEndFlag = \"1\";\n      // ゲーム終了後に終了を知らせるポップアップを作成する。\n      // ゲーム終了を知らせるポップアップを定義する。\n      const closePopup = document.getElementById(\"closePopup\");\n      closePopup.textContent =\"終了\";\n      closePopup.className = \"closePopup\";\n      // 戻るボタンを定義する。\n      const backBtn = document.getElementById(\"backBtn\");\n      // もう一度ボタンを定義する。\n      const restartBtn = document.getElementById(\"restartBtn\");\n      // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n      setTimeout(function(){\n        closePopup.textContent = `あなたの得点は${totalScore}点です!`;\n        closePopup.className = \"endResultPopup\";\n        restartBtn.innerHTML = \"<a href='../'>もう一度遊ぶ</a>\";\n        restartBtn.className = \"restartBtn\";\n        backBtn.innerHTML = \"<a href='../'>タイトルに戻る</a>\";\n        backBtn.className = \"backBtn\";\n      },2000);\n    }\n    // 残りプレイ可能時間を更新する。\n    remainPlayingTime.textContent = remainSecLabel;\n  }\n\n  // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n  function countUpScore(){\n    if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n      addPoint = addScoreLevel1;\n    } else {\n      addPoint = addScoreLevel2;\n    }\n    totalScore = totalScore + addPoint;\n    displayScore.textContent = totalScore;\n    return totalScore;\n  }\n\n  // タイプした文字が表示文字と一致する場合の処理を定義する。\n  function keyDownCharCountUp(keyDownChar){\n    if(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n      // 文字色を変更する。\n      charArrayInDisplayWord[0].className = \"add_red\";\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter +1;\n      // 一致した文字を配列から削除する。\n      charArrayInDisplayWord.shift();\n      // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n      if(charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord();\n      // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n      if(bonusCountMeter >= bonusCountMeterMax){\n        bonusCountMeter = 0;\n        // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n        initialPlayingTimeMSec = initialPlayingTimeMSec +3000;\n      }\n    } else if (playEndFlag===\"0\") {\n      // タイプミスでメーターを初期値に戻す。\n      bonusCountMeter = 0;\n    }\n    // 更新したメーターを表示する。\n    document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  }\n}\n});\n"]},"metadata":{},"sourceType":"module"}