{"ast":null,"code":"// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function () {\n  // Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n  document.addEventListener(\"keydown\", keyDownGameStart);\n}); // スペースかEnterキー押下によるゲームスタートを一回限りとするフラグを設定する。\n\nvar gameStartEnterOnlyOnce = \"0\"; // スペースかEnterキーを押下するとゲーム開始のカウントダウンがスタートする。\n\nfunction keyDownGameStart(keyDownEnter) {\n  if ((keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") && gameStartEnterOnlyOnce == \"0\") {\n    // 表示されている文字を非表示にする。\n    document.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n    document.getElementById(\"pressEnterPopup\").className = \"transparent\";\n    document.getElementById(\"annotationAudio\").className = \"transparent\";\n    document.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n    gameStartEnterOnlyOnce = \"1\";\n    gameStart();\n  }\n\n  ;\n}\n\n; // 選択した英単語難易度によって変わるwordListの定義\n\nvar wordList = gon.wordListAll; // 選択したプレイモードによって変わるplayModeの定義\n\nvar playMode = gon.playMode; // 出題順の設定によって変わるpronounceModeの定義\n\nvar questionOrderMode = gon.questionOrderMode; // 英単語の発音有無の設定によって変わるpronounceModeの定義\n\nvar pronounceMode = gon.pronounceMode; // BGMの設定によって変わるbgmModeの定義\n\nvar bgmMode = gon.bgmMode; // タイプ音の設定によって変わるtypeAudioModeの定義\n\nvar typeAudioMode = gon.typeAudioMode; // 正解音の設定によって変わるcorrectAudioModeの定義\n\nvar correctAudioMode = gon.correctAudioMode; // ミス音の設定によって変わるincorrectAudioModeの定義\n\nvar incorrectAudioMode = gon.incorrectAudioMode;\n\nfunction gameStart() {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  // 表示するメーターリストを定義する。\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png']; // 英単語を順番に出題する場合の番号の初期値を定義する。\n\n  var sortById = 0; // 英単語の出題順の初期値を定義する。\n\n  var eachQuestionOrder = 0; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    // カウントダウン文字を１ずつ減らす。\n    countDownPopupNumber = countDownPopupNumber - 1; //カウントダウンが0になれば、ゲームを開始する。\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart); // カウントダウンポップアップのクラスを変更し、非表示にする。\n\n      countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className = \"displayWordJapanese\";\n    var displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n    displayWordAnnotation.className = \"transparent\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // 出題した英単語を格納する配列を定義する。\n\n    var allQuestionWords = []; // 出題したすべての英単語を格納する配列を定義する。\n\n    var allQuestionWordsList = []; // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 「答えを見る」ボタン押下有無を判定するフラグを定義する。\n\n    var answerOpenFlag = \"0\"; // プレイモード：タイムアタックですべての出題範囲に解答済み判定フラグを設定する。\n\n    var gameCompleteTimeAttackFlag = \"0\"; // 問題を作成した時間を定義する。\n\n    var eachQuestionCreateTime = 0; // 問題を解答するのに要した時間を定義する。\n\n    var eachQuestionAnswerTime = 0; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n    // プレイモード：タイムアタックの場合は5分とする。\n\n    var initialPlayingTimeMSec = 3000; // プレイモード：タイムアタックの場合は30分とする。\n\n    if (playMode == \"タイムアタック\") {\n      initialPlayingTimeMSec = 1800000;\n    }\n\n    ; // プレイモード：タイムアタックの場合、ゲームクリア後に合計プレイ時間表示する。\n\n    var totalPlayingTimeMSec = 0; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 正解時に表示する丸を定義する。\n\n    document.getElementById(\"circleImg\").src = '/assets/正解○.png';\n    circleImg.classList.add('transparent'); // \"発音を聞く\"ボタンを表示する。\n\n    var pronounceAgainButton = document.getElementById(\"pronounceAgainButton\");\n    pronounceAgainButton.innerHTML = \"発音を聞く\";\n    pronounceAgainButton.className = \"pronounceAgainButton\";\n\n    pronounceAgainButton.onclick = function () {\n      pronounce(displayWordInList.eng_word);\n    }; // \"ヒントを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\n\n    var hintButton = document.getElementById(\"hintButton\");\n    hintButton.innerHTML = \"ヒントを見る\";\n\n    if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n      hintButton.className = \"hintButton\";\n\n      hintButton.onclick = function () {\n        charArrayInDisplayWord[0].classList.remove('transparent');\n      };\n    } else {\n      hintButton.className = \"hintButtonPractice\";\n    }\n\n    ; // \"答えを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\n    var answerButton = document.getElementById(\"answerButton\");\n    answerButton.innerHTML = \"答えを見る\";\n\n    if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n      answerButton.className = \"answerButton\";\n\n      answerButton.onclick = function () {\n        for (var i = 0; i < charArrayInDisplayWord.length; i++) {\n          charArrayInDisplayWord[i].classList.remove('transparent');\n        } // 連続正解数を0に戻す。\n\n\n        totalConsecutiveNumCorrectNum = 0;\n        displayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum; // メーターを初期値に戻す。\n\n        bonusCountMeter = 0;\n        document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 「答えを見る」判定フラグを更新する。\n\n        answerOpenFlag = \"1\";\n      };\n    } else {\n      // (プレイモード練習の時)\n      answerButton.className = \"answerButtonPractice\";\n    }\n\n    ; // \"最初からやり直す\"ボタンを表示する。\n\n    var restartButtonMidGame = document.getElementById(\"restartButtonMidGame\");\n    restartButtonMidGame.classList.remove('transparent'); // \"コース選択画面に戻る\"ボタンを表示する。\n\n    var courseSettingBackButtonMidGame = document.getElementById(\"courseSettingBackButtonMidGame\");\n    courseSettingBackButtonMidGame.classList.remove('transparent'); // 以下、スコア定義---------------------------------------------------------------------------------------------------\n    // -----------------------------------------------------------------------------------------------------------------\n    // プレイモード：練習・普通の場合はスコアを表示させる。\n    // プレイモード：タイムアタックはスコアを表示させない。\n\n    if (playMode == \"練習\" || playMode == \"普通\") {\n      // 表示するスコアを定義する。\n      var _displayScoreEntire = document.getElementById(\"displayScoreEntire\");\n\n      _displayScoreEntire.className = \"displayScoreEntire\";\n\n      var _displayScore = document.getElementById(\"displayScore\");\n\n      _displayScore.className = \"displayScore\";\n\n      var _displayP = document.getElementById(\"displayP\");\n\n      _displayP.className = \"displayP\";\n    }\n\n    ; // プレモード：練習・普通の場合のみ使用する。----------------------------\n    // ---------------------------------------------------------------\n    // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 50;\n    var addScoreLevel2 = 50; // ---------------------------------------------------------------\n    // ---------------------------------------------------------------\n    // 表示する正解数全体のクラス\n\n    var NumCorrectMidGamePlay = document.getElementById(\"NumCorrectMidGamePlay\");\n    NumCorrectMidGamePlay.className = \"NumCorrectMidGamePlay\"; // 表示する正解数を定義する。\n\n    var displayNumCorrectWord = document.getElementById(\"displayNumCorrectWord\");\n    displayNumCorrectWord.className = \"displayNumCorrectWord\";\n    displayNumCorrectWord.textContent = \"合計正解数\";\n    var displayNumCorrectNum = document.getElementById(\"displayNumCorrectNum\");\n    displayNumCorrectNum.className = \"displayNumCorrectNum\";\n    var totalNumCorrectNum = 0;\n    displayNumCorrectNum.textContent = totalNumCorrectNum; // 表示する連続正解数を定義する。\n\n    var displayConsecutiveNumCorrectWord = document.getElementById(\"displayConsecutiveNumCorrectWord\");\n    displayConsecutiveNumCorrectWord.className = \"displayConsecutiveNumCorrectWord\";\n    displayConsecutiveNumCorrectWord.textContent = \"連続正解数\";\n    var displayConsecutiveNumCorrectNum = document.getElementById(\"displayConsecutiveNumCorrectNum\");\n    displayConsecutiveNumCorrectNum.className = \"displayConsecutiveNumCorrectNum\";\n    var totalConsecutiveNumCorrectNum = 0;\n    displayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum; // 表示する最高連続正解数を定義する。\n\n    var displayMaxConsecutiveNumCorrectWord = document.getElementById(\"displayMaxConsecutiveNumCorrectWord\");\n    displayMaxConsecutiveNumCorrectWord.className = \"displayMaxConsecutiveNumCorrectWord\";\n    displayMaxConsecutiveNumCorrectWord.textContent = \"最高連続正解数\";\n    var displayMaxConsecutiveNumCorrectNum = document.getElementById(\"displayMaxConsecutiveNumCorrectNum\");\n    displayMaxConsecutiveNumCorrectNum.className = \"displayMaxConsecutiveNumCorrectNum\";\n    var totalMaxConsecutiveNumCorrectNum = 0;\n    displayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum; // 以上、スコア定義---------------------------------------------------------------------------------------------------\n    // -----------------------------------------------------------------------------------------------------------------\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // 以下、表示する単語を作成する処理を定義する。-----------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function createDisplayWord() {\n      // すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n      // ギリギリで問題に正解した場合、○を表示した後、500m秒後にワードを生成する処理が走るため。\n      if (playEndFlag === \"0\") {\n        // 表示単語を初期化する。\n        displayWord.textContent = \"\"; // 問題を作成した時間を記録する。\n\n        eachQuestionCreateTime = Date.now(); // 前回の問題に要した時間を初期値に戻す。\n\n        eachQuestionAnswerTime = 0; // 出題順の設定により、displayWordInListを変更\n\n        if (questionOrderMode == \"番号順\") {\n          // 英単語を順番に出題する場合の番号の初期値を定義する。\n          displayWordInList = wordList[sortById];\n          sortById++; // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\n          if (sortById >= wordList.length) {\n            sortById = 0; // プレイモード：タイムアタックの場合、次の問題に正解した時点でゲーム終了とする。\n\n            if (playMode == \"タイムアタック\") {\n              // フラグを1に更新する。\n              gameCompleteTimeAttackFlag = \"1\";\n            }\n\n            ;\n          }\n\n          ;\n        } else {\n          // 出題順がランダムの場合\n          // 0〜textListsの総数間で整数値をランダムで算出する。\n          var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語をランダムで選定する。\n\n          displayWordInList = wordList[randomIntegerInTotalWordList]; // プレイモード：タイムアタックの場合は、wordListから表示単語を削除する。\n\n          if (playMode == \"タイムアタック\") {\n            // 同じ問題を２度出題しないように、一度出題した問題はwordListから削除する。\n            wordList.splice(randomIntegerInTotalWordList, 1); // wordList.length == 0になった場合、次の問題に正解した時点でゲーム終了とする。\n\n            if (wordList.length == 0) {\n              // フラグを1に更新する。\n              gameCompleteTimeAttackFlag = \"1\";\n            }\n\n            ;\n          }\n\n          ;\n        }\n\n        ; // 前回出題した英単語を allQuestionWords から削除し、初期値に戻す。\n\n        allQuestionWords = []; // 問題の出題順を+1する。\n\n        eachQuestionOrder = eachQuestionOrder + 1; // 出題した英単語displayWordInList を allQuestionWords に格納する。\n\n        allQuestionWords.push(eachQuestionOrder, displayWordInList.id, \"▷\", displayWordInList.eng_word, displayWordInList.jap_trans_1, \"未解答\", \"-\"); // 英単語を生成した際に、発音させる。（発音ありの場合のみ）\n\n        if (pronounceMode == \"発音あり\") {\n          pronounce(displayWordInList.eng_word);\n        }\n\n        ; // 表示する単語の日本語訳を表示させる。\n\n        displayWordJapanese.textContent = displayWordInList.jap_trans_1; // 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n        // プレイモード練習では答えを表示しているため処理不要\n\n        if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n          // 前の問題に注釈がある場合消す。\n          displayWordAnnotation.className = \"transparent\"; // ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\n          var duplicateWords = wordList.filter(function (duplicateWord) {\n            return duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1;\n          }); // 日本語訳が重複している他の英単語がある場合\n\n          if (duplicateWords.length > 1) {\n            // 重複している英単語の配列（この時点では答えを含む）を定義する。\n            var duplicateWordsList = [];\n\n            for (var i = 0; i < duplicateWords.length; i++) {\n              // 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n              if (duplicateWords[i].id !== displayWordInList.id) {\n                duplicateWordsList.push(duplicateWords[i].eng_word);\n              }\n\n              ;\n            }\n\n            ;\n            displayWordAnnotation.textContent = \"\\u203B\".concat(duplicateWordsList, \"\\u4EE5\\u5916\");\n            displayWordAnnotation.className = \"displayWordAnnotation\";\n          }\n\n          ;\n        }\n\n        ; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n        // spanタグで閉じた単語を表示する。\n\n        charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function (value) {\n          // spanタグを作成する。\n          var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n          spanValue.textContent = value; // 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、タイムアタックのときのみ）\n\n          if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n            spanValue.className = \"transparent\";\n          }\n\n          ; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n          displayWord.appendChild(spanValue);\n          return spanValue;\n        });\n      }\n\n      ;\n    }\n\n    ; // 以上、表示する単語を作成する処理を定義する。-----------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainAllSec = Math.ceil(remainMSec / 1000);\n      var remainMin = Math.floor(remainAllSec / 60);\n      var remainSec = Math.ceil(remainAllSec % 60);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"0\".concat(remainMin).slice(-2), \"\\u5206\").concat(\"0\".concat(remainSec).slice(-2), \"\\u79D2\"); // 残り時間が0になった場合の処理を定義する。\n\n      if (remainMSec <= 0) {\n        gameClose();\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel; // プレイモード：タイムアタックの場合は、使用時間を最後に表示する。\n\n      if (playMode == \"タイムアタック\") {\n        totalPlayingTimeMSec = diffBetweenCurrentTimeAndStartTime;\n      }\n\n      ;\n    }\n\n    ; // 以上、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、ゲーム終了時の処理を定義する。------------------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function gameClose() {\n      // ゲーム終了後にplayEndFlagを1に更新する。\n      playEndFlag = \"1\"; // プレイ時間のカウントダウンを止める。\n\n      clearInterval(timerId); // 最後に出題していた英単語を allQuestionWordsList に格納する。\n      // ただし、プレイモード：タイムアタックでクリアしている場合、出題している単語はないため処理不要。\n      // また、終了直前で正解した場合、次の問題生成前に本処理に入り、最後に正解した問題が２つ表示されるため、\"未解答\"であることも条件に加える。\n\n      if (!(playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") && allQuestionWords[allQuestionWords.length - 2] == \"未解答\") {\n        // 出題したすべての英単語リストに追加する。\n        allQuestionWordsList.push(allQuestionWords);\n      }\n\n      ; // 残り時間の表示を消す。\n\n      remainPlayingTime.className = \"transparent\"; // 現在のスコア（左上）の表示を消す。\n      // プレイモード：練習・普通の場合のみ\n\n      if (playMode == \"練習\" || playMode == \"普通\") {\n        displayScoreEntire.className = \"transparent\";\n        displayScore.className = \"transparent\";\n        displayP.className = \"transparent\";\n      }\n\n      ; //正解数全体のクラスを非表示にする。\n\n      NumCorrectMidGamePlay.className = \"transparent\"; // 正解数の表示を消す。\n\n      displayNumCorrectWord.className = \"transparent\";\n      displayNumCorrectNum.className = \"transparent\"; // 連続正解数の表示を消す。\n\n      displayConsecutiveNumCorrectWord.className = \"transparent\";\n      displayConsecutiveNumCorrectNum.className = \"transparent\"; // 最高連続正解数の表示を消す。\n\n      displayMaxConsecutiveNumCorrectWord.className = \"transparent\";\n      displayMaxConsecutiveNumCorrectNum.className = \"transparent\"; // 問題の英単語の表示を消す。\n\n      displayWord.textContent = \"\"; // 解答の日本語の表示を消す。\n\n      displayWordJapanese.textContent = \"\"; // \"発音を聞く\"ボタンを消す。\n\n      pronounceAgainButton.className = \"transparent\"; // \"ヒントを見る\"ボタンを消す。\n\n      hintButton.className = \"transparent\"; // \"答えを見る\"ボタンを消す。\n\n      answerButton.className = \"transparent\"; // 注釈を消す。（プレイモード普通、タイムアタックの時のみ）\n\n      if (playMode == \"普通\" || playMode == \"タイムアタック\") {\n        displayWordAnnotation.className = \"transparent\";\n      }\n\n      ; // \"最初からやり直す\"ボタンを消す。\n\n      restartButtonMidGame.className = \"transparent\"; // \"コース選択画面に戻る\"ボタンを消す。\n\n      courseSettingBackButtonMidGame.className = \"transparent\"; // 正解時に表示される○の画像を消す。\n\n      circleImg.className = \"transparent\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n      // ゲーム終了を知らせるポップアップを定義する。\n\n      var closePopup = document.getElementById(\"closePopup\");\n      closePopup.textContent = \"終了\";\n      closePopup.className = \"closePopup\"; // ゲーム終了後に、問題数、合計正解数、最大連続正解数を表示する。\n\n      var closePopupTotalQuestionNum = document.getElementById(\"closePopupTotalQuestionNum\");\n      var closePopupFinalCorrectNum = document.getElementById(\"closePopupFinalCorrectNum\");\n      var closePopupFinalMaxConsecutiveCorrectNum = document.getElementById(\"closePopupFinalMaxConsecutiveCorrectNum\"); // もう一度ボタンを定義する。\n\n      var restartBtn = document.getElementById(\"restartBtn\"); // 戻るボタンを定義する。\n\n      var backBtn = document.getElementById(\"backBtn\"); // 問題を振り返るボタンを定義する。\n\n      var checkQuestions = document.getElementById(\"checkQuestions\"); // 出題問題リスト表示を定義する。\n\n      var allQuestionsListEntireScr = document.getElementById(\"allQuestionsListEntireScr\");\n      var allQuestionsList = document.getElementById(\"allQuestionsList\"); // 出題した問題を表にする。\n      // 出題した問題の数だけ処理を実施する。\n\n      allQuestionWordsList.forEach(function (allQuestionWords) {\n        var tr = document.createElement(\"tr\");\n        allQuestionsList.appendChild(tr); // 問題ごとにobjArrayを変え、表に各項目を入れていく。\n\n        var objArray = Object.entries(allQuestionWords);\n        console.log(objArray);\n        objArray.forEach(function (arr) {\n          console.log(arr);\n          var td = document.createElement(\"td\");\n          td.textContent = arr[1];\n\n          if (arr[1] == \"▷\") {\n            // ▷を押下した時\n            td.onclick = function () {\n              pronounce(objArray[3][1]); // その行の英単語を発音させる。\n            };\n          }\n\n          ;\n          tr.appendChild(td);\n        });\n      }); // 出題した出題問題リストポップアップを表示した後の「閉じる」ボタンを定義する。\n\n      var closeAllQuestionsList = document.getElementById(\"closeAllQuestionsList\"); // 「問題を振り返る」ボタン押下で出題問題リストポップアップを開く。\n\n      checkQuestions.onclick = function () {\n        // メーターを非表示にする。\n        document.getElementById(\"meterImg\").className = \"transparent\"; // 出題問題リストを表示させる。\n\n        allQuestionsListEntireScr.className = \"allQuestionsListEntireScr\";\n        closeAllQuestionsList.className = \"closeAllQuestionsList\";\n      }; // 「閉じる」ボタン押下で出題問題リストポップアップを閉じる。\n\n\n      closeAllQuestionsList.onclick = function () {\n        // メーターを表示にさせる。\n        document.getElementById(\"meterImg\").className = \"meter\"; // 出題問題リストを非表示にする。\n\n        allQuestionsListEntireScr.className = \"transparent\";\n        closeAllQuestionsList.className = \"transparent\";\n      }; // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n\n      setTimeout(function () {\n        // 得点の表示\n        // プレイモード：練習・普通の場合は、スコアを表示する。\n        if (playMode == \"練習\" || playMode == \"普通\") {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n        } else {\n          // プレイモード：タイムアタックの場合は、かかった時間を表示する。\n          // ただし、すべての出題範囲に解答できた場合のみ。\n          if (gameCompleteTimeAttackFlag == \"1\") {\n            var remainAllSecTimeAttack = Math.ceil(totalPlayingTimeMSec / 1000);\n            var remainMinTimeAttack = Math.floor(remainAllSecTimeAttack / 60);\n            var remainSecTimeAttack = Math.ceil(remainAllSecTimeAttack % 60);\n            closePopup.textContent = \"\\u3042\\u306A\\u305F\\u304C\\u304B\\u304B\\u3063\\u305F\\u6642\\u9593\\u306F\".concat(\"0\".concat(remainMinTimeAttack).slice(-2), \"\\u5206\").concat(\"0\".concat(remainSecTimeAttack).slice(-2), \"\\u79D2\\u3067\\u3059!\");\n            closePopup.className = \"endResultPopup\";\n          } else {\n            // 時間切れの場合は、クリアできなかったと表示する。\n            closePopup.textContent = \"\\u6B8B\\u5FF5\\u306A\\u304C\\u3089\\u30AF\\u30EA\\u30A2\\u3067\\u304D\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\";\n            closePopup.className = \"endResultPopup\";\n          }\n        }\n\n        ; // 最終結果として、問題数、合計正解数、最高連続正解数を表示する。\n\n        closePopupTotalQuestionNum.textContent = \"\\u51FA\\u984C\\u6570 : \".concat(eachQuestionOrder);\n        closePopupFinalCorrectNum.textContent = \"\".concat(displayNumCorrectWord.textContent, \":\").concat(totalNumCorrectNum);\n        closePopupFinalMaxConsecutiveCorrectNum.textContent = \"\".concat(displayMaxConsecutiveNumCorrectWord.textContent, \":\").concat(totalMaxConsecutiveNumCorrectNum); // もう一度ボタンの表示（transparentを消して表示させる）\n\n        restartBtn.classList.remove('transparent'); // 戻るボタンの表示（transparentを消して表示させる）\n\n        backBtn.classList.remove('transparent'); // 問題を振り返るボタンの表示\n\n        checkQuestions.className = \"checkQuestions\";\n        checkQuestions.textContent = \"問題を振り返る\";\n      }, 2000);\n    }\n\n    ; // 以上、ゲーム終了時の処理を定義する。------------------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n    // ------------------------------------------------------------------------------------\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      ; // 合計得点を定義する。\n\n      totalScore = totalScore + addPoint;\n      displayScore.setAttribute('data-num', totalScore);\n      var countElm = $('.displayScore'),\n          countSpeed = 10;\n      countElm.each(function () {\n        var self = $(this),\n            // 合計得点を定義する。\n        countMax = self.attr('data-num'),\n            thisCount = self.text(),\n            countTimer;\n        countUpAnime(); // 数値をカウントアップするアニメーションを定義する。\n\n        function countUpAnime() {\n          countTimer = setInterval(function () {\n            var countNext = thisCount++;\n            self.text(countNext);\n\n            if (countNext == countMax) {\n              clearInterval(countTimer);\n            }\n          }, countSpeed);\n        }\n\n        ;\n      });\n    }\n\n    ; // 以上、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、正解数をカウントアップする処理を定義する。--------------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function countUpCorrectNum() {\n      // 合計正解数のカウントアップ\n      totalNumCorrectNum = totalNumCorrectNum + 1;\n      displayNumCorrectNum.textContent = totalNumCorrectNum; // 連続正解数のカウントアップ\n\n      totalConsecutiveNumCorrectNum = totalConsecutiveNumCorrectNum + 1;\n      displayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum; // 最高連続正解数のカウントアップ\n\n      if (totalMaxConsecutiveNumCorrectNum < totalConsecutiveNumCorrectNum) {\n        totalMaxConsecutiveNumCorrectNum = totalMaxConsecutiveNumCorrectNum + 1;\n        displayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n      }\n\n      ;\n    }\n\n    ; // 以上、正解数をカウントアップする処理を定義する。--------------------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        correctTyping();\n      } else if (keyDownChar.key === \"e\" && charArrayInDisplayWord[0].textContent === \"é\" && playEndFlag === \"0\") {\n        // éの場合は例外的にeでOKとする。\n        correctTyping();\n      } else if (playEndFlag === \"0\") {\n        // タイプミス音を発生させる。\n        typeMissAudio();\n      } else {}\n\n      ;\n    }\n\n    ; // 以上、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n    // ------------------------------------------------------------------------------------\n\n    function correctTyping() {\n      // タイプ音を定義する。\n      // タイプ音ありの場合のみ\n      if (typeAudioMode == \"タイプ音あり\") {\n        var _typeAudioMode = new Audio('/assets/typeAudio.mp3'); // タイプ音を発生させる。\n\n\n        _typeAudioMode.volume = 0.3;\n\n        _typeAudioMode.play();\n      }\n\n      ; // 文字色を変更する。\n\n      charArrayInDisplayWord[0].className = \"add_red\"; // 一致した文字を配列から削除する。\n\n      charArrayInDisplayWord.shift(); // メーターを更新する。\n\n      bonusCountMeter = bonusCountMeter + 1; // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWord.length === 0) {\n        // 正解音を定義する。\n        // 正解音ありの場合のみ\n        if (correctAudioMode == \"正解音あり\") {\n          var correctAudio = new Audio('/assets/correctAudio.mp3'); // 正解した場合、効果音を発生させる。\n\n          correctAudio.volume = 0.3;\n          correctAudio.play();\n        }\n\n        ; // 「答えを見る」を押していなければ、スコアと正解数をカウントアップする。\n\n        if (answerOpenFlag == \"0\") {\n          // プレイモード：練習・普通の場合のみ、スコアアップする。\n          if (playMode == \"練習\" || playMode == \"普通\") {\n            countUpScore();\n          }\n\n          ;\n          countUpCorrectNum(); // 「答えを見る」を押していない場合、正解として記録する。\n\n          allQuestionWords.splice(allQuestionWords.length - 2, 1, \"正解\");\n        } else {\n          // 「答えを見る」を押していれば、フラグを0に戻す。\n          answerOpenFlag = \"0\"; // 「答えを見る」を押している場合、不正解として記録する。\n\n          allQuestionWords.splice(allQuestionWords.length - 2, 1, \"不正解\");\n        }\n\n        ; // 解答するまでにかかった時間を記録する。\n\n        eachQuestionAnswerTime = Math.ceil((Date.now() - eachQuestionCreateTime) / 1000);\n        var eachQuestionAnswerMin = Math.floor(eachQuestionAnswerTime / 60);\n        var eachQuestionAnswerSec = Math.ceil(eachQuestionAnswerTime % 60);\n        allQuestionWords.splice(allQuestionWords.length - 1, 1, \"\".concat(\"0\".concat(eachQuestionAnswerMin).slice(-2), \":\").concat(\"0\".concat(eachQuestionAnswerSec).slice(-2))); // 出題したすべての英単語リストに追加する。\n\n        allQuestionWordsList.push(allQuestionWords); // 丸を表示、答えを表示するなどのアニメーションを実施する。\n\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n        setTimeout(createDisplayWord, 500);\n        setTimeout(function () {\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n        }, 500);\n\n        if (playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") {\n          gameClose();\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ; // 以上、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function typeMissAudio() {\n      // ミス音を定義する。\n      // ミス音ありの場合のみ\n      if (incorrectAudioMode == \"ミス音あり\") {\n        var incorrectAudio = new Audio('/assets/incorrectAudio.mp3'); // ミスの場合、効果音を発生させる。\n\n        incorrectAudio.volume = 0.3;\n        incorrectAudio.play();\n      }\n\n      ;\n    }\n\n    ; // 以上、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n    // ------------------------------------------------------------------------------------\n    // 以下、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n    // ------------------------------------------------------------------------------------\n\n    function pronounce(eng_word) {\n      // résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n      if (eng_word == \"résumé\") {\n        eng_word = \"rezumei\";\n      }\n\n      ;\n      var pronunciation = new Audio('/assets/発音/' + eng_word + '.mp3');\n      pronunciation.play();\n    }\n\n    ; // 以上、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n    // ------------------------------------------------------------------------------------\n  }\n\n  ;\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_eng.js"],"names":["window","addEventListener","document","keyDownGameStart","gameStartEnterOnlyOnce","keyDownEnter","key","getElementById","className","gameStart","wordList","gon","wordListAll","playMode","questionOrderMode","pronounceMode","bgmMode","typeAudioMode","correctAudioMode","incorrectAudioMode","imgArray","sortById","eachQuestionOrder","bonusCountMeter","bonusCountMeterMax","displayBonusAddPlayTime","bonusAddPlayTime","src","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","typingPlayStart","displayWord","displayWordJapanese","displayWordAnnotation","charArrayInDisplayWord","allQuestionWords","allQuestionWordsList","playEndFlag","answerOpenFlag","gameCompleteTimeAttackFlag","eachQuestionCreateTime","eachQuestionAnswerTime","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","totalPlayingTimeMSec","setTimeout","countDownTime","timerId","circleImg","classList","add","pronounceAgainButton","innerHTML","onclick","pronounce","displayWordInList","eng_word","hintButton","remove","answerButton","i","length","totalConsecutiveNumCorrectNum","displayConsecutiveNumCorrectNum","restartButtonMidGame","courseSettingBackButtonMidGame","displayScoreEntire","displayScore","displayP","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","NumCorrectMidGamePlay","displayNumCorrectWord","displayNumCorrectNum","totalNumCorrectNum","displayConsecutiveNumCorrectWord","displayMaxConsecutiveNumCorrectWord","displayMaxConsecutiveNumCorrectNum","totalMaxConsecutiveNumCorrectNum","keyDownCharCountUp","randomIntegerInTotalWordList","Math","floor","random","splice","push","id","jap_trans_1","duplicateWords","filter","duplicateWord","duplicateWordsList","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainAllSec","ceil","remainMin","remainSec","remainSecLabel","slice","gameClose","closePopup","closePopupTotalQuestionNum","closePopupFinalCorrectNum","closePopupFinalMaxConsecutiveCorrectNum","restartBtn","backBtn","checkQuestions","allQuestionsListEntireScr","allQuestionsList","forEach","tr","objArray","Object","entries","console","log","arr","td","closeAllQuestionsList","toLocaleString","remainAllSecTimeAttack","remainMinTimeAttack","remainSecTimeAttack","countUpScore","addPoint","setAttribute","countElm","$","countSpeed","each","self","countMax","attr","thisCount","text","countTimer","countUpAnime","countNext","countUpCorrectNum","keyDownChar","correctTyping","typeMissAudio","Audio","volume","play","shift","correctAudio","eachQuestionAnswerMin","eachQuestionAnswerSec","incorrectAudio","pronunciation"],"mappings":"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","sourcesContent":["// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function(){\n\t// Enterを押下するとゲーム開始のカウントダウンがスタートする処理を呼び出す。\n\tdocument.addEventListener(`keydown`, keyDownGameStart);\n});\n\n// スペースかEnterキー押下によるゲームスタートを一回限りとするフラグを設定する。\n\tlet gameStartEnterOnlyOnce = \"0\";\n\n// スペースかEnterキーを押下するとゲーム開始のカウントダウンがスタートする。\nfunction keyDownGameStart(keyDownEnter){\n\tif ((keyDownEnter.key === 'Enter' || keyDownEnter.key === \" \") && gameStartEnterOnlyOnce == \"0\") {\n\t\t// 表示されている文字を非表示にする。\n\t\tdocument.getElementById(\"useKeyboardPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"pressEnterPopup\").className = \"transparent\";\n\t\tdocument.getElementById(\"annotationAudio\").className = \"transparent\";\n\t\tdocument.getElementById(\"backBtnTypingPlay\").className = \"transparent\";\n\t\tgameStartEnterOnlyOnce = \"1\";\n\t\tgameStart();\n\t};\n};\n\n\n// 選択した英単語難易度によって変わるwordListの定義\nconst wordList = gon.wordListAll;\n\n// 選択したプレイモードによって変わるplayModeの定義\nconst playMode = gon.playMode;\n\n// 出題順の設定によって変わるpronounceModeの定義\nconst questionOrderMode = gon.questionOrderMode;\n\n// 英単語の発音有無の設定によって変わるpronounceModeの定義\nconst pronounceMode = gon.pronounceMode;\n\n// BGMの設定によって変わるbgmModeの定義\nconst bgmMode = gon.bgmMode;\n\n// タイプ音の設定によって変わるtypeAudioModeの定義\nconst typeAudioMode = gon.typeAudioMode;\n\n// 正解音の設定によって変わるcorrectAudioModeの定義\nconst correctAudioMode = gon.correctAudioMode;\n\n// ミス音の設定によって変わるincorrectAudioModeの定義\nconst incorrectAudioMode = gon.incorrectAudioMode;\n\n\n\nfunction gameStart(){\n\n\t// 表示する単語リストを定義する。\n\t// chromeの場合\"ff\"が正常に動作しない。\n\n\t// 表示するメーターリストを定義する。\n\tconst imgArray =[\n\t\t'/assets/メーターPNG/メーター0.png',\n\t\t'/assets/メーターPNG/メーター10_yellow.png',\n\t\t'/assets/メーターPNG/メーター20_yellow.png',\n\t\t'/assets/メーターPNG/メーター30_yellow.png',\n\t\t'/assets/メーターPNG/メーター40_yellow.png',\n\t\t'/assets/メーターPNG/メーター50_yellow.png',\n\t\t'/assets/メーターPNG/メーター60_yellow.png',\n\t\t'/assets/メーターPNG/メーター70_yellow.png',\n\t\t'/assets/メーターPNG/メーター80_yellow.png',\n\t\t'/assets/メーターPNG/メーター90_yellow.png',\n\t\t'/assets/メーターPNG/メーター100_yellow.png',\n\t\t'/assets/メーターPNG/メーター10_green.png',\n\t\t'/assets/メーターPNG/メーター20_green.png',\n\t\t'/assets/メーターPNG/メーター30_green.png',\n\t\t'/assets/メーターPNG/メーター40_green.png',\n\t\t'/assets/メーターPNG/メーター50_green.png',\n\t\t'/assets/メーターPNG/メーター60_green.png',\n\t\t'/assets/メーターPNG/メーター70_green.png',\n\t\t'/assets/メーターPNG/メーター80_green.png',\n\t\t'/assets/メーターPNG/メーター90_green.png',\n\t\t'/assets/メーターPNG/メーター100_green.png',\n\t\t'/assets/メーターPNG/メーター10_blue.png',\n\t\t'/assets/メーターPNG/メーター20_blue.png',\n\t\t'/assets/メーターPNG/メーター30_blue.png',\n\t\t'/assets/メーターPNG/メーター40_blue.png',\n\t\t'/assets/メーターPNG/メーター50_blue.png',\n\t\t'/assets/メーターPNG/メーター60_blue.png',\n\t\t'/assets/メーターPNG/メーター70_blue.png',\n\t\t'/assets/メーターPNG/メーター80_blue.png',\n\t\t'/assets/メーターPNG/メーター90_blue.png',\n\t\t'/assets/メーターPNG/メーター100_blue.png',\n\t\t'/assets/メーターPNG/メーター10_pink.png',\n\t\t'/assets/メーターPNG/メーター20_pink.png',\n\t\t'/assets/メーターPNG/メーター30_pink.png',\n\t\t'/assets/メーターPNG/メーター40_pink.png',\n\t\t'/assets/メーターPNG/メーター50_pink.png',\n\t\t'/assets/メーターPNG/メーター60_pink.png',\n\t\t'/assets/メーターPNG/メーター70_pink.png',\n\t\t'/assets/メーターPNG/メーター80_pink.png',\n\t\t'/assets/メーターPNG/メーター90_pink.png',\n\t\t'/assets/メーターPNG/メーター100_pink.png',\n\t\t'/assets/メーターPNG/メーター10_red.png',\n\t\t'/assets/メーターPNG/メーター20_red.png',\n\t\t'/assets/メーターPNG/メーター30_red.png',\n\t\t'/assets/メーターPNG/メーター40_red.png',\n\t\t'/assets/メーターPNG/メーター50_red.png',\n\t\t'/assets/メーターPNG/メーター60_red.png',\n\t\t'/assets/メーターPNG/メーター70_red.png',\n\t\t'/assets/メーターPNG/メーター80_red.png',\n\t\t'/assets/メーターPNG/メーター90_red.png',\n\t\t'/assets/メーターPNG/メーター100_red.png'\n\t];\n\n\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\tlet sortById = 0;\n\n\t// 英単語の出題順の初期値を定義する。\n\tlet eachQuestionOrder = 0;\n\n\t// 表示するメーター初期値を定義する。\n\tlet bonusCountMeter = 0;\n\t// 表示するメーター最大値を定義する。\n\tconst bonusCountMeterMax = 50;\n\t// 表示するプレイ延長時間を定義する。\n\tconst displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n\tdisplayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n\t// メーター最大値に達した際の延長するプレイ時間を定義する。\n\tconst bonusAddPlayTime = 3000;\n\n\n\t// メーターの初期値を表示する。\n\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t// ゲーム開始までをカウントダウン変数を定義する。\n\tlet countDownPopup = document.getElementById(\"countDownPopup\");\n\t// class属性を付与する。\n\tcountDownPopup.className = \"countDownPopup\";\n\t// ゲーム開始までをカウントダウン変数の初期値を定義する。\n\tlet countDownPopupNumber = 3;\n\t// ゲーム開始までをカウントダウン変数の初期値を表示する。\n\tcountDownPopup.textContent = countDownPopupNumber;\n\n\n\t// ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\tconst timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n\n\n\n\t\t// ゲーム開始までをカウントダウンを実施する処理を定義する。\n\t\tfunction countDownTimeToStart(){\n\t\t\t\t// カウントダウン文字を１ずつ減らす。\n\t\t\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n\t\t\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\t\t\tif (countDownPopupNumber <= 0){\n\t\t\t\tclearInterval(timerIdToStart);\n\t\t\t\t// カウントダウンポップアップのクラスを変更し、非表示にする。\n\t\t\t\tcountDownPopup.className = \"countDownPopupAfterClose\";\n\t\t\t\ttypingPlayStart();\n\t\t\t\t} else {\n\t\t\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t\t\t}\n\t\t}\n\n\n\t\t// ゲームを開始する処理を定義する。\n\t\tfunction typingPlayStart(){\n\n\t\t\t\t// 表示する単語を定義する。\n\t\t\t\tconst displayWord = document.getElementById(\"displayWord\");\n\t\t\t\tdisplayWord.className =  \"displayWord\";\n\t\t\t\tconst displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n\t\t\t\tdisplayWordJapanese.className =  \"displayWordJapanese\";\n\t\t\t\tconst displayWordAnnotation = document.getElementById(\"displayWordAnnotation\");\n\t\t\t\tdisplayWordAnnotation.className =  \"transparent\";\n\n\t\t\t\t// 表示する単語を一文字ずつに分ける変数を定義する。\n\t\t\t\tlet charArrayInDisplayWord =[];\n\n\t\t\t\t// 出題した英単語を格納する配列を定義する。\n\t\t\t\tlet allQuestionWords =[];\n\t\t\t\t// 出題したすべての英単語を格納する配列を定義する。\n\t\t\t\tlet allQuestionWordsList =[];\n\n\n\t\t\t\t// ゲーム終了を判定するフラグを定義する。\n\t\t\t\tlet playEndFlag = \"0\";\n\n\t\t\t\t// 「答えを見る」ボタン押下有無を判定するフラグを定義する。\n\t\t\t\tlet answerOpenFlag = \"0\";\n\n\t\t\t\t// プレイモード：タイムアタックですべての出題範囲に解答済み判定フラグを設定する。\n\t\t\t\tlet gameCompleteTimeAttackFlag = \"0\";\n\n\t\t\t\t// 問題を作成した時間を定義する。\n\t\t\t\tlet eachQuestionCreateTime = 0;\n\t\t\t\t// 問題を解答するのに要した時間を定義する。\n\t\t\t\tlet eachQuestionAnswerTime = 0;\n\n\t\t\t\t// 表示する単語を作成する。\n\t\t\t\tcreateDisplayWord();\n\n\t\t\t\t// プレイ開始時間を取得する。\n\t\t\t\tconst startTime = Date.now();\n\t\t\t\t// 表示する残りのプレイ可能時間を定義する。\n\t\t\t\tlet remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n\t\t\t\tremainPlayingTime.className =  \"remainPlayingTime\";\n\t\t\t\t// 表示するスタート時のプレイ可能時間を定義する。\n\t\t\t\t// プレイモード：タイムアタックの場合は5分とする。\n\t\t\t\tlet initialPlayingTimeMSec = 3000;\n\n\t\t\t\t// プレイモード：タイムアタックの場合は30分とする。\n\t\t\t\tif ( playMode == \"タイムアタック\") {\n\t\t\t\t\tinitialPlayingTimeMSec = 1800000;\n\t\t\t\t};\n\t\t\t\t// プレイモード：タイムアタックの場合、ゲームクリア後に合計プレイ時間表示する。\n\t\t\t\tlet totalPlayingTimeMSec = 0;\n\n\t\t\t\t// スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\t\t\t\tsetTimeout(countDownTime,0);\n\t\t\t\t// 1秒ごとにcountDownTimeを実施するように定義する。\n\t\t\t\tconst timerId = setInterval(countDownTime,1000);\n\n\t\t\t\t// 正解時に表示する丸を定義する。\n\t\t\t\tdocument.getElementById(\"circleImg\").src= '/assets/正解○.png';\n\t\t\t\tcircleImg.classList.add('transparent');\n\n\n\t\t\t\t// \"発音を聞く\"ボタンを表示する。\n\t\t\t\tlet pronounceAgainButton = document.getElementById(\"pronounceAgainButton\");\n\t\t\t\tpronounceAgainButton.innerHTML = \"発音を聞く\";\n\t\t\t\tpronounceAgainButton.className = \"pronounceAgainButton\";\n\t\t\t\tpronounceAgainButton.onclick = function() {\n\t\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t};\n\t\t\t\t// \"ヒントを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\t\t\t\tlet hintButton = document.getElementById(\"hintButton\");\n\t\t\t\thintButton.innerHTML = \"ヒントを見る\";\n\t\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\" ) {\n\t\t\t\t\thintButton.className = \"hintButton\";\n\t\t\t\t\thintButton.onclick = function() {\n\t\t\t\t\t\tcharArrayInDisplayWord[0].classList.remove('transparent');\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\thintButton.className = \"hintButtonPractice\";\n\t\t\t\t};\n\t\t\t\t// \"答えを見る\"ボタンを表示する。(プレイモード普通、タイムアタックの時のみ機能)\n\t\t\t\tlet answerButton = document.getElementById(\"answerButton\");\n\t\t\t\tanswerButton.innerHTML = \"答えを見る\";\n\t\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\" ) {\n\t\t\t\t\tanswerButton.className = \"answerButton\";\n\t\t\t\t\tanswerButton.onclick = function() {\n\t\t\t\t\t\tfor (let i = 0; i < charArrayInDisplayWord.length; i++) {\n\t\t\t\t\t\t\tcharArrayInDisplayWord[i].classList.remove('transparent');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 連続正解数を0に戻す。\n\t\t\t\t\t\ttotalConsecutiveNumCorrectNum = 0;\n\t\t\t\t\t\tdisplayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t\t\t\t// メーターを初期値に戻す。\n\t\t\t\t\t\tbonusCountMeter = 0;\n\t\t\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\t\t\t\t\t\t// 「答えを見る」判定フラグを更新する。\n\t\t\t\t\t\tanswerOpenFlag = \"1\";\n\n\t\t\t\t\t};\n\t\t\t\t} else { // (プレイモード練習の時)\n\t\t\t\t\tanswerButton.className = \"answerButtonPractice\";\n\t\t\t\t};\n\n\t\t\t\t// \"最初からやり直す\"ボタンを表示する。\n\t\t\t\tconst restartButtonMidGame = document.getElementById(\"restartButtonMidGame\");\n\t\t\t\trestartButtonMidGame.classList.remove('transparent');\n\t\t\t\t// \"コース選択画面に戻る\"ボタンを表示する。\n\t\t\t\tconst courseSettingBackButtonMidGame = document.getElementById(\"courseSettingBackButtonMidGame\");\n\t\t\t\tcourseSettingBackButtonMidGame.classList.remove('transparent');\n\n\n\t\t\t\t// 以下、スコア定義---------------------------------------------------------------------------------------------------\n\t\t\t\t// -----------------------------------------------------------------------------------------------------------------\n\n\t\t\t\t// プレイモード：練習・普通の場合はスコアを表示させる。\n\t\t\t\t// プレイモード：タイムアタックはスコアを表示させない。\n\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t// 表示するスコアを定義する。\n\t\t\t\tlet displayScoreEntire = document.getElementById(\"displayScoreEntire\");\n\t\t\t\tdisplayScoreEntire.className =  \"displayScoreEntire\";\n\t\t\t\tlet displayScore = document.getElementById(\"displayScore\");\n\t\t\t\tdisplayScore.className =  \"displayScore\";\n\t\t\t\tlet displayP = document.getElementById(\"displayP\");\n\t\t\t\tdisplayP.className =  \"displayP\";\n\t\t\t\t};\n\n\t\t\t\t// プレモード：練習・普通の場合のみ使用する。----------------------------\n\t\t\t\t// ---------------------------------------------------------------\n\t\t\t\t// 合計スコアの初期値を定義する。\n\t\t\t\tlet totalScore = 0;\n\t\t\t\t// スコアアップする基準を定義する。\n\t\t\t\tconst refTextLengthForCountUpLevel1 = 4;\n\t\t\t\tconst addScoreLevel1 = 50;\n\t\t\t\tconst addScoreLevel2 = 50;\n\t\t\t\t// ---------------------------------------------------------------\n\t\t\t\t// ---------------------------------------------------------------\n\n\n\t\t\t\t// 表示する正解数全体のクラス\n\t\t\t\tlet NumCorrectMidGamePlay = document.getElementById(\"NumCorrectMidGamePlay\");\n\t\t\t\tNumCorrectMidGamePlay.className =  \"NumCorrectMidGamePlay\";\n\n\t\t\t\t// 表示する正解数を定義する。\n\t\t\t\tlet displayNumCorrectWord = document.getElementById(\"displayNumCorrectWord\");\n\t\t\t\tdisplayNumCorrectWord.className =  \"displayNumCorrectWord\";\n\t\t\t\tdisplayNumCorrectWord.textContent = \"合計正解数\";\n\t\t\t\tlet displayNumCorrectNum = document.getElementById(\"displayNumCorrectNum\");\n\t\t\t\tdisplayNumCorrectNum.className =  \"displayNumCorrectNum\";\n\t\t\t\tlet totalNumCorrectNum = 0;\n\t\t\t\tdisplayNumCorrectNum.textContent = totalNumCorrectNum;\n\n\t\t\t\t// 表示する連続正解数を定義する。\n\t\t\t\tlet displayConsecutiveNumCorrectWord = document.getElementById(\"displayConsecutiveNumCorrectWord\");\n\t\t\t\tdisplayConsecutiveNumCorrectWord.className =  \"displayConsecutiveNumCorrectWord\";\n\t\t\t\tdisplayConsecutiveNumCorrectWord.textContent = \"連続正解数\";\n\t\t\t\tlet displayConsecutiveNumCorrectNum = document.getElementById(\"displayConsecutiveNumCorrectNum\");\n\t\t\t\tdisplayConsecutiveNumCorrectNum.className =  \"displayConsecutiveNumCorrectNum\";\n\t\t\t\tlet totalConsecutiveNumCorrectNum = 0;\n\t\t\t\tdisplayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t\t// 表示する最高連続正解数を定義する。\n\t\t\t\tlet displayMaxConsecutiveNumCorrectWord = document.getElementById(\"displayMaxConsecutiveNumCorrectWord\");\n\t\t\t\tdisplayMaxConsecutiveNumCorrectWord.className =  \"displayMaxConsecutiveNumCorrectWord\";\n\t\t\t\tdisplayMaxConsecutiveNumCorrectWord.textContent = \"最高連続正解数\";\n\t\t\t\tlet displayMaxConsecutiveNumCorrectNum = document.getElementById(\"displayMaxConsecutiveNumCorrectNum\");\n\t\t\t\tdisplayMaxConsecutiveNumCorrectNum.className =  \"displayMaxConsecutiveNumCorrectNum\";\n\t\t\t\tlet totalMaxConsecutiveNumCorrectNum = 0;\n\t\t\t\tdisplayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n\n\t\t\t\t// 以上、スコア定義---------------------------------------------------------------------------------------------------\n\t\t\t\t// -----------------------------------------------------------------------------------------------------------------\n\n\n\t\t\t\t// タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\t\t\t\tdocument.addEventListener(`keydown`, keyDownCharCountUp);\n\n\n\n\t\t\t\t// 以下、表示する単語を作成する処理を定義する。-----------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction createDisplayWord(){\n\t\t\t\t\t// すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n\t\t\t\t\t// ギリギリで問題に正解した場合、○を表示した後、500m秒後にワードを生成する処理が走るため。\n\t\t\t\t\tif(playEndFlag === \"0\"){\n\n\t\t\t\t\t\t// 表示単語を初期化する。\n\t\t\t\t\t\tdisplayWord.textContent = \"\";\n\n\t\t\t\t\t\t// 問題を作成した時間を記録する。\n\t\t\t\t\t\teachQuestionCreateTime = Date.now();\n\n\t\t\t\t\t\t// 前回の問題に要した時間を初期値に戻す。\n\t\t\t\t\t\teachQuestionAnswerTime = 0;\n\n\t\t\t\t\t\t// 出題順の設定により、displayWordInListを変更\n\t\t\t\t\t\tif (questionOrderMode == \"番号順\") {\n\t\t\t\t\t\t\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\t\t\t\t\t\t\tdisplayWordInList = wordList[sortById];\n\t\t\t\t\t\t\tsortById++;\n\t\t\t\t\t\t\t// sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\t\t\t\t\t\t\tif (sortById >= wordList.length) {\n\t\t\t\t\t\t\t\tsortById = 0;\n\t\t\t\t\t\t\t\t// プレイモード：タイムアタックの場合、次の問題に正解した時点でゲーム終了とする。\n\t\t\t\t\t\t\t\tif ( playMode == \"タイムアタック\" ) {\n\t\t\t\t\t\t\t\t\t// フラグを1に更新する。\n\t\t\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"1\";\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\n\n\t\t\t\t\t\t} else { // 出題順がランダムの場合\n\t\t\t\t\t\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\t\t\t\t\t\tlet randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\n\t\t\t\t\t\t\t// 表示する単語をランダムで選定する。\n\t\t\t\t\t\t\tdisplayWordInList = wordList[randomIntegerInTotalWordList];\n\n\t\t\t\t\t\t\t// プレイモード：タイムアタックの場合は、wordListから表示単語を削除する。\n\t\t\t\t\t\t\tif ( playMode == \"タイムアタック\" ) {\n\t\t\t\t\t\t\t\t// 同じ問題を２度出題しないように、一度出題した問題はwordListから削除する。\n\t\t\t\t\t\t\t\twordList.splice( randomIntegerInTotalWordList, 1);\n\t\t\t\t\t\t\t\t// wordList.length == 0になった場合、次の問題に正解した時点でゲーム終了とする。\n\t\t\t\t\t\t\t\tif (wordList.length == 0){\n\t\t\t\t\t\t\t\t\t// フラグを1に更新する。\n\t\t\t\t\t\t\t\t\tgameCompleteTimeAttackFlag = \"1\";\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 前回出題した英単語を allQuestionWords から削除し、初期値に戻す。\n\t\t\t\t\t\tallQuestionWords = [];\n\t\t\t\t\t\t// 問題の出題順を+1する。\n\t\t\t\t\t\teachQuestionOrder = eachQuestionOrder + 1;\n\t\t\t\t\t\t// 出題した英単語displayWordInList を allQuestionWords に格納する。\n\t\t\t\t\t\tallQuestionWords.push(eachQuestionOrder, displayWordInList.id,\"▷\" ,displayWordInList.eng_word, displayWordInList.jap_trans_1, \"未解答\", \"-\");\n\n\n\t\t\t\t\t\t// 英単語を生成した際に、発音させる。（発音ありの場合のみ）\n\t\t\t\t\t\tif (pronounceMode == \"発音あり\") {\n\t\t\t\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 表示する単語の日本語訳を表示させる。\n\t\t\t\t\t\tdisplayWordJapanese.textContent = displayWordInList.jap_trans_1;\n\n\t\t\t\t\t\t// 日本語訳が同じ英単語が複数ある場合に備えて、重複するかを判定し、重複する場合は重複する英単語を表示し、それ以外を答えるように誘導する。\n\t\t\t\t\t\t// プレイモード練習では答えを表示しているため処理不要\n\t\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\t\t// 前の問題に注釈がある場合消す。\n\t\t\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t\t\t// ランダムで選ばれた英単語の日本語訳でワードリストをフィルター\n\t\t\t\t\t\t\tlet duplicateWords = wordList.filter(duplicateWord => duplicateWord.jap_trans_1 == displayWordInList.jap_trans_1);\n\t\t\t\t\t\t\t// 日本語訳が重複している他の英単語がある場合\n\t\t\t\t\t\t\tif (duplicateWords.length > 1) {\n\t\t\t\t\t\t\t\t// 重複している英単語の配列（この時点では答えを含む）を定義する。\n\t\t\t\t\t\t\t\tlet duplicateWordsList = [];\n\t\t\t\t\t\t\t\tfor (let i = 0; i < duplicateWords.length; i++) {\n\t\t\t\t\t\t\t\t\t// 重複している英単語のみ（答え以外の英単語）を配列duplicateWordsListに格納する。\n\t\t\t\t\t\t\t\t\tif (duplicateWords[i].id !== displayWordInList.id){\n\t\t\t\t\t\t\t\t\t\tduplicateWordsList.push(duplicateWords[i].eng_word);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tdisplayWordAnnotation.textContent = `※${duplicateWordsList}以外`;\n\t\t\t\t\t\t\t\tdisplayWordAnnotation.className = \"displayWordAnnotation\";\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t\t\t\t\t// spanタグで閉じた単語を表示する。\n\t\t\t\t\t\tcharArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n\t\t\t\t\t\t\t// spanタグを作成する。\n\t\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\t\t// spanタグに一文字を挿入する。\n\t\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\t\t// 各アルファベットに対して、transparentクラスを付与する。（プレイモード普通、タイムアタックのときのみ）\n\t\t\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\t\t\tspanValue.className = \"transparent\";\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\t\t\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、表示する単語を作成する処理を定義する。-----------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction countDownTime(){\n\t\t\t\t\tconst currentTime = Date.now();\n\t\t\t\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\t\t\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\t\t\t\tconst remainAllSec = Math.ceil(remainMSec/1000);\n\t\t\t\t\tconst remainMin = Math.floor(remainAllSec / 60);\n\t\t\t\t\tconst remainSec = Math.ceil(remainAllSec % 60);\n\t\t\t\t\tlet  remainSecLabel = `残り${(`0${remainMin}` ).slice( -2 )}分${(`0${remainSec}` ).slice( -2 )}秒`;\n\n\t\t\t\t\t// 残り時間が0になった場合の処理を定義する。\n\t\t\t\t\tif (remainMSec <= 0){\n\t\t\t\t\t\tgameClose();\n\t\t\t\t\t}\n\t\t\t\t\t// 残りプレイ可能時間を更新する。\n\t\t\t\t\tremainPlayingTime.textContent = remainSecLabel;\n\n\t\t\t\t\t// プレイモード：タイムアタックの場合は、使用時間を最後に表示する。\n\t\t\t\t\tif (playMode == \"タイムアタック\"){\n\t\t\t\t\t\ttotalPlayingTimeMSec = diffBetweenCurrentTimeAndStartTime;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、プレイ時間をカウントダウンする処理を定義する。-----------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、ゲーム終了時の処理を定義する。------------------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction gameClose(){\n\t\t\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\t\t\tplayEndFlag = \"1\";\n\t\t\t\t\t// プレイ時間のカウントダウンを止める。\n\t\t\t\t\tclearInterval(timerId);\n\n\t\t\t\t\t// 最後に出題していた英単語を allQuestionWordsList に格納する。\n\t\t\t\t\t// ただし、プレイモード：タイムアタックでクリアしている場合、出題している単語はないため処理不要。\n\t\t\t\t\t// また、終了直前で正解した場合、次の問題生成前に本処理に入り、最後に正解した問題が２つ表示されるため、\"未解答\"であることも条件に加える。\n\t\t\t\t\tif ( !( playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\")\n\t\t\t\t\t\t&& allQuestionWords[allQuestionWords.length - 2] == \"未解答\") {\n\t\t\t\t\t\t// 出題したすべての英単語リストに追加する。\n\t\t\t\t\t\tallQuestionWordsList.push(allQuestionWords);\n\t\t\t\t\t};\n\n\t\t\t\t\t// 残り時間の表示を消す。\n\t\t\t\t\tremainPlayingTime.className = \"transparent\";\n\t\t\t\t\t// 現在のスコア（左上）の表示を消す。\n\t\t\t\t\t// プレイモード：練習・普通の場合のみ\n\t\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\tdisplayScoreEntire.className = \"transparent\";\n\t\t\t\t\tdisplayScore.className = \"transparent\";\n\t\t\t\t\tdisplayP.className = \"transparent\";\n\t\t\t\t\t};\n\n\t\t\t\t\t//正解数全体のクラスを非表示にする。\n\t\t\t\t\tNumCorrectMidGamePlay.className = \"transparent\";\n\t\t\t\t\t// 正解数の表示を消す。\n\t\t\t\t\tdisplayNumCorrectWord.className = \"transparent\";\n\t\t\t\t\tdisplayNumCorrectNum.className = \"transparent\";\n\t\t\t\t\t// 連続正解数の表示を消す。\n\t\t\t\t\tdisplayConsecutiveNumCorrectWord.className = \"transparent\";\n\t\t\t\t\tdisplayConsecutiveNumCorrectNum.className = \"transparent\";\n\t\t\t\t\t// 最高連続正解数の表示を消す。\n\t\t\t\t\tdisplayMaxConsecutiveNumCorrectWord.className = \"transparent\";\n\t\t\t\t\tdisplayMaxConsecutiveNumCorrectNum.className = \"transparent\";\n\t\t\t\t\t// 問題の英単語の表示を消す。\n\t\t\t\t\tdisplayWord.textContent =\"\";\n\t\t\t\t\t// 解答の日本語の表示を消す。\n\t\t\t\t\tdisplayWordJapanese.textContent =\"\";\n\t\t\t\t\t// \"発音を聞く\"ボタンを消す。\n\t\t\t\t\tpronounceAgainButton.className = \"transparent\";\n\t\t\t\t\t// \"ヒントを見る\"ボタンを消す。\n\t\t\t\t\thintButton.className = \"transparent\";\n\t\t\t\t\t// \"答えを見る\"ボタンを消す。\n\t\t\t\t\tanswerButton.className = \"transparent\";\n\t\t\t\t\t// 注釈を消す。（プレイモード普通、タイムアタックの時のみ）\n\t\t\t\t\tif (playMode == \"普通\" || playMode == \"タイムアタック\") {\n\t\t\t\t\t\tdisplayWordAnnotation.className = \"transparent\";\n\t\t\t\t\t};\n\t\t\t\t\t// \"最初からやり直す\"ボタンを消す。\n\t\t\t\t\trestartButtonMidGame.className = \"transparent\";\n\t\t\t\t\t// \"コース選択画面に戻る\"ボタンを消す。\n\t\t\t\t\tcourseSettingBackButtonMidGame.className = \"transparent\";\n\n\t\t\t\t\t// 正解時に表示される○の画像を消す。\n\t\t\t\t\tcircleImg.className = \"transparent\";\n\n\t\t\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\t\t\tclosePopup.textContent =\"終了\";\n\t\t\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t\t\t// ゲーム終了後に、問題数、合計正解数、最大連続正解数を表示する。\n\t\t\t\t\tconst closePopupTotalQuestionNum = document.getElementById(\"closePopupTotalQuestionNum\");\n\t\t\t\t\tconst closePopupFinalCorrectNum = document.getElementById(\"closePopupFinalCorrectNum\");\n\t\t\t\t\tconst closePopupFinalMaxConsecutiveCorrectNum = document.getElementById(\"closePopupFinalMaxConsecutiveCorrectNum\");\n\n\t\t\t\t\t// もう一度ボタンを定義する。\n\t\t\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t\t\t// 戻るボタンを定義する。\n\t\t\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\n\t\t\t\t\t// 問題を振り返るボタンを定義する。\n\t\t\t\t\tconst checkQuestions = document.getElementById(\"checkQuestions\");\n\t\t\t\t\t// 出題問題リスト表示を定義する。\n\t\t\t\t\tconst allQuestionsListEntireScr = document.getElementById(\"allQuestionsListEntireScr\");\n\t\t\t\t\tconst allQuestionsList = document.getElementById(\"allQuestionsList\");\n\n\t\t\t\t\t// 出題した問題を表にする。\n\t\t\t\t\t// 出題した問題の数だけ処理を実施する。\n\t\t\t\t\tallQuestionWordsList.forEach((allQuestionWords) => {\n\t\t\t\t\t  const tr = document.createElement(\"tr\");\n\t\t\t\t\t  allQuestionsList.appendChild(tr);\n\t\t\t\t\t  // 問題ごとにobjArrayを変え、表に各項目を入れていく。\n\t\t\t\t\t  const objArray = Object.entries(allQuestionWords);\n\t\t\t\t\t  console.log(objArray);\n\t\t\t\t\t  objArray.forEach((arr) => {\n\t\t\t\t\t\tconsole.log(arr);\n\t\t\t\t\t\tconst td = document.createElement(\"td\");\n\t\t\t\t\t\ttd.textContent = arr[1];\n\t\t\t\t\t\tif (arr[1] == \"▷\") { // ▷を押下した時\n\t\t\t\t\t\t\ttd.onclick = function() {\n\t\t\t\t\t\t\t\tpronounce(objArray[3][1]); // その行の英単語を発音させる。\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t\ttr.appendChild(td);\n\t\t\t\t\t  });\n\t\t\t\t\t});\n\n\t\t\t\t\t// 出題した出題問題リストポップアップを表示した後の「閉じる」ボタンを定義する。\n\t\t\t\t\tconst closeAllQuestionsList = document.getElementById(\"closeAllQuestionsList\");\n\n\t\t\t\t\t// 「問題を振り返る」ボタン押下で出題問題リストポップアップを開く。\n\t\t\t\t\tcheckQuestions.onclick = function() {\n\t\t\t\t\t\t// メーターを非表示にする。\n\t\t\t\t\t\tdocument.getElementById(\"meterImg\").className = \"transparent\";\n\t\t\t\t\t\t// 出題問題リストを表示させる。\n\t\t\t\t\t\tallQuestionsListEntireScr.className = \"allQuestionsListEntireScr\";\n\t\t\t\t\t\tcloseAllQuestionsList.className = \"closeAllQuestionsList\";\n\t\t\t\t\t};\n\t\t\t\t\t// 「閉じる」ボタン押下で出題問題リストポップアップを閉じる。\n\t\t\t\t\t\tcloseAllQuestionsList.onclick = function() {\n\t\t\t\t\t\t// メーターを表示にさせる。\n\t\t\t\t\t\tdocument.getElementById(\"meterImg\").className = \"meter\";\n\t\t\t\t\t\t// 出題問題リストを非表示にする。\n\t\t\t\t\t\tallQuestionsListEntireScr.className = \"transparent\";\n\t\t\t\t\t\tcloseAllQuestionsList.className = \"transparent\";\n\t\t\t\t\t};\n\n\n\t\t\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t// 得点の表示\n\t\t\t\t\t// プレイモード：練習・普通の場合は、スコアを表示する。\n\t\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\t\tclosePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n\t\t\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t\t} else { // プレイモード：タイムアタックの場合は、かかった時間を表示する。\n\t\t\t\t\t\t\t// ただし、すべての出題範囲に解答できた場合のみ。\n\t\t\t\t\t\tif ( gameCompleteTimeAttackFlag == \"1\") {\n\t\t\t\t\t\t\tconst remainAllSecTimeAttack = Math.ceil(totalPlayingTimeMSec/1000);\n\t\t\t\t\t\t\tconst remainMinTimeAttack = Math.floor(remainAllSecTimeAttack / 60);\n\t\t\t\t\t\t\tconst remainSecTimeAttack = Math.ceil(remainAllSecTimeAttack % 60);\n\t\t\t\t\t\t\tclosePopup.textContent = `あなたがかかった時間は${(`0${remainMinTimeAttack}` ).slice( -2 )}分${(`0${remainSecTimeAttack}` ).slice( -2 )}秒です!`;\n\t\t\t\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t\t\t} else { // 時間切れの場合は、クリアできなかったと表示する。\n\t\t\t\t\t\t\tclosePopup.textContent = `残念ながらクリアできませんでした。`;\n\t\t\t\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// 最終結果として、問題数、合計正解数、最高連続正解数を表示する。\n\t\t\t\t\tclosePopupTotalQuestionNum.textContent = `出題数 : ${eachQuestionOrder}`;\n\t\t\t\t\tclosePopupFinalCorrectNum.textContent = `${displayNumCorrectWord.textContent}:${totalNumCorrectNum}`;\n\t\t\t\t\tclosePopupFinalMaxConsecutiveCorrectNum.textContent = `${displayMaxConsecutiveNumCorrectWord.textContent}:${totalMaxConsecutiveNumCorrectNum}`;\n\n\t\t\t\t\t// もう一度ボタンの表示（transparentを消して表示させる）\n\t\t\t\t\trestartBtn.classList.remove('transparent');\n\t\t\t\t\t// 戻るボタンの表示（transparentを消して表示させる）\n\t\t\t\t\tbackBtn.classList.remove('transparent');\n\t\t\t\t\t// 問題を振り返るボタンの表示\n\t\t\t\t\tcheckQuestions.className = \"checkQuestions\";\n\t\t\t\t\tcheckQuestions.textContent =\"問題を振り返る\";\n\t\t\t\t\t},2000);\n\t\t\t\t};\n\t\t\t\t// 以上、ゲーム終了時の処理を定義する。------------------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction countUpScore(){\n\t\t\t\tif (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\t\t\taddPoint = addScoreLevel1;\n\t\t\t\t} else {\n\t\t\t\t\taddPoint = addScoreLevel2;\n\t\t\t\t};\n\t\t\t\t\t// 合計得点を定義する。\n\t\t\t\t\ttotalScore = totalScore + addPoint;\n\t\t\t\t\tdisplayScore.setAttribute('data-num', totalScore);\n\n\t\t\t\t\tvar countElm = $('.displayScore'),\n\t\t\t\t\tcountSpeed = 10;\n\n\t\t\t\t\tcountElm.each(function(){\n\t\t\t\t\t\tvar self = $(this),\n\t\t\t\t\t\t// 合計得点を定義する。\n\t\t\t\t\t\tcountMax = self.attr('data-num'),\n\t\t\t\t\t\tthisCount = self.text(),\n\t\t\t\t\t\tcountTimer;\n\t\t\t\t\t\tcountUpAnime();\n\n\t\t\t\t\t\t// 数値をカウントアップするアニメーションを定義する。\n\t\t\t\t\t\tfunction countUpAnime(){\n\t\t\t\t\t\t\tcountTimer = setInterval(function(){\n\t\t\t\t\t\t\t\tvar countNext = thisCount++;\n\t\t\t\t\t\t\t\tself.text(countNext);\n\t\t\t\t\t\t\t\tif(countNext == countMax){\n\t\t\t\t\t\t\t\t\tclearInterval(countTimer);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},countSpeed);\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\t// 以上、スコアをアップし、現在のtotalScoreを表示する処理を定義する。---------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、正解数をカウントアップする処理を定義する。--------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction countUpCorrectNum(){\n\t\t\t\t\t// 合計正解数のカウントアップ\n\t\t\t\t\ttotalNumCorrectNum = totalNumCorrectNum + 1;\n\t\t\t\t\tdisplayNumCorrectNum.textContent = totalNumCorrectNum;\n\n\t\t\t\t\t// 連続正解数のカウントアップ\n\t\t\t\t\ttotalConsecutiveNumCorrectNum = totalConsecutiveNumCorrectNum + 1;\n\t\t\t\t\tdisplayConsecutiveNumCorrectNum.textContent = totalConsecutiveNumCorrectNum;\n\n\t\t\t\t\t// 最高連続正解数のカウントアップ\n\t\t\t\t\tif (totalMaxConsecutiveNumCorrectNum < totalConsecutiveNumCorrectNum) {\n\t\t\t\t\t\ttotalMaxConsecutiveNumCorrectNum = totalMaxConsecutiveNumCorrectNum + 1;\n\t\t\t\t\t\tdisplayMaxConsecutiveNumCorrectNum.textContent = totalMaxConsecutiveNumCorrectNum;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、正解数をカウントアップする処理を定義する。--------------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t} else if (keyDownChar.key === \"e\"\n\t\t\t\t\t\t\t\t&& charArrayInDisplayWord[0].textContent === \"é\"\n\t\t\t\t\t\t\t\t&& playEndFlag===\"0\") {\n\t\t\t\t\t\t// éの場合は例外的にeでOKとする。\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t} else if (playEndFlag===\"0\") {\n\t\t\t\t\t\t// タイプミス音を発生させる。\n\t\t\t\t\t\ttypeMissAudio();\n\t\t\t\t\t} else {\n\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、タイプした文字が表示文字と一致する場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction correctTyping(){\n\t\t\t\t\t// タイプ音を定義する。\n\t\t\t\t\t// タイプ音ありの場合のみ\n\t\t\t\t\tif (typeAudioMode == \"タイプ音あり\") {\n\t\t\t\t\t\tlet typeAudioMode = new Audio('/assets/typeAudio.mp3');\n\t\t\t\t\t\t// タイプ音を発生させる。\n\t\t\t\t\t\ttypeAudioMode.volume = 0.3;\n\t\t\t\t\t\ttypeAudioMode.play();\n\t\t\t\t\t};\n\t\t\t\t\t// 文字色を変更する。\n\t\t\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t\t\t// 一致した文字を配列から削除する。\n\t\t\t\t\tcharArrayInDisplayWord.shift();\n\n\t\t\t\t\t// メーターを更新する。\n\t\t\t\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t\t\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\t\t\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\t\t\t\tbonusCountMeter = 0;\n\t\t\t\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\t\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\t\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\t\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\t\t\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t\t\t\t}, 2000);\n\t\t\t\t\t};\n\t\t\t\t\t// 更新したメーターを表示する。\n\t\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n\t\t\t\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\t\t\t\tif(charArrayInDisplayWord.length === 0) {\n\t\t\t\t\t\t// 正解音を定義する。\n\t\t\t\t\t\t// 正解音ありの場合のみ\n\t\t\t\t\t\tif (correctAudioMode == \"正解音あり\") {\n\t\t\t\t\t\t\tlet correctAudio = new Audio('/assets/correctAudio.mp3');\n\t\t\t\t\t\t\t// 正解した場合、効果音を発生させる。\n\t\t\t\t\t\t\tcorrectAudio.volume = 0.3;\n\t\t\t\t\t\t\tcorrectAudio.play();\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// 「答えを見る」を押していなければ、スコアと正解数をカウントアップする。\n\t\t\t\t\t\tif (answerOpenFlag == \"0\"){\n\t\t\t\t\t\t\t// プレイモード：練習・普通の場合のみ、スコアアップする。\n\t\t\t\t\t\t\tif ( playMode == \"練習\" || playMode == \"普通\") {\n\t\t\t\t\t\t\t\tcountUpScore();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tcountUpCorrectNum();\n\n\t\t\t\t\t\t\t// 「答えを見る」を押していない場合、正解として記録する。\n\t\t\t\t\t\t\tallQuestionWords.splice(allQuestionWords.length - 2, 1, \"正解\");\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// 「答えを見る」を押していれば、フラグを0に戻す。\n\t\t\t\t\t\t\tanswerOpenFlag = \"0\";\n\n\t\t\t\t\t\t\t// 「答えを見る」を押している場合、不正解として記録する。\n\t\t\t\t\t\t\tallQuestionWords.splice(allQuestionWords.length - 2, 1, \"不正解\");\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// 解答するまでにかかった時間を記録する。\n\t\t\t\t\t\teachQuestionAnswerTime = Math.ceil((Date.now() - eachQuestionCreateTime)/1000);\n\t\t\t\t\t\tlet eachQuestionAnswerMin = Math.floor(eachQuestionAnswerTime / 60);\n\t\t\t\t\t\tlet eachQuestionAnswerSec = Math.ceil(eachQuestionAnswerTime % 60);\n\t\t\t\t\t\tallQuestionWords.splice(allQuestionWords.length - 1, 1, `${(`0${eachQuestionAnswerMin}` ).slice( -2 )}:${(`0${eachQuestionAnswerSec}` ).slice( -2 )}`);\n\n\n\t\t\t\t\t\t// 出題したすべての英単語リストに追加する。\n\t\t\t\t\t\tallQuestionWordsList.push(allQuestionWords);\n\n\t\t\t\t\t\t// 丸を表示、答えを表示するなどのアニメーションを実施する。\n\t\t\t\t\t\tcircleImg.classList.add('circle');\n\t\t\t\t\t\tcircleImg.classList.remove('transparent');\n\t\t\t\t\t\tsetTimeout(createDisplayWord,500);\n\t\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\t\tcircleImg.classList.add('transparent');\n\t\t\t\t\t\t\tcircleImg.classList.remove('circle');\n\t\t\t\t\t\t}, 500);\n\n\t\t\t\t\t\tif (playMode == \"タイムアタック\" && gameCompleteTimeAttackFlag == \"1\") {\n\t\t\t\t\t\t\tgameClose();\n\t\t\t\t\t\t};\n\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、タイプした文字が解答文字と一致する場合の共通処理を定義する。-----------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction typeMissAudio(){\n\t\t\t\t\t// ミス音を定義する。\n\t\t\t\t\t// ミス音ありの場合のみ\n\t\t\t\t\tif (incorrectAudioMode == \"ミス音あり\") {\n\t\t\t\t\t\tlet incorrectAudio = new Audio('/assets/incorrectAudio.mp3');\n\t\t\t\t\t\t// ミスの場合、効果音を発生させる。\n\t\t\t\t\t\tincorrectAudio.volume = 0.3;\n\t\t\t\t\t\tincorrectAudio.play();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// 以上、タイプした文字が表示文字と不一致の場合の処理を定義する。--------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\n\t\t\t\t// 以下、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\t\t\t\tfunction pronounce(eng_word){\n\t\t\t\t\t\t// résuméの場合は音声ファイルの検索ができないため、ファイルを変更\n\t\t\t\t\t\tif (eng_word == \"résumé\"){\n\t\t\t\t\t\t\teng_word = \"rezumei\";\n\t\t\t\t\t\t};\n\t\t\t\t\tlet pronunciation = new Audio('/assets/発音/'+ eng_word + '.mp3');\n\t\t\t\t\tpronunciation.play();\n\t\t\t\t};\n\t\t\t\t// 以上、英単語を生成した際に、発音させる処理を定義する。---------------------------------------\n\t\t\t\t// ------------------------------------------------------------------------------------\n\n\t\t\t};\n};\n"]},"metadata":{},"sourceType":"module"}