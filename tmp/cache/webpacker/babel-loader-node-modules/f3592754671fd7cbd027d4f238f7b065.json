{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nwindow.addEventListener('load', function () {\n  gameStart();\n}); // 選択した英単語難易度によって変わるwordListの定義\n\nvar wordList = gon.wordListAll; // 選択したプレイモードによって変わるplayModeの定義\n\nvar playMode = gon.playMode;\n\nfunction gameStart() {\n  var _romaMappingTableFirs;\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  // 表示するメーターリストを定義する。\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png'];\n  var romaMappingTableFirst = (_romaMappingTableFirs = {\n    \"あ\": \"a\",\n    \"い\": \"i\",\n    \"う\": \"u\",\n    \"え\": \"e\",\n    \"お\": \"o\",\n    \"か\": \"ka\",\n    \"き\": \"ki\",\n    \"く\": \"ku\",\n    \"け\": \"ke\",\n    \"こ\": \"ko\",\n    \"さ\": \"sa\",\n    \"し\": \"si\",\n    \"す\": \"su\",\n    \"せ\": \"se\",\n    \"そ\": \"so\",\n    \"た\": \"ta\",\n    \"ち\": \"ti\",\n    \"つ\": \"tu\",\n    \"て\": \"te\",\n    \"と\": \"to\",\n    \"な\": \"na\",\n    \"に\": \"ni\",\n    \"ぬ\": \"nu\",\n    \"ね\": \"ne\",\n    \"の\": \"no\",\n    \"は\": \"ha\",\n    \"ひ\": \"hi\",\n    \"ふ\": \"hu\",\n    \"へ\": \"he\",\n    \"ほ\": \"ho\",\n    \"ま\": \"ma\",\n    \"み\": \"mi\",\n    \"む\": \"mu\",\n    \"め\": \"me\",\n    \"も\": \"mo\",\n    \"や\": \"ya\",\n    \"ゆ\": \"yu\",\n    \"よ\": \"yo\",\n    \"ら\": \"ra\",\n    \"り\": \"ri\",\n    \"る\": \"ru\",\n    \"れ\": \"re\",\n    \"ろ\": \"ro\",\n    \"わ\": \"wa\",\n    \"を\": \"wo\",\n    \"が\": \"ga\",\n    \"ぎ\": \"gi\",\n    \"ぐ\": \"gu\",\n    \"げ\": \"ge\",\n    \"ご\": \"go\",\n    \"ざ\": \"za\",\n    \"じ\": \"zi\",\n    \"ず\": \"zu\",\n    \"ぜ\": \"ze\",\n    \"ぞ\": \"zo\",\n    \"だ\": \"da\",\n    \"ぢ\": \"di\",\n    \"づ\": \"du\",\n    \"で\": \"de\",\n    \"ど\": \"do\",\n    \"ば\": \"ba\",\n    \"び\": \"bi\",\n    \"ぶ\": \"bu\",\n    \"べ\": \"be\",\n    \"ぼ\": \"bo\",\n    \"ぱ\": \"pa\",\n    \"ぴ\": \"pi\",\n    \"ぷ\": \"pu\",\n    \"ぺ\": \"pe\",\n    \"ぽ\": \"po\",\n    \"ぁ\": \"la\",\n    \"ぃ\": \"li\",\n    \"ぅ\": \"lu\",\n    \"ぇ\": \"le\",\n    \"ぉ\": \"lo\",\n    \"ゃ\": \"lya\",\n    \"ゅ\": \"lyu\",\n    \"ょ\": \"lyo\",\n    \"でゃ\": \"dha\",\n    \"でぃ\": \"dhi\",\n    \"でゅ\": \"dhu\",\n    \"でぇ\": \"dhe\",\n    \"でょ\": \"dho\",\n    \"つぁ\": \"tsa\",\n    \"つぃ\": \"tsi\",\n    \"つぇ\": \"tse\",\n    \"つぉ\": \"tso\",\n    \"てゃ\": \"tha\",\n    \"てぃ\": \"thi\",\n    \"てゅ\": \"thu\",\n    \"てぇ\": \"the\",\n    \"てょ\": \"tho\",\n    \"ふぁ\": \"fa\",\n    \"ふぃ\": \"fi\",\n    \"ふぇ\": \"fe\",\n    \"ふぉ\": \"fo\",\n    \"うぁ\": \"wha\",\n    \"うぃ\": \"wi\",\n    \"うぇ\": \"we\",\n    \"うぉ\": \"who\",\n    \"ゔぁ\": \"va\",\n    \"ゔぃ\": \"vi\",\n    \"ゔ\": \"vu\",\n    \"ゔぇ\": \"ve\",\n    \"ゔぉ\": \"vo\",\n    \"きゃ\": \"kya\",\n    \"きぃ\": \"kyi\",\n    \"きゅ\": \"kyu\",\n    \"きぇ\": \"kye\",\n    \"きょ\": \"kyo\",\n    \"ぎゃ\": \"gya\",\n    \"ぎぃ\": \"gyi\",\n    \"ぎゅ\": \"gyu\",\n    \"ぎぇ\": \"gye\",\n    \"ぎょ\": \"gyo\",\n    \"しゃ\": \"sya\",\n    \"しぃ\": \"syi\",\n    \"しゅ\": \"syu\",\n    \"しぇ\": \"sye\",\n    \"しょ\": \"syo\",\n    \"じゃ\": \"zya\",\n    \"じぃ\": \"zyi\",\n    \"じゅ\": \"zyu\",\n    \"じぇ\": \"zye\",\n    \"じょ\": \"zyo\",\n    \"ちゃ\": \"tya\",\n    \"ちぃ\": \"tyi\",\n    \"ちゅ\": \"tyu\",\n    \"ちぇ\": \"tye\",\n    \"ちょ\": \"tyo\",\n    \"ぢゃ\": \"dya\",\n    \"ぢぃ\": \"dyi\",\n    \"ぢゅ\": \"dyu\",\n    \"ぢぇ\": \"dye\",\n    \"ぢょ\": \"dyo\",\n    \"にゃ\": \"nya\",\n    \"にぃ\": \"nyi\",\n    \"にゅ\": \"nyu\",\n    \"にぇ\": \"nye\",\n    \"にょ\": \"nyo\",\n    \"ひゃ\": \"hya\",\n    \"ひぃ\": \"hyi\",\n    \"ひゅ\": \"hyu\",\n    \"ひぇ\": \"hye\",\n    \"ひょ\": \"hyo\",\n    \"びゃ\": \"bya\",\n    \"びぃ\": \"byi\",\n    \"びゅ\": \"byu\",\n    \"びぇ\": \"bye\",\n    \"びょ\": \"byo\",\n    \"ぴゃ\": \"pya\",\n    \"ぴぃ\": \"pyi\",\n    \"ぴゅ\": \"pyu\",\n    \"ぴぇ\": \"pye\",\n    \"ぴょ\": \"pyo\",\n    \"ふゃ\": \"fya\"\n  }, _defineProperty(_romaMappingTableFirs, \"\\u3075\\u3043\", \"fyi\"), _defineProperty(_romaMappingTableFirs, \"ふゅ\", \"fyu\"), _defineProperty(_romaMappingTableFirs, \"\\u3075\\u3047\", \"fye\"), _defineProperty(_romaMappingTableFirs, \"ふょ\", \"fyo\"), _defineProperty(_romaMappingTableFirs, \"みゃ\", \"mya\"), _defineProperty(_romaMappingTableFirs, \"みぃ\", \"myi\"), _defineProperty(_romaMappingTableFirs, \"みゅ\", \"myu\"), _defineProperty(_romaMappingTableFirs, \"みぇ\", \"mye\"), _defineProperty(_romaMappingTableFirs, \"みょ\", \"myo\"), _defineProperty(_romaMappingTableFirs, \"りゃ\", \"rya\"), _defineProperty(_romaMappingTableFirs, \"りぃ\", \"ryi\"), _defineProperty(_romaMappingTableFirs, \"りゅ\", \"ryu\"), _defineProperty(_romaMappingTableFirs, \"りぇ\", \"rye\"), _defineProperty(_romaMappingTableFirs, \"りょ\", \"ryo\"), _defineProperty(_romaMappingTableFirs, \"くぁ\", \"kwa\"), _defineProperty(_romaMappingTableFirs, \"ぐぁ\", \"gwa\"), _defineProperty(_romaMappingTableFirs, \"とぅ\", \"twu\"), _defineProperty(_romaMappingTableFirs, \"どぅ\", \"dwu\"), _defineProperty(_romaMappingTableFirs, \"いぇ\", \"ye\"), _defineProperty(_romaMappingTableFirs, \"ー\", \"-\"), _romaMappingTableFirs);\n  var romaMappingTableSecond = {\n    \"い\": \"yi\",\n    \"か\": \"ca\",\n    \"く\": \"cu\",\n    \"こ\": \"co\",\n    \"し\": \"shi\",\n    \"せ\": \"ce\",\n    \"ち\": \"chi\",\n    \"つ\": \"tsu\",\n    \"ふ\": \"fu\",\n    \"じ\": \"ji\",\n    \"ぁ\": \"xa\",\n    \"ぃ\": \"xi\",\n    \"ぅ\": \"xu\",\n    \"ぇ\": \"xe\",\n    \"ぉ\": \"xo\",\n    \"ゃ\": \"xya\",\n    \"ゅ\": \"xyu\",\n    \"ょ\": \"xyo\",\n    \"しゃ\": \"sha\",\n    \"しゅ\": \"shu\",\n    \"しぇ\": \"she\",\n    \"しょ\": \"sho\",\n    \"じゃ\": \"ja\",\n    \"じぃ\": \"jyi\",\n    \"じゅ\": \"ju\",\n    \"じぇ\": \"je\",\n    \"じょ\": \"jo\",\n    \"ちゃ\": \"cha\",\n    \"ちぃ\": \"cyi\",\n    \"ちゅ\": \"chu\",\n    \"ちぇ\": \"che\",\n    \"ちょ\": \"cho\",\n    \"うぃ\": \"whi\",\n    \"うぇ\": \"whe\"\n  };\n  var romaMappingTableThird = {\n    \"し\": \"ci\",\n    \"じゃ\": \"jya\",\n    \"じゅ\": \"jyu\",\n    \"じぇ\": \"jye\",\n    \"じょ\": \"jyo\",\n    \"ちゃ\": \"cya\",\n    \"ちゅ\": \"cyu\",\n    \"ちぇ\": \"cye\",\n    \"ちょ\": \"cyo\"\n  }; // 英単語を順番に出題する場合の番号の初期値を定義する。\n\n  var _sortById = 11; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    // カウントダウン文字を１ずつ減らす。\n    countDownPopupNumber = countDownPopupNumber - 1; //カウントダウンが0になれば、ゲームを開始する。\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart);\n      countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordEnglish = document.getElementById(\"displayWordEnglish\");\n    displayWordEnglish.className = \"displayWordEnglish\";\n    var displayWordKanji = document.getElementById(\"displayWordKanji\");\n    displayWordKanji.className = \"displayWordKanji\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWordJap = []; // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n    // bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\n    var createDisplayWordOkFlagFromBonusCountReset = \"0\"; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 500000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにプレイ時間のcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 正解時に表示する丸を定義する。\n\n    document.getElementById(\"circleImg\").src = '/assets/正解○.png';\n    circleImg.classList.add('transparent'); // \"答えを見る\"ボタンを表示する。(プレイモード普通、正確重視の時のみ)\n\n    if (playMode == \"普通\" || playMode == \"正確重視\") {\n      var _answerButton = document.getElementById(\"answerButton\");\n\n      _answerButton.innerHTML = \"答えを見る\";\n      _answerButton.className = \"answerButton\";\n\n      _answerButton.onclick = function () {\n        for (var i = 0; i < charArrayInDisplayWordJap.length; i++) {\n          charArrayInDisplayWordJap[i].classList.remove('transparent');\n        }\n\n        displayWordKanji.className = \"displayWordKanji\";\n      };\n    }\n\n    ; // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore + \" P\"; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n      // ギリギリで問題に正解した場合、○を表示した後、200m秒後にワードを生成する処理が走るため。\n      if (playEndFlag === \"0\") {\n        // 表示単語を初期化する。\n        displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n        //let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n        //let randomIntegerInTotalWordList = Math.floor(Math.random() * 2);\n        // 表示する単語をランダムで選定する。\n        //displayWordInList = wordList[randomIntegerInTotalWordList];\n        // 英単語を順番に出題する場合の番号の初期値を定義する。\n\n        displayWordInList = wordList[_sortById];\n        _sortById++; // // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\n        if (_sortById >= wordList.length) {\n          _sortById = 0;\n        }\n\n        ; // 英単語を生成した際に、発音させる。\n\n        pronounce(displayWordInList.eng_word); // 英単語を表示させる。\n\n        displayWordEnglish.textContent = displayWordInList.eng_word; // 日本語訳(漢字)を表示させる。\n\n        displayWordKanji.textContent = displayWordInList.jap_trans_1; // プレイモード練習の時は、答えとして漢字を表示させ、普通、正確重視では非表示にする。\n\n        if (playMode == \"練習\") {\n          displayWordKanji.className = \"displayWordKanji\";\n        } else if (playMode == \"普通\" || playMode == \"正確重視\") {\n          displayWordKanji.className = \"transparent\";\n        } else {\n          displayWordKanji.className = \"transparent\";\n        } // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n        // spanタグで閉じた単語を表示する。\n\n\n        charArrayInDisplayWordJap = displayWordInList.jap_trans_1_yomi.split(\"\").map(function (value) {\n          // spanタグを作成する。\n          var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n          spanValue.textContent = value; // 各文字に対して、transparentクラスを付与する。（プレイモード普通、正確重視のときのみ）\n\n          if (playMode == \"普通\" || playMode == \"正確重視\") {\n            spanValue.className = \"transparent\";\n          }\n\n          ; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n          displayWord.appendChild(spanValue);\n          return spanValue;\n        }); //  createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n        // bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\n        createDisplayWordOkFlagFromBonusCountReset = \"0\";\n      }\n\n      ;\n    }\n\n    ; // プレイ時間をカウントダウンする処理を定義する。\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"00\".concat(remainSec).slice(-3), \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        // ゲーム終了後にplayEndFlagを1に更新する。\n        playEndFlag = \"1\"; // プレイ時間のカウントダウンを止める。\n\n        clearInterval(timerId); // 残り時間の表示を消す。\n\n        remainSecLabel = \"\"; // 現在のスコア（左上）の表示を消す。\n\n        displayScore.textContent = \"\"; // 問題の英単語の表示を消す。\n\n        displayWordEnglish.textContent = \"\"; // 解答の日本語の表示を消す。\n\n        displayWord.textContent = \"\"; // 解答の日本語訳の漢字の表示を消す。\n\n        displayWordKanji.textContent = \"\"; // 答えを見るボタンを消す。（プレイモード普通、正確重視の時のみ）\n\n        if (playMode == \"普通\" || playMode == \"正確重視\") {\n          answerButton.className = \"transparent\";\n        }\n\n        ; // 正解時に表示される○の画像を消す。\n\n        circleImg.className = \"transparent\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          // 得点の表示\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\"; // もう一度ボタンの表示（transparentを消して表示させる）\n\n          restartBtn.classList.remove('transparent'); // 戻るボタンの表示（transparentを消して表示させる）\n\n          backBtn.classList.remove('transparent');\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    }\n\n    ; // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = \"\".concat(totalScore.toLocaleString(), \" P\");\n      return totalScore;\n    } // タイピングの正誤判定に使用する変数を定義する。\n\n\n    var wordLetterWithSmallLetter = \"\";\n    var wordLetterSole = \"\";\n    var charArrayInDisplayWordAlphaFirst = [];\n    var charArrayInDisplayWordAlphaSecond = [];\n    var charArrayInDisplayWordAlphaThird = [];\n    var charArrayInDisplayWordAlphaSole = [];\n    var charArrayInDisplayWordAlphaSoleSecond = [];\n    var charArrayInDisplayWordAlphaSoleThird = [];\n    var shiftAlreadyStartedCountAll = 0;\n    var shiftAlreadyStartedCountFirst = 0;\n    var shiftAlreadyStartedCountSecond = 0;\n    var shiftAlreadyStartedCountThird = 0;\n    var shiftAlreadyStartedCountSoleFirst = 0;\n    var shiftAlreadyStartedCountSoleSecond = 0;\n    var shiftAlreadyStartedCountSoleThird = 0;\n    var keyTempForSmallTsuPreWithNext = \"\";\n    var keyTempForSmallTsuPreFirst = \"\";\n    var keyTempForSmallTsuPreSecond = \"\";\n    var keyTempForSmallTsuPreThird = \"\";\n    var keyTempForNnPre = \"\"; // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (playEndFlag === \"0\") {\n        // 文字によって、文字列の最後にあるかどうかで入力形式が変わるため、\"っ\"\"ん\"は個別に処理を定義する。\n        // 先頭文字が小さい\"っ\"の場合\n        // uはxtsuなどで\"っ\"を打ち込めるため、条件分岐要。\n        if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n          if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\" && keyDownChar.key !== \"n\") {\n            // \"っ\"が最後の文字ではない場合、同じキーを２回連続でタイプしてOKとする。\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 入力対象文字に対して、入力処理が開始していない場合\n              if (shiftAlreadyStartedCountAll === 0 && keyDownChar.key !== \"u\") {\n                keyTempForSmallTsuPreWithNext = keyDownChar.key;\n                shiftAlreadyStartedCountAll = 1;\n                correctTyping();\n              } else {\n                // 同じアルファベットを入力した場合、\"っ\"を入力完了にし、再度keyDownCharCountUpを実施する。\n                if (keyDownChar.key === keyTempForSmallTsuPreWithNext && keyDownChar.key !== \"u\") {\n                  keyTempForSmallTsuPreWithNext = \"\";\n                  keyTempForSmallTsuPreFirst = \"\";\n                  keyTempForSmallTsuPreSecond = \"\";\n                  keyTempForSmallTsuPreThird = \"\";\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                  correctTyping();\n                  keyDownCharCountUp(keyDownChar); // 異なる場合は前回入力アルファベットに入力したアルファベットを上書き\n                } else {\n                  if (keyDownChar.key === \"t\" && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")) {} else if ((keyDownChar.key === \"u\" || keyDownChar.key === \"s\") && keyTempForSmallTsuPreSecond === \"t\" && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")) {} else {\n                    bonusCountReset();\n                  }\n\n                  ;\n\n                  if (keyDownChar.key !== \"u\") {\n                    keyTempForSmallTsuPreWithNext = keyDownChar.key;\n                  }\n\n                  ;\n                }\n\n                ;\n              }\n\n              ;\n            }\n\n            ; // 先頭文字が小さい\"っ\"の場合(上記の2連続同一キータイプにより\"っ\"の入力処理が完了した場合に、下記処理が開始するのを防ぐために条件分岐を設定)\n\n            if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n              // \"っ\"の単独入力を可能にする。\n              if (keyDownChar.key === \"l\" || keyDownChar.key === \"x\") {\n                keyTempForSmallTsuPreFirst = keyDownChar.key;\n\n                if (keyTempForSmallTsuPreWithNext !== \"l\" && keyTempForSmallTsuPreWithNext !== \"x\") {\n                  correctTyping();\n                }\n\n                ;\n              }\n\n              ;\n\n              if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyDownChar.key === \"t\") {\n                keyTempForSmallTsuPreSecond = keyDownChar.key;\n                correctTyping();\n              }\n\n              ;\n\n              if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"s\") {\n                keyTempForSmallTsuPreThird = keyDownChar.key;\n                correctTyping();\n              }\n\n              ;\n\n              if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"u\") {\n                keyTempForSmallTsuPreWithNext = \"\";\n                keyTempForSmallTsuPreFirst = \"\";\n                keyTempForSmallTsuPreSecond = \"\";\n                keyTempForSmallTsuPreThird = \"\";\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n                correctTyping();\n              }\n\n              ;\n            }\n\n            ;\n          } else {\n            // \"a\"\"i\"\"e\"\"o\"\"n\"が入力された時点でNGとする。\n            bonusCountReset();\n          }\n\n          ; // 先頭文字が\"ん\"の場合、かつ次の文字あり、その文字が母音でない場合は \"n\"+\"n以外の子音\"でもOKとする。\n          // それ以外の場合は、マッピング表の通り\"nn\"\"xn\"でしか入力できない。\n        } else if (charArrayInDisplayWordJap[0].textContent === \"ん\") {\n          if (shiftAlreadyStartedCountAll === 0) {\n            if (keyDownChar.key === \"n\" || keyDownChar.key === \"x\") {\n              keyTempForNnPre = keyDownChar.key;\n              shiftAlreadyStartedCountAll = 1;\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ;\n          } else {\n            if (keyTempForNnPre === \"n\") {\n              if (charArrayInDisplayWordJap[1] != null) {\n                if (charArrayInDisplayWordJap[1].textContent !== \"あ\" && charArrayInDisplayWordJap[1].textContent !== \"い\" && charArrayInDisplayWordJap[1].textContent !== \"う\" && charArrayInDisplayWordJap[1].textContent !== \"え\" && charArrayInDisplayWordJap[1].textContent !== \"お\") {\n                  if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"u\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\" && keyDownChar.key !== \"y\") {\n                    keyTempForNnPre = \"\";\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                    correctTyping();\n\n                    if (keyDownChar.key !== \"n\") {\n                      keyDownCharCountUp(keyDownChar);\n                    }\n\n                    ;\n                  } else {\n                    bonusCountReset();\n                  }\n\n                  ;\n                } else {\n                  if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"u\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\" && keyDownChar.key !== \"y\") {\n                    keyTempForNnPre = \"\";\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                    correctTyping();\n\n                    if (keyDownChar.key !== \"n\") {\n                      keyDownCharCountUp(keyDownChar);\n                    }\n\n                    ;\n                  } else {\n                    bonusCountReset();\n                  }\n\n                  ;\n                }\n\n                ;\n              } else {\n                if (keyDownChar.key === \"n\") {\n                  keyTempForNnPre = \"\";\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                  correctTyping();\n                } else {\n                  bonusCountReset();\n                }\n\n                ;\n              }\n\n              ;\n            } else if (keyTempForNnPre === \"x\") {\n              if (keyDownChar.key === \"n\") {\n                keyTempForNnPre = \"\";\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n                correctTyping();\n              } else {\n                bonusCountReset();\n              }\n\n              ;\n            }\n\n            ;\n          }\n\n          ; // \"っ\"\"ん\"以外の文字の場合\n        } else {\n          // 入力対象文字をアルファベットに分解する。\n          // 入力対象文字に対して、入力処理が開始していない場合\n          if (shiftAlreadyStartedCountAll === 0) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字を一緒に入力するパターンに対応する処理を定義する。\n              wordLetterWithSmallLetter = charArrayInDisplayWordJap[0].textContent + charArrayInDisplayWordJap[1].textContent; // 文字をローマ字に変換し、アルファベットごとに分ける。\n              // 2文字に対して、ローマ字変換パターン１をsplitする。\n\n              if (romaMappingTableFirst[wordLetterWithSmallLetter] != null) {\n                charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                  var spanValue = document.createElement(\"span\");\n                  spanValue.textContent = value;\n                  return spanValue;\n                });\n              }\n\n              ; // 2文字に対してローマ字変換パターン２が存在する場合はsplitする。\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                  var spanValue = document.createElement(\"span\");\n                  spanValue.textContent = value;\n                  return spanValue;\n                });\n              }\n\n              ; // 2文字に対してローマ字変換パターン３が存在する場合はsplitする。\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                  var spanValue = document.createElement(\"span\");\n                  spanValue.textContent = value;\n                  return spanValue;\n                });\n              }\n\n              ;\n            }\n\n            ; // 1文字のみを先に入力するパターンに対応する処理を定義する。\n\n            wordLetterSole = charArrayInDisplayWordJap[0].textContent; // 1文字目のみ対して、ローマ字変換パターン１をsplitする。\n            // 母音の場合はsplit不可のため処理を分ける。\n\n            if (wordLetterSole !== \"あ\" && wordLetterSole !== \"い\" && wordLetterSole !== \"う\" && wordLetterSole !== \"え\" && wordLetterSole !== \"お\") {\n              charArrayInDisplayWordAlphaSole = romaMappingTableFirst[wordLetterSole].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            } else {\n              var spanValue = document.createElement(\"span\");\n              spanValue.textContent = romaMappingTableFirst[wordLetterSole];\n              charArrayInDisplayWordAlphaSole = [spanValue];\n            }\n\n            ; // 1文字目のみ対してローマ字変換パターン２が存在する場合はsplitする。\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              charArrayInDisplayWordAlphaSoleSecond = romaMappingTableSecond[wordLetterSole].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ; // 1文字目のみ対してローマ字変換パターン３が存在する場合はsplitする。\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              charArrayInDisplayWordAlphaSoleThird = romaMappingTableThird[wordLetterSole].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ;\n          }\n\n          ; // 文字入力によるアルファベットに対する処理を開始する。\n          // 文字の入力開始前である場合\n\n          if (shiftAlreadyStartedCountAll === 0) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if (romaMappingTableFirst[wordLetterWithSmallLetter] != null) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountFirst = 1;\n\n                  if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSecond.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountSecond = 1;\n\n                  if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                  charArrayInDisplayWordAlphaThird.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountThird = 1;\n\n                  if (charArrayInDisplayWordAlphaThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n            if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n              charArrayInDisplayWordAlphaSole.shift();\n              shiftAlreadyStartedCountAll = 1;\n              shiftAlreadyStartedCountSoleFirst = 1;\n\n              if (charArrayInDisplayWordAlphaSole.length === 0) {\n                charArrayInDisplayWordJap[0].className = \"add_red\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent && charArrayInDisplayWordAlphaSole.length !== 0) {\n                charArrayInDisplayWordAlphaSoleSecond.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountSoleSecond = 1;\n\n                if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent && charArrayInDisplayWordAlphaSole.length !== 0 && charArrayInDisplayWordAlphaSoleSecond.length !== 0) {\n                charArrayInDisplayWordAlphaSoleThird.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountSoleThird = 1;\n\n                if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n            if (shiftAlreadyStartedCountFirst === 1 || shiftAlreadyStartedCountSecond === 1 || shiftAlreadyStartedCountThird === 1 || shiftAlreadyStartedCountSoleFirst === 1 || shiftAlreadyStartedCountSoleSecond === 1 || shiftAlreadyStartedCountSoleThird === 1) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ; // 文字入力が完了している場合、カウントを0にする。\n\n            if (shiftAlreadyStartedCountAll === 0) {\n              shiftAlreadyStartedCountFirst = 0;\n              shiftAlreadyStartedCountSecond = 0;\n              shiftAlreadyStartedCountThird = 0;\n              shiftAlreadyStartedCountSoleFirst = 0;\n              shiftAlreadyStartedCountSoleSecond = 0;\n              shiftAlreadyStartedCountSoleThird = 0;\n            }\n\n            ; // すでに1つのアルファベットを入力済みの場合\n          } else if (shiftAlreadyStartedCountAll === 1) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if (shiftAlreadyStartedCountFirst === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountFirst = 2;\n\n                  if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountSecond === 1) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSecond = 2;\n\n                    if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountThird === 1) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountThird = 2;\n\n                    if (charArrayInDisplayWordAlphaThird.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n            if (shiftAlreadyStartedCountSoleFirst === 1) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                charArrayInDisplayWordAlphaSole.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountSoleFirst = 2;\n\n                if (charArrayInDisplayWordAlphaSole.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleSecond === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleSecond.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSoleSecond = 2;\n\n                  if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleThird === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleThird.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSoleThird = 2;\n\n                  if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n            if (shiftAlreadyStartedCountFirst === 2 || shiftAlreadyStartedCountSecond === 2 || shiftAlreadyStartedCountThird === 2 || shiftAlreadyStartedCountSoleFirst === 2 || shiftAlreadyStartedCountSoleSecond === 2 || shiftAlreadyStartedCountSoleThird === 2) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ; // 文字入力が完了している場合、カウントを0にする。\n\n            if (shiftAlreadyStartedCountAll === 0) {\n              shiftAlreadyStartedCountFirst = 0;\n              shiftAlreadyStartedCountSecond = 0;\n              shiftAlreadyStartedCountThird = 0;\n              shiftAlreadyStartedCountSoleFirst = 0;\n              shiftAlreadyStartedCountSoleSecond = 0;\n              shiftAlreadyStartedCountSoleThird = 0;\n            }\n\n            ; // すでに2つのアルファベットを入力済みの場合\n          } else if (shiftAlreadyStartedCountAll === 2) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if (shiftAlreadyStartedCountFirst === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountFirst = 3;\n\n                  if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap[1].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountSecond === 2) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSecond = 3;\n\n                    if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountThird === 2) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountThird = 3;\n\n                    if (charArrayInDisplayWordAlphaThird.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_red\";\n                      charArrayInDisplayWordJap[1].className = \"add_red\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n            if (shiftAlreadyStartedCountSoleFirst === 2) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                charArrayInDisplayWordAlphaSole.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountSoleFirst = 3;\n\n                if (charArrayInDisplayWordAlphaSole.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_red\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleSecond === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleSecond.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSoleSecond = 3;\n\n                  if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleThird === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleThird.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSoleThird = 3;\n\n                  if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_red\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n            if (shiftAlreadyStartedCountFirst === 3 || shiftAlreadyStartedCountSecond === 3 || shiftAlreadyStartedCountThird === 3 || shiftAlreadyStartedCountSoleFirst === 3 || shiftAlreadyStartedCountSoleSecond === 3 || shiftAlreadyStartedCountSoleThird === 3) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ; // 文字入力が完了している場合、カウントを0にする。\n\n            if (shiftAlreadyStartedCountAll === 0) {\n              shiftAlreadyStartedCountFirst = 0;\n              shiftAlreadyStartedCountSecond = 0;\n              shiftAlreadyStartedCountThird = 0;\n              shiftAlreadyStartedCountSoleFirst = 0;\n              shiftAlreadyStartedCountSoleSecond = 0;\n              shiftAlreadyStartedCountSoleThird = 0;\n            }\n\n            ;\n          }\n        }\n      }\n    }\n\n    ; // タイプした文字が解答文字と一致する場合の共通処理を定義する。\n\n    function correctTyping() {\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter + 1; // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWordJap.length === 0) {\n        countUpScore();\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n        displayWordKanji.classList.add('add_gray');\n        displayWordKanji.classList.add('displayWordKanji');\n        displayWordKanji.classList.remove('transparent');\n        setTimeout(createDisplayWord, 200);\n        setTimeout(function () {\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n        }, 200);\n      }\n\n      ;\n    }\n\n    ; // タイプした文字が表示文字と不一致の場合の処理を定義する。（プレイモードが正確重視の場合のみ）\n    // 不正解の単語の答えを表示し、次の単語を生成する処理。\n    // メーターを0にリセットする処理。\n    // createDisplayWord処理が200m秒に連続で生じないためにbonusCountResetにフラグを用意する。\n\n    function bonusCountReset() {\n      if (playMode == \"正確重視\" && createDisplayWordOkFlagFromBonusCountReset == \"0\") {\n        for (var i = 0; i < charArrayInDisplayWordJap.length; i++) {\n          charArrayInDisplayWordJap[i].classList.add('add_gray');\n          charArrayInDisplayWordJap[i].classList.remove('transparent');\n        }\n\n        keyTempForNnPre = \"\";\n        shiftAlreadyStartedCountAll = 0;\n        shiftAlreadyStartedCountFirst = 0;\n        shiftAlreadyStartedCountSecond = 0;\n        shiftAlreadyStartedCountThird = 0;\n        shiftAlreadyStartedCountSoleFirst = 0;\n        shiftAlreadyStartedCountSoleSecond = 0;\n        shiftAlreadyStartedCountSoleThird = 0;\n        displayWordKanji.classList.add('add_gray');\n        displayWordKanji.classList.add('displayWordKanji');\n        displayWordKanji.classList.remove('transparent');\n        createDisplayWordOkFlagFromBonusCountReset = \"1\";\n        setTimeout(createDisplayWord, 200); //createDisplayWord処理実行後にcreateDisplayWordOkFlagFromBonusCountReset==0に戻す。\n\n        bonusCountMeter = 0;\n        document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n      }\n\n      ;\n    }\n\n    ; // 英単語を生成した際に、発音させる処理を定義する。\n\n    function pronounce(eng_word) {\n      var pronunciation = new Audio('/assets/' + eng_word + '.mp3');\n      pronunciation.play();\n    }\n\n    ;\n  }\n\n  ;\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_jap.js"],"names":["window","addEventListener","gameStart","wordList","gon","wordListAll","playMode","imgArray","romaMappingTableFirst","romaMappingTableSecond","romaMappingTableThird","_sortById","bonusCountMeter","bonusCountMeterMax","displayBonusAddPlayTime","document","getElementById","className","bonusAddPlayTime","src","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","typingPlayStart","displayWord","displayWordEnglish","displayWordKanji","charArrayInDisplayWordJap","playEndFlag","createDisplayWordOkFlagFromBonusCountReset","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","circleImg","classList","add","answerButton","innerHTML","onclick","i","length","remove","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","displayWordInList","pronounce","eng_word","jap_trans_1","jap_trans_1_yomi","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","Math","ceil","remainSecLabel","slice","closePopup","restartBtn","backBtn","toLocaleString","countUpScore","addPoint","wordLetterWithSmallLetter","wordLetterSole","charArrayInDisplayWordAlphaFirst","charArrayInDisplayWordAlphaSecond","charArrayInDisplayWordAlphaThird","charArrayInDisplayWordAlphaSole","charArrayInDisplayWordAlphaSoleSecond","charArrayInDisplayWordAlphaSoleThird","shiftAlreadyStartedCountAll","shiftAlreadyStartedCountFirst","shiftAlreadyStartedCountSecond","shiftAlreadyStartedCountThird","shiftAlreadyStartedCountSoleFirst","shiftAlreadyStartedCountSoleSecond","shiftAlreadyStartedCountSoleThird","keyTempForSmallTsuPreWithNext","keyTempForSmallTsuPreFirst","keyTempForSmallTsuPreSecond","keyTempForSmallTsuPreThird","keyTempForNnPre","keyDownChar","key","correctTyping","shift","bonusCountReset","pronunciation","Audio","play"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\tgameStart();\n});\n\n\n  // 選択した英単語難易度によって変わるwordListの定義\n  const wordList = gon.wordListAll;\n\n  // 選択したプレイモードによって変わるplayModeの定義\n  const playMode = gon.playMode;\n\n\nfunction gameStart(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n  const romaMappingTableFirst = {\n    \"あ\":\"a\",\n    \"い\":\"i\",\n    \"う\":\"u\",\n    \"え\":\"e\",\n    \"お\":\"o\",\n    \"か\":\"ka\",\n    \"き\":\"ki\",\n    \"く\":\"ku\",\n    \"け\":\"ke\",\n    \"こ\":\"ko\",\n    \"さ\":\"sa\",\n    \"し\":\"si\",\n    \"す\":\"su\",\n    \"せ\":\"se\",\n    \"そ\":\"so\",\n    \"た\":\"ta\",\n    \"ち\":\"ti\",\n    \"つ\":\"tu\",\n    \"て\":\"te\",\n    \"と\":\"to\",\n    \"な\":\"na\",\n    \"に\":\"ni\",\n    \"ぬ\":\"nu\",\n    \"ね\":\"ne\",\n    \"の\":\"no\",\n    \"は\":\"ha\",\n    \"ひ\":\"hi\",\n    \"ふ\":\"hu\",\n    \"へ\":\"he\",\n    \"ほ\":\"ho\",\n    \"ま\":\"ma\",\n    \"み\":\"mi\",\n    \"む\":\"mu\",\n    \"め\":\"me\",\n    \"も\":\"mo\",\n    \"や\":\"ya\",\n    \"ゆ\":\"yu\",\n    \"よ\":\"yo\",\n    \"ら\":\"ra\",\n    \"り\":\"ri\",\n    \"る\":\"ru\",\n    \"れ\":\"re\",\n    \"ろ\":\"ro\",\n    \"わ\":\"wa\",\n    \"を\":\"wo\",\n    \"が\":\"ga\",\n    \"ぎ\":\"gi\",\n    \"ぐ\":\"gu\",\n    \"げ\":\"ge\",\n    \"ご\":\"go\",\n    \"ざ\":\"za\",\n    \"じ\":\"zi\",\n    \"ず\":\"zu\",\n    \"ぜ\":\"ze\",\n    \"ぞ\":\"zo\",\n    \"だ\":\"da\",\n    \"ぢ\":\"di\",\n    \"づ\":\"du\",\n    \"で\":\"de\",\n    \"ど\":\"do\",\n    \"ば\":\"ba\",\n    \"び\":\"bi\",\n    \"ぶ\":\"bu\",\n    \"べ\":\"be\",\n    \"ぼ\":\"bo\",\n    \"ぱ\":\"pa\",\n    \"ぴ\":\"pi\",\n    \"ぷ\":\"pu\",\n    \"ぺ\":\"pe\",\n    \"ぽ\":\"po\",\n    \"ぁ\":\"la\",\n    \"ぃ\":\"li\",\n    \"ぅ\":\"lu\",\n    \"ぇ\":\"le\",\n    \"ぉ\":\"lo\",\n    \"ゃ\":\"lya\",\n    \"ゅ\":\"lyu\",\n    \"ょ\":\"lyo\",\n    \"でゃ\":\"dha\",\n    \"でぃ\":\"dhi\",\n    \"でゅ\":\"dhu\",\n    \"でぇ\":\"dhe\",\n    \"でょ\":\"dho\",\n    \"つぁ\":\"tsa\",\n    \"つぃ\":\"tsi\",\n    \"つぇ\":\"tse\",\n    \"つぉ\":\"tso\",\n    \"てゃ\":\"tha\",\n    \"てぃ\":\"thi\",\n    \"てゅ\":\"thu\",\n    \"てぇ\":\"the\",\n    \"てょ\":\"tho\",\n    \"ふぁ\":\"fa\",\n    \"ふぃ\":\"fi\",\n    \"ふぇ\":\"fe\",\n    \"ふぉ\":\"fo\",\n    \"うぁ\":\"wha\",\n    \"うぃ\":\"wi\",\n    \"うぇ\":\"we\",\n    \"うぉ\":\"who\",\n    \"ゔぁ\":\"va\",\n    \"ゔぃ\":\"vi\",\n    \"ゔ\":\"vu\",\n    \"ゔぇ\":\"ve\",\n    \"ゔぉ\":\"vo\",\n    \"きゃ\":\"kya\",\n    \"きぃ\":\"kyi\",\n    \"きゅ\":\"kyu\",\n    \"きぇ\":\"kye\",\n    \"きょ\":\"kyo\",\n    \"ぎゃ\":\"gya\",\n    \"ぎぃ\":\"gyi\",\n    \"ぎゅ\":\"gyu\",\n    \"ぎぇ\":\"gye\",\n    \"ぎょ\":\"gyo\",\n    \"しゃ\":\"sya\",\n    \"しぃ\":\"syi\",\n    \"しゅ\":\"syu\",\n    \"しぇ\":\"sye\",\n    \"しょ\":\"syo\",\n    \"じゃ\":\"zya\",\n    \"じぃ\":\"zyi\",\n    \"じゅ\":\"zyu\",\n    \"じぇ\":\"zye\",\n    \"じょ\":\"zyo\",\n    \"ちゃ\":\"tya\",\n    \"ちぃ\":\"tyi\",\n    \"ちゅ\":\"tyu\",\n    \"ちぇ\":\"tye\",\n    \"ちょ\":\"tyo\",\n    \"ぢゃ\":\"dya\",\n    \"ぢぃ\":\"dyi\",\n    \"ぢゅ\":\"dyu\",\n    \"ぢぇ\":\"dye\",\n    \"ぢょ\":\"dyo\",\n    \"にゃ\":\"nya\",\n    \"にぃ\":\"nyi\",\n    \"にゅ\":\"nyu\",\n    \"にぇ\":\"nye\",\n    \"にょ\":\"nyo\",\n    \"ひゃ\":\"hya\",\n    \"ひぃ\":\"hyi\",\n    \"ひゅ\":\"hyu\",\n    \"ひぇ\":\"hye\",\n    \"ひょ\":\"hyo\",\n    \"びゃ\":\"bya\",\n    \"びぃ\":\"byi\",\n    \"びゅ\":\"byu\",\n    \"びぇ\":\"bye\",\n    \"びょ\":\"byo\",\n    \"ぴゃ\":\"pya\",\n    \"ぴぃ\":\"pyi\",\n    \"ぴゅ\":\"pyu\",\n    \"ぴぇ\":\"pye\",\n    \"ぴょ\":\"pyo\",\n    \"ふゃ\":\"fya\",\n    \"ふぃ\":\"fyi\",\n    \"ふゅ\":\"fyu\",\n    \"ふぇ\":\"fye\",\n    \"ふょ\":\"fyo\",\n    \"みゃ\":\"mya\",\n    \"みぃ\":\"myi\",\n    \"みゅ\":\"myu\",\n    \"みぇ\":\"mye\",\n    \"みょ\":\"myo\",\n    \"りゃ\":\"rya\",\n    \"りぃ\":\"ryi\",\n    \"りゅ\":\"ryu\",\n    \"りぇ\":\"rye\",\n    \"りょ\":\"ryo\",\n    \"くぁ\":\"kwa\",\n    \"ぐぁ\":\"gwa\",\n    \"とぅ\":\"twu\",\n    \"どぅ\":\"dwu\",\n    \"いぇ\":\"ye\",\n\t\"ー\":\"-\"\n  };\n\n  const romaMappingTableSecond = {\n    \"い\":\"yi\",\n    \"か\":\"ca\",\n    \"く\":\"cu\",\n    \"こ\":\"co\",\n    \"し\":\"shi\",\n    \"せ\":\"ce\",\n    \"ち\":\"chi\",\n    \"つ\":\"tsu\",\n    \"ふ\":\"fu\",\n    \"じ\":\"ji\",\n    \"ぁ\":\"xa\",\n    \"ぃ\":\"xi\",\n    \"ぅ\":\"xu\",\n    \"ぇ\":\"xe\",\n    \"ぉ\":\"xo\",\n    \"ゃ\":\"xya\",\n    \"ゅ\":\"xyu\",\n    \"ょ\":\"xyo\",\n    \"しゃ\":\"sha\",\n    \"しゅ\":\"shu\",\n    \"しぇ\":\"she\",\n    \"しょ\":\"sho\",\n    \"じゃ\":\"ja\",\n    \"じぃ\":\"jyi\",\n    \"じゅ\":\"ju\",\n    \"じぇ\":\"je\",\n    \"じょ\":\"jo\",\n    \"ちゃ\":\"cha\",\n    \"ちぃ\":\"cyi\",\n    \"ちゅ\":\"chu\",\n    \"ちぇ\":\"che\",\n    \"ちょ\":\"cho\",\n    \"うぃ\":\"whi\",\n    \"うぇ\":\"whe\"\n  };\n\n  const romaMappingTableThird = {\n    \"し\":\"ci\",\n    \"じゃ\":\"jya\",\n    \"じゅ\":\"jyu\",\n    \"じぇ\":\"jye\",\n    \"じょ\":\"jyo\",\n    \"ちゃ\":\"cya\",\n    \"ちゅ\":\"cyu\",\n    \"ちぇ\":\"cye\",\n    \"ちょ\":\"cyo\"\n  };\n  // 英単語を順番に出題する場合の番号の初期値を定義する。\n  let _sortById = 11;\n\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n\n\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n\t  \t// カウントダウン文字を１ずつ減らす。\n\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\tif (countDownPopupNumber <= 0){\n\t\tclearInterval(timerIdToStart);\n\t\tcountDownPopup.className = \"countDownPopupAfterClose\";\n\t\ttypingPlayStart();\n\t\t} else {\n\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t}\n  }\n\n  // ゲームを開始する処理を定義する。\n  function typingPlayStart(){\n\n    // 表示する単語を定義する。\n    const displayWord = document.getElementById(\"displayWord\");\n    displayWord.className =  \"displayWord\";\n    const displayWordEnglish = document.getElementById(\"displayWordEnglish\");\n    displayWordEnglish.className =  \"displayWordEnglish\";\n\tconst displayWordKanji = document.getElementById(\"displayWordKanji\");\n    displayWordKanji.className =  \"displayWordKanji\";\n    // 表示する単語を一文字ずつに分ける変数を定義する。\n    let charArrayInDisplayWordJap =[];\n\n\n\t// ゲーム終了を判定するフラグを定義する。\n    let playEndFlag = \"0\";\n\n\t// createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n\t// bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\tlet createDisplayWordOkFlagFromBonusCountReset = \"0\";\n\n    // 表示する単語を作成する。\n    createDisplayWord();\n\n    // プレイ開始時間を取得する。\n    const startTime = Date.now();\n    // 表示する残りのプレイ可能時間を定義する。\n    let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className =  \"remainPlayingTime\";\n    // 表示するスタート時のプレイ可能時間を定義する。\n    let initialPlayingTimeMSec = 500000;\n    // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n    setTimeout(countDownTime,0);\n    // 1秒ごとにプレイ時間のcountDownTimeを実施するように定義する。\n    const timerId = setInterval(countDownTime,1000);\n\n    // 正解時に表示する丸を定義する。\n    document.getElementById(\"circleImg\").src= '/assets/正解○.png';\n    circleImg.classList.add('transparent');\n\n    // \"答えを見る\"ボタンを表示する。(プレイモード普通、正確重視の時のみ)\n\tif (playMode == \"普通\" || playMode == \"正確重視\" ) {\n\t\tlet answerButton = document.getElementById(\"answerButton\");\n\t\tanswerButton.innerHTML = \"答えを見る\";\n\t\tanswerButton.className = \"answerButton\";\n\t\tanswerButton.onclick = function() {\n\t\t\tfor (let i = 0; i < charArrayInDisplayWordJap.length; i++) {\n\t\t\t\tcharArrayInDisplayWordJap[i].classList.remove('transparent');\n\t\t\t}\n\t\t\tdisplayWordKanji.className =  \"displayWordKanji\";\n\t\t};\n\t};\n\n    // 表示するスコアを定義する。\n    let displayScore = document.getElementById(\"displayScore\");\n    displayScore.className =  \"displayScore\";\n    // 合計スコアの初期値を定義する。\n    let totalScore = 0;\n    // 表示するスコアに初期値を定義する。\n    displayScore.textContent = totalScore + \" P\";\n    // スコアアップする基準を定義する。\n    const refTextLengthForCountUpLevel1 = 4;\n    const addScoreLevel1 = 1000;\n    const addScoreLevel2 = 3000;\n\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n    document.addEventListener(`keydown`, keyDownCharCountUp);\n\n\t\t// 表示する単語を作成する処理を定義する。\n\t\tfunction createDisplayWord(){\n\t\t\t// すでにゲームが終了している場合、新規ワードを生成しない。ゲーム中のみ生成する。\n\t\t\t// ギリギリで問題に正解した場合、○を表示した後、200m秒後にワードを生成する処理が走るため。\n\t\t\tif(playEndFlag === \"0\"){\n\t\t\t\t// 表示単語を初期化する。\n\t\t\t\tdisplayWord.textContent = \"\";\n\t\t\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\t\t\t//let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\t\t\t\t//let randomIntegerInTotalWordList = Math.floor(Math.random() * 2);\n\t\t\t\t// 表示する単語をランダムで選定する。\n\t\t\t\t//displayWordInList = wordList[randomIntegerInTotalWordList];\n\n\t\t\t\t// 英単語を順番に出題する場合の番号の初期値を定義する。\n\t\t\t\t displayWordInList = wordList[_sortById];\n\t\t\t\t _sortById++;\n\t\t\t\t// // sortByIdが出題英単語数を超えた場合、初期値に戻す。\n\t\t\t\tif (_sortById >= wordList.length) {\n\t\t\t\t\t_sortById = 0;\n\t\t\t\t};\n\n\t\t\t\t// 英単語を生成した際に、発音させる。\n\t\t\t\tpronounce(displayWordInList.eng_word);\n\t\t\t\t// 英単語を表示させる。\n\t\t\t\tdisplayWordEnglish.textContent = displayWordInList.eng_word;\n\t\t\t\t// 日本語訳(漢字)を表示させる。\n\t\t\t\tdisplayWordKanji.textContent = displayWordInList.jap_trans_1;\n\t\t\t\t// プレイモード練習の時は、答えとして漢字を表示させ、普通、正確重視では非表示にする。\n\t\t\t\tif ( playMode == \"練習\" ) {\n\t\t\t\t\tdisplayWordKanji.className =  \"displayWordKanji\";\n\t\t\t\t} else if ( playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\tdisplayWordKanji.className =  \"transparent\";\n\t\t\t\t} else {\n\t\t\t\t\tdisplayWordKanji.className =  \"transparent\";\n\t\t\t\t}\n\t\t\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t\t\t// spanタグで閉じた単語を表示する。\n\t\t\t\tcharArrayInDisplayWordJap = displayWordInList.jap_trans_1_yomi.split(\"\").map(function(value){\n\t\t\t\t\t// spanタグを作成する。\n\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t// spanタグに一文字を挿入する。\n\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t// 各文字に対して、transparentクラスを付与する。（プレイモード普通、正確重視のときのみ）\n\t\t\t\t\tif ( playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\t\tspanValue.className = \"transparent\";\n\t\t\t\t\t};\n\t\t\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\t\t\treturn spanValue;\n\t\t\t\t});\n\t\t\t\t//  createDisplayWord処理を実行して問題ないかを判定するフラグを用意する。\n\t\t\t\t// bonusCountReset処理で200m秒内に連続で処理が発生しないようにするため。\n\t\t\t\tcreateDisplayWordOkFlagFromBonusCountReset = \"0\";\n\t\t\t};\n\t\t};\n\n\n\t\t// プレイ時間をカウントダウンする処理を定義する。\n\t\tfunction countDownTime(){\n\t\t\tconst currentTime = Date.now();\n\t\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\t\tconst remainSec = Math.ceil(remainMSec/1000);\n\t\t\tlet  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n\t\t\tif (remainMSec <= 0){\n\t\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\t\tplayEndFlag = \"1\";\n\t\t\t\t// プレイ時間のカウントダウンを止める。\n\t\t\t\tclearInterval(timerId);\n\t\t\t\t// 残り時間の表示を消す。\n\t\t\t\tremainSecLabel = \"\";\n\t\t\t\t// 現在のスコア（左上）の表示を消す。\n\t\t\t\tdisplayScore.textContent =\"\";\n\t\t\t\t// 問題の英単語の表示を消す。\n\t\t\t\tdisplayWordEnglish.textContent =\"\";\n\t\t\t\t// 解答の日本語の表示を消す。\n\t\t\t\tdisplayWord.textContent =\"\";\n\t\t\t\t// 解答の日本語訳の漢字の表示を消す。\n\t\t\t\tdisplayWordKanji.textContent =\"\";\n\t\t\t\t// 答えを見るボタンを消す。（プレイモード普通、正確重視の時のみ）\n\t\t\t\tif (playMode == \"普通\" || playMode == \"正確重視\") {\n\t\t\t\t\tanswerButton.className = \"transparent\";\n\t\t\t\t};\n\t\t\t\t// 正解時に表示される○の画像を消す。\n\t\t\t\tcircleImg.className = \"transparent\";\n\n\t\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\t\tclosePopup.textContent =\"終了\";\n\t\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t\t// もう一度ボタンを定義する。\n\t\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t\t// 戻るボタンを定義する。\n\t\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\t\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t// 得点の表示\n\t\t\t\tclosePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n\t\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\t\t// もう一度ボタンの表示（transparentを消して表示させる）\n\t\t\t\trestartBtn.classList.remove('transparent');\n\t\t\t\t// 戻るボタンの表示（transparentを消して表示させる）\n\t\t\t\tbackBtn.classList.remove('transparent');\n\t\t\t\t},2000);\n\t\t\t}\n\t\t\t// 残りプレイ可能時間を更新する。\n\t\t\tremainPlayingTime.textContent = remainSecLabel;\n\t\t};\n\n\t\t// スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\t\tfunction countUpScore(){\n\t\tif (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\taddPoint = addScoreLevel1;\n\t\t} else {\n\t\t\taddPoint = addScoreLevel2;\n\t\t}\n\t\ttotalScore = totalScore + addPoint;\n\t\tdisplayScore.textContent = `${totalScore.toLocaleString()} P`;\n\t\treturn totalScore;\n\t\t}\n\n\n\t\t// タイピングの正誤判定に使用する変数を定義する。\n\t\tlet wordLetterWithSmallLetter = \"\";\n\t\tlet wordLetterSole = \"\";\n\n\t\tlet charArrayInDisplayWordAlphaFirst = [];\n\t\tlet charArrayInDisplayWordAlphaSecond = [];\n\t\tlet charArrayInDisplayWordAlphaThird = [];\n\t\tlet charArrayInDisplayWordAlphaSole = [];\n\t\tlet charArrayInDisplayWordAlphaSoleSecond = [];\n\t\tlet charArrayInDisplayWordAlphaSoleThird = [];\n\n\t\tlet shiftAlreadyStartedCountAll = 0;\n\t\tlet shiftAlreadyStartedCountFirst = 0;\n\t\tlet shiftAlreadyStartedCountSecond = 0;\n\t\tlet shiftAlreadyStartedCountThird = 0;\n\t\tlet shiftAlreadyStartedCountSoleFirst = 0;\n\t\tlet shiftAlreadyStartedCountSoleSecond = 0;\n\t\tlet shiftAlreadyStartedCountSoleThird = 0;\n\n\t\tlet keyTempForSmallTsuPreWithNext = \"\";\n\t\tlet keyTempForSmallTsuPreFirst = \"\";\n\t\tlet keyTempForSmallTsuPreSecond = \"\";\n\t\tlet keyTempForSmallTsuPreThird = \"\";\n\t\tlet keyTempForNnPre = \"\";\n\n\t\t// タイプした文字が表示文字と一致する場合の処理を定義する。\n\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\tif(playEndFlag === \"0\"){\n\t\t// 文字によって、文字列の最後にあるかどうかで入力形式が変わるため、\"っ\"\"ん\"は個別に処理を定義する。\n\t\t// 先頭文字が小さい\"っ\"の場合\n\t\t// uはxtsuなどで\"っ\"を打ち込めるため、条件分岐要。\n\t\tif (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n\t\t\tif (keyDownChar.key !== \"a\"\n\t\t\t&& keyDownChar.key !== \"i\"\n\t\t\t&& keyDownChar.key !== \"e\"\n\t\t\t&& keyDownChar.key !== \"o\"\n\t\t\t&& keyDownChar.key !== \"n\") {\n\t\t\t\t// \"っ\"が最後の文字ではない場合、同じキーを２回連続でタイプしてOKとする。\n\t\t\t\tif (charArrayInDisplayWordJap[1] != null){\n\t\t\t\t\t// 入力対象文字に対して、入力処理が開始していない場合\n\t\t\t\t\tif (shiftAlreadyStartedCountAll === 0 && keyDownChar.key !== \"u\") {\n\t\t\t\t\t\tkeyTempForSmallTsuPreWithNext = keyDownChar.key;\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 同じアルファベットを入力した場合、\"っ\"を入力完了にし、再度keyDownCharCountUpを実施する。\n\t\t\t\t\t\tif(keyDownChar.key === keyTempForSmallTsuPreWithNext && keyDownChar.key !== \"u\"){\n\t\t\t\t\t\t\tkeyTempForSmallTsuPreWithNext = \"\";\n\t\t\t\t\t\t\tkeyTempForSmallTsuPreFirst = \"\";\n\t\t\t\t\t\t\tkeyTempForSmallTsuPreSecond = \"\";\n\t\t\t\t\t\t\tkeyTempForSmallTsuPreThird = \"\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t\tkeyDownCharCountUp(keyDownChar);\n\t\t\t\t\t\t// 異なる場合は前回入力アルファベットに入力したアルファベットを上書き\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (keyDownChar.key === \"t\" && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")){\n\t\t\t\t\t\t\t} else if ((keyDownChar.key === \"u\" || keyDownChar.key === \"s\") && keyTempForSmallTsuPreSecond === \"t\"\n\t\t\t\t\t\t\t\t\t&& (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")){\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (keyDownChar.key !== \"u\"){\n\t\t\t\t\t\t\tkeyTempForSmallTsuPreWithNext = keyDownChar.key;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// 先頭文字が小さい\"っ\"の場合(上記の2連続同一キータイプにより\"っ\"の入力処理が完了した場合に、下記処理が開始するのを防ぐために条件分岐を設定)\n\t\t\t\tif (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n\t\t\t\t// \"っ\"の単独入力を可能にする。\n\t\t\t\t\tif(keyDownChar.key === \"l\" || keyDownChar.key === \"x\"){\n\t\t\t\t\t\tkeyTempForSmallTsuPreFirst = keyDownChar.key;\n\t\t\t\t\t\tif (keyTempForSmallTsuPreWithNext !== \"l\"\n\t\t\t\t\t\t&& keyTempForSmallTsuPreWithNext !== \"x\"){\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\tif ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n\t\t\t\t\t\t&& keyDownChar.key === \"t\") {\n\t\t\t\t\t\tkeyTempForSmallTsuPreSecond = keyDownChar.key;\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t};\n\t\t\t\t\tif ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n\t\t\t\t\t&& keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"s\") {\n\t\t\t\t\t\tkeyTempForSmallTsuPreThird = keyDownChar.key;\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t};\n\t\t\t\t\tif ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n\t\t\t\t\t&& keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"u\") {\n\t\t\t\t\t\tkeyTempForSmallTsuPreWithNext = \"\";\n\t\t\t\t\t\tkeyTempForSmallTsuPreFirst = \"\";\n\t\t\t\t\t\tkeyTempForSmallTsuPreSecond = \"\";\n\t\t\t\t\t\tkeyTempForSmallTsuPreThird = \"\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// \"a\"\"i\"\"e\"\"o\"\"n\"が入力された時点でNGとする。\n\t\t\t\tbonusCountReset();\n\t\t\t};\n\n\t\t// 先頭文字が\"ん\"の場合、かつ次の文字あり、その文字が母音でない場合は \"n\"+\"n以外の子音\"でもOKとする。\n\t\t// それ以外の場合は、マッピング表の通り\"nn\"\"xn\"でしか入力できない。\n\t\t} else if (charArrayInDisplayWordJap[0].textContent === \"ん\"){\n\t\t\t\t\tif (shiftAlreadyStartedCountAll === 0){\n\t\t\t\t\t\tif (keyDownChar.key === \"n\" || keyDownChar.key === \"x\"){\n\t\t\t\t\t\t\tkeyTempForNnPre = keyDownChar.key;\n\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (keyTempForNnPre === \"n\"){\n\t\t\t\t\t\t\tif(charArrayInDisplayWordJap[1] != null){\n\t\t\t\t\t\t\t\tif (charArrayInDisplayWordJap[1].textContent !== \"あ\"\n\t\t\t\t\t\t\t\t&& charArrayInDisplayWordJap[1].textContent !== \"い\"\n\t\t\t\t\t\t\t\t&& charArrayInDisplayWordJap[1].textContent !== \"う\"\n\t\t\t\t\t\t\t\t&& charArrayInDisplayWordJap[1].textContent !== \"え\"\n\t\t\t\t\t\t\t\t&& charArrayInDisplayWordJap[1].textContent !== \"お\"){\n\t\t\t\t\t\t\t\t\tif(keyDownChar.key !== \"a\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"i\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"u\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"e\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"o\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"y\"){\n\t\t\t\t\t\t\t\t\t\tkeyTempForNnPre = \"\";\n\t\t\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t\t\t\t\tif(keyDownChar.key !== \"n\"){\n\t\t\t\t\t\t\t\t\t\t\tkeyDownCharCountUp(keyDownChar);\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif(keyDownChar.key !== \"a\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"i\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"u\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"e\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"o\"\n\t\t\t\t\t\t\t\t\t&& keyDownChar.key !== \"y\"){\n\t\t\t\t\t\t\t\t\t\tkeyTempForNnPre = \"\";\n\t\t\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t\t\t\t\tif(keyDownChar.key !== \"n\"){\n\t\t\t\t\t\t\t\t\t\t\tkeyDownCharCountUp(keyDownChar);\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (keyDownChar.key === \"n\"){\n\t\t\t\t\t\t\t\t\tkeyTempForNnPre = \"\";\n\t\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (keyTempForNnPre === \"x\"){\n\t\t\t\t\t\t\tif(keyDownChar.key === \"n\"){\n\t\t\t\t\t\t\t\tkeyTempForNnPre = \"\";\n\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t// \"っ\"\"ん\"以外の文字の場合\n\t\t\t} else {\n\t\t\t\t// 入力対象文字をアルファベットに分解する。\n\t\t\t\t\t// 入力対象文字に対して、入力処理が開始していない場合\n\t\t\t\t\tif (shiftAlreadyStartedCountAll === 0 ){\n\t\t\t\t\t// 2文字目が存在する場合(最後の文字でない場合)\n\t\t\t\t\tif(charArrayInDisplayWordJap[1] != null){\n\t\t\t\t\t\t// 2文字を一緒に入力するパターンに対応する処理を定義する。\n\t\t\t\t\t\twordLetterWithSmallLetter = charArrayInDisplayWordJap[0].textContent + charArrayInDisplayWordJap[1].textContent;\n\t\t\t\t\t// 文字をローマ字に変換し、アルファベットごとに分ける。\n\t\t\t\t\t// 2文字に対して、ローマ字変換パターン１をsplitする。\n\t\t\t\t\tif (romaMappingTableFirst[wordLetterWithSmallLetter] != null){\n\t\t\t\t\tcharArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetterWithSmallLetter].split(\"\").map(function(value){\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t})};\n\t\t\t\t\t// 2文字に対してローマ字変換パターン２が存在する場合はsplitする。\n\t\t\t\t\tif (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetterWithSmallLetter].split(\"\").map(function(value){\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t// 2文字に対してローマ字変換パターン３が存在する場合はsplitする。\n\t\t\t\t\tif (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetterWithSmallLetter].split(\"\").map(function(value){\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// 1文字のみを先に入力するパターンに対応する処理を定義する。\n\t\t\t\t\twordLetterSole = charArrayInDisplayWordJap[0].textContent;\n\t\t\t\t\t// 1文字目のみ対して、ローマ字変換パターン１をsplitする。\n\t\t\t\t\t// 母音の場合はsplit不可のため処理を分ける。\n\t\t\t\t\tif (wordLetterSole !== \"あ\"\n\t\t\t\t\t\t&& wordLetterSole !== \"い\"\n\t\t\t\t\t\t&& wordLetterSole !== \"う\"\n\t\t\t\t\t\t&& wordLetterSole !== \"え\"\n\t\t\t\t\t\t&& wordLetterSole !== \"お\"){\n\t\t\t\t\tcharArrayInDisplayWordAlphaSole = romaMappingTableFirst[wordLetterSole].split(\"\").map(function(value){\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t})} else {\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = romaMappingTableFirst[wordLetterSole];\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSole = [spanValue];\n\t\t\t\t\t};\n\n\t\t\t\t\t// 1文字目のみ対してローマ字変換パターン２が存在する場合はsplitする。\n\t\t\t\t\tif (romaMappingTableSecond[wordLetterSole] != null){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleSecond = romaMappingTableSecond[wordLetterSole].split(\"\").map(function(value){\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t// 1文字目のみ対してローマ字変換パターン３が存在する場合はsplitする。\n\t\t\t\t\tif (romaMappingTableThird[wordLetterSole] != null){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleThird = romaMappingTableThird[wordLetterSole].split(\"\").map(function(value){\n\t\t\t\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t\t\t\tspanValue.textContent = value;\n\t\t\t\t\t\treturn spanValue;\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t// 文字入力によるアルファベットに対する処理を開始する。\n\t\t\t\t// 文字の入力開始前である場合\n\t\t\t\tif (shiftAlreadyStartedCountAll === 0){\n\t\t\t\t\t// 2文字目が存在する場合(最後の文字でない場合)\n\t\t\t\t\tif(charArrayInDisplayWordJap[1] != null){\n\t\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n\t\t\t\t\tif (romaMappingTableFirst[wordLetterWithSmallLetter] != null){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n\t\t\t\t\tcharArrayInDisplayWordAlphaFirst.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\tshiftAlreadyStartedCountFirst = 1;\n\t\t\t\t\tif(charArrayInDisplayWordAlphaFirst.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}};\n\t\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\t\t\t\t\tif (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n\t\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSecond.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\tshiftAlreadyStartedCountSecond = 1;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSecond.length === 0){\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}};\n\t\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\t\t\t\t\tif (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n\t\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaThird.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\tshiftAlreadyStartedCountThird = 1;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaThird.length === 0){\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}}};\n\n\t\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSole.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleFirst = 1;\n\t\t\t\t\tif(charArrayInDisplayWordAlphaSole.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}};\n\t\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\t\t\t\t\tif (romaMappingTableSecond[wordLetterSole] != null){\n\t\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent\n\t\t\t\t\t\t&& charArrayInDisplayWordAlphaSole.length !== 0){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleSecond.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleSecond = 1;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t}}};\n\t\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\t\t\t\t\tif (romaMappingTableThird[wordLetterSole] != null){\n\t\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent\n\t\t\t\t\t\t&& charArrayInDisplayWordAlphaSole.length !== 0\n\t\t\t\t\t\t&& charArrayInDisplayWordAlphaSoleSecond.length !== 0){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleThird.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 1;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleThird = 1;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSoleThird.length === 0){\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t}}};\n\n\t\t\t\t\t// タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\t\t\t\t\tif (shiftAlreadyStartedCountFirst === 1\n\t\t\t\t\t\t|| shiftAlreadyStartedCountSecond === 1\n\t\t\t\t\t\t|| shiftAlreadyStartedCountThird === 1\n\t\t\t\t\t\t|| shiftAlreadyStartedCountSoleFirst === 1\n\t\t\t\t\t\t|| shiftAlreadyStartedCountSoleSecond === 1\n\t\t\t\t\t\t|| shiftAlreadyStartedCountSoleThird === 1) {\n\t\t\t\t\tcorrectTyping();\n\t\t\t\t\t} else {\n\t\t\t\t\tbonusCountReset();\n\t\t\t\t\t};\n\n\t\t\t\t\t// 文字入力が完了している場合、カウントを0にする。\n\t\t\t\t\tif (shiftAlreadyStartedCountAll === 0){\n\t\t\t\t\tshiftAlreadyStartedCountFirst = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSecond = 0;\n\t\t\t\t\tshiftAlreadyStartedCountThird = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleFirst = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleSecond = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleThird = 0;\n\t\t\t\t\t};\n\n\n\t\t// すでに1つのアルファベットを入力済みの場合\n\t\t} else if (shiftAlreadyStartedCountAll === 1){\n\t\t\t// 2文字目が存在する場合(最後の文字でない場合)\n\t\t\tif(charArrayInDisplayWordJap[1] != null){\n\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n\t\t\t\tif(shiftAlreadyStartedCountFirst === 1){\n\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n\t\t\t\t\tcharArrayInDisplayWordAlphaFirst.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 2;\n\t\t\t\t\tshiftAlreadyStartedCountFirst = 2;\n\t\t\t\t\tif(charArrayInDisplayWordAlphaFirst.length === 0){\n\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t}}};\n\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\t\t\t\tif (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountSecond === 1){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSecond.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 2;\n\t\t\t\t\t\tshiftAlreadyStartedCountSecond = 2;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSecond.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t}}}};\n\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\t\t\t\tif (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountThird === 1){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaThird.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 2;\n\t\t\t\t\t\tshiftAlreadyStartedCountThird = 2;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaThird.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t}}}}};\n\n\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\t\t\t\tif(shiftAlreadyStartedCountSoleFirst === 1){\n\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n\t\t\t\t\tcharArrayInDisplayWordAlphaSole.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 2;\n\t\t\t\t\tshiftAlreadyStartedCountSoleFirst = 2;\n\t\t\t\t\tif(charArrayInDisplayWordAlphaSole.length === 0){\n\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}};\n\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\t\t\t\tif (romaMappingTableSecond[wordLetterSole] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountSoleSecond === 1){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleSecond.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 2;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleSecond = 2;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}}};\n\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\t\t\t\tif (romaMappingTableThird[wordLetterSole] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountSoleThird === 1){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleThird.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 2;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleThird = 2;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSoleThird.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t}}}};\n\n\n\n\t\t\t\t// タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\t\t\t\tif (shiftAlreadyStartedCountFirst === 2\n\t\t\t\t\t|| shiftAlreadyStartedCountSecond === 2\n\t\t\t\t\t|| shiftAlreadyStartedCountThird === 2\n\t\t\t\t\t|| shiftAlreadyStartedCountSoleFirst === 2\n\t\t\t\t\t|| shiftAlreadyStartedCountSoleSecond === 2\n\t\t\t\t\t|| shiftAlreadyStartedCountSoleThird === 2) {\n\t\t\t\t\tcorrectTyping();\n\t\t\t\t} else {\n\t\t\t\t\tbonusCountReset();\n\t\t\t\t};\n\n\t\t\t\t\t// 文字入力が完了している場合、カウントを0にする。\n\t\t\t\t\tif (shiftAlreadyStartedCountAll === 0){\n\t\t\t\t\tshiftAlreadyStartedCountFirst = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSecond = 0;\n\t\t\t\t\tshiftAlreadyStartedCountThird = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleFirst = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleSecond = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleThird = 0;\n\t\t\t\t\t};\n\n\n\t\t\t// すでに2つのアルファベットを入力済みの場合\n\t\t\t} else if (shiftAlreadyStartedCountAll === 2){\n\t\t\t// 2文字目が存在する場合(最後の文字でない場合)\n\t\t\tif(charArrayInDisplayWordJap[1] != null){\n\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n\t\t\t\tif(shiftAlreadyStartedCountFirst === 2){\n\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n\t\t\t\t\tcharArrayInDisplayWordAlphaFirst.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 3;\n\t\t\t\t\tshiftAlreadyStartedCountFirst = 3;\n\t\t\t\t\tif(charArrayInDisplayWordAlphaFirst.length === 0){\n\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t}}};\n\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\t\t\t\tif (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountSecond === 2){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSecond.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 3;\n\t\t\t\t\t\tshiftAlreadyStartedCountSecond = 3;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSecond.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t}}}};\n\t\t\t\t// 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\t\t\t\tif (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountThird === 2){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaThird.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 3;\n\t\t\t\t\t\tshiftAlreadyStartedCountThird = 3;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaThird.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap[1].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t}}}}};\n\n\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\t\t\t\tif(shiftAlreadyStartedCountSoleFirst === 2){\n\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n\t\t\t\t\tcharArrayInDisplayWordAlphaSole.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 3;\n\t\t\t\t\tshiftAlreadyStartedCountSoleFirst = 3;\n\t\t\t\t\tif(charArrayInDisplayWordAlphaSole.length === 0){\n\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}};\n\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\t\t\t\tif (romaMappingTableSecond[wordLetterSole] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountSoleSecond === 2){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleSecond.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 3;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleSecond = 3;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t}}}};\n\t\t\t\t// 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\t\t\t\tif (romaMappingTableThird[wordLetterSole] != null){\n\t\t\t\t\tif(shiftAlreadyStartedCountSoleThird === 2){\n\t\t\t\t\tif(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent){\n\t\t\t\t\t\tcharArrayInDisplayWordAlphaSoleThird.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 3;\n\t\t\t\t\t\tshiftAlreadyStartedCountSoleThird = 3;\n\t\t\t\t\t\tif(charArrayInDisplayWordAlphaSoleThird.length === 0){\n\t\t\t\t\t\tcharArrayInDisplayWordJap[0].className = \"add_red\";\n\t\t\t\t\t\tcharArrayInDisplayWordJap.shift();\n\t\t\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\t\t\t}}}};\n\n\t\t\t\t// タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\t\t\t\tif (shiftAlreadyStartedCountFirst === 3\n\t\t\t\t|| shiftAlreadyStartedCountSecond === 3\n\t\t\t\t|| shiftAlreadyStartedCountThird === 3\n\t\t\t\t|| shiftAlreadyStartedCountSoleFirst === 3\n\t\t\t\t|| shiftAlreadyStartedCountSoleSecond === 3\n\t\t\t\t|| shiftAlreadyStartedCountSoleThird === 3) {\n\t\t\t\tcorrectTyping();\n\t\t\t\t} else {\n\t\t\t\tbonusCountReset();\n\t\t\t\t};\n\n\t\t\t\t// 文字入力が完了している場合、カウントを0にする。\n\t\t\t\tif (shiftAlreadyStartedCountAll === 0){\n\t\t\t\t\tshiftAlreadyStartedCountFirst = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSecond = 0;\n\t\t\t\t\tshiftAlreadyStartedCountThird = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleFirst = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleSecond = 0;\n\t\t\t\t\tshiftAlreadyStartedCountSoleThird = 0;\n\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// タイプした文字が解答文字と一致する場合の共通処理を定義する。\n\t\tfunction correctTyping(){\n\t\t// メーターを更新する。\n\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\tbonusCountMeter = 0;\n\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\tsetTimeout(function(){\n\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t}, 2000);\n\t\t};\n\t\t// 更新したメーターを表示する。\n\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\tif(charArrayInDisplayWordJap.length === 0) {\n\t\t\tcountUpScore();\n\t\t\tcircleImg.classList.add('circle');\n\t\t\tcircleImg.classList.remove('transparent');\n\t\t\tdisplayWordKanji.classList.add('add_gray');\n\t\t\tdisplayWordKanji.classList.add('displayWordKanji');\n\t\t\tdisplayWordKanji.classList.remove('transparent');\n\t\t\tsetTimeout(createDisplayWord,200);\n\t\t\tsetTimeout(function(){\n\t\t\tcircleImg.classList.add('transparent');\n\t\t\tcircleImg.classList.remove('circle');\n\t\t\t}, 200);\n\t\t};\n\t\t};\n\n\t\t// タイプした文字が表示文字と不一致の場合の処理を定義する。（プレイモードが正確重視の場合のみ）\n\t\t// 不正解の単語の答えを表示し、次の単語を生成する処理。\n\t\t// メーターを0にリセットする処理。\n\t\t// createDisplayWord処理が200m秒に連続で生じないためにbonusCountResetにフラグを用意する。\n\t\tfunction bonusCountReset(){\n\t\t\tif (playMode == \"正確重視\" && createDisplayWordOkFlagFromBonusCountReset == \"0\") {\n\t\t\t\tfor (let i = 0; i < charArrayInDisplayWordJap.length; i++) {\n\t\t\t\t\tcharArrayInDisplayWordJap[i].classList.add('add_gray');\n\t\t\t\t\tcharArrayInDisplayWordJap[i].classList.remove('transparent');\n\t\t\t\t}\n\t\t\t\tkeyTempForNnPre = \"\";\n\t\t\t\tshiftAlreadyStartedCountAll = 0;\n\t\t\t\tshiftAlreadyStartedCountFirst = 0;\n\t\t\t\tshiftAlreadyStartedCountSecond = 0;\n\t\t\t\tshiftAlreadyStartedCountThird = 0;\n\t\t\t\tshiftAlreadyStartedCountSoleFirst = 0;\n\t\t\t\tshiftAlreadyStartedCountSoleSecond = 0;\n\t\t\t\tshiftAlreadyStartedCountSoleThird = 0;\n\t\t\t\tdisplayWordKanji.classList.add('add_gray');\n\t\t\t\tdisplayWordKanji.classList.add('displayWordKanji');\n\t\t\t\tdisplayWordKanji.classList.remove('transparent');\n\t\t\t\tcreateDisplayWordOkFlagFromBonusCountReset = \"1\";\n\t\t\t\tsetTimeout(createDisplayWord,200); //createDisplayWord処理実行後にcreateDisplayWordOkFlagFromBonusCountReset==0に戻す。\n\t\t\t\tbonusCountMeter = 0;\n\t\t\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t\t};\n\t\t};\n\n\t\t// 英単語を生成した際に、発音させる処理を定義する。\n\t\tfunction pronounce(eng_word){\n\t\t\tlet pronunciation = new Audio('/assets/'+ eng_word + '.mp3');\n\t\t\tpronunciation.play();\n\t\t};\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}