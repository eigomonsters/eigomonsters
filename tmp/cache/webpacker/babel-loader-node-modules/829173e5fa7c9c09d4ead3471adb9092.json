{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nwindow.addEventListener('load', function () {\n  gameStart();\n});\n\nfunction gameStart() {\n  var _romaMappingTableFirs;\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = gon.wordListAll; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png'];\n  var romaMappingTableFirst = (_romaMappingTableFirs = {\n    \"あ\": \"a\",\n    \"い\": \"i\",\n    \"う\": \"u\",\n    \"え\": \"e\",\n    \"お\": \"o\",\n    \"か\": \"ka\",\n    \"き\": \"ki\",\n    \"く\": \"ku\",\n    \"け\": \"ke\",\n    \"こ\": \"ko\",\n    \"さ\": \"sa\",\n    \"し\": \"si\",\n    \"す\": \"su\",\n    \"せ\": \"se\",\n    \"そ\": \"so\",\n    \"た\": \"ta\",\n    \"ち\": \"ti\",\n    \"つ\": \"tu\",\n    \"て\": \"te\",\n    \"と\": \"to\",\n    \"な\": \"na\",\n    \"に\": \"ni\",\n    \"ぬ\": \"nu\",\n    \"ね\": \"ne\",\n    \"の\": \"no\",\n    \"は\": \"ha\",\n    \"ひ\": \"hi\",\n    \"ふ\": \"hu\",\n    \"へ\": \"he\",\n    \"ほ\": \"ho\",\n    \"ま\": \"ma\",\n    \"み\": \"mi\",\n    \"む\": \"mu\",\n    \"め\": \"me\",\n    \"も\": \"mo\",\n    \"や\": \"ya\",\n    \"ゆ\": \"yu\",\n    \"よ\": \"yo\",\n    \"ら\": \"ra\",\n    \"り\": \"ri\",\n    \"る\": \"ru\",\n    \"れ\": \"re\",\n    \"ろ\": \"ro\",\n    \"わ\": \"wa\",\n    \"を\": \"wo\",\n    \"が\": \"ga\",\n    \"ぎ\": \"gi\",\n    \"ぐ\": \"gu\",\n    \"げ\": \"ge\",\n    \"ご\": \"go\",\n    \"ざ\": \"za\",\n    \"じ\": \"zi\",\n    \"ず\": \"zu\",\n    \"ぜ\": \"ze\",\n    \"ぞ\": \"zo\",\n    \"だ\": \"da\",\n    \"ぢ\": \"di\",\n    \"づ\": \"du\",\n    \"で\": \"de\",\n    \"ど\": \"do\",\n    \"ば\": \"ba\",\n    \"び\": \"bi\",\n    \"ぶ\": \"bu\",\n    \"べ\": \"be\",\n    \"ぼ\": \"bo\",\n    \"ぱ\": \"pa\",\n    \"ぴ\": \"pi\",\n    \"ぷ\": \"pu\",\n    \"ぺ\": \"pe\",\n    \"ぽ\": \"po\",\n    \"ぁ\": \"la\",\n    \"ぃ\": \"li\",\n    \"ぅ\": \"lu\",\n    \"ぇ\": \"le\",\n    \"ぉ\": \"lo\",\n    \"ゃ\": \"lya\",\n    \"ゅ\": \"lyu\",\n    \"ょ\": \"lyo\",\n    \"でゃ\": \"dha\",\n    \"でぃ\": \"dhi\",\n    \"でゅ\": \"dhu\",\n    \"でぇ\": \"dhe\",\n    \"でょ\": \"dho\",\n    \"つぁ\": \"tsa\",\n    \"つぃ\": \"tsi\",\n    \"つぇ\": \"tse\",\n    \"つぉ\": \"tso\",\n    \"てゃ\": \"tha\",\n    \"てぃ\": \"thi\",\n    \"てゅ\": \"thu\",\n    \"てぇ\": \"the\",\n    \"てょ\": \"tho\",\n    \"ふぁ\": \"fa\",\n    \"ふぃ\": \"fi\",\n    \"ふぇ\": \"fe\",\n    \"ふぉ\": \"fo\",\n    \"うぁ\": \"wha\",\n    \"うぃ\": \"wi\",\n    \"うぇ\": \"we\",\n    \"うぉ\": \"who\",\n    \"ゔぁ\": \"va\",\n    \"ゔぃ\": \"vi\",\n    \"ゔ\": \"vu\",\n    \"ゔぇ\": \"ve\",\n    \"ゔぉ\": \"vo\",\n    \"きゃ\": \"kya\",\n    \"きぃ\": \"kyi\",\n    \"きゅ\": \"kyu\",\n    \"きぇ\": \"kye\",\n    \"きょ\": \"kyo\",\n    \"ぎゃ\": \"gya\",\n    \"ぎぃ\": \"gyi\",\n    \"ぎゅ\": \"gyu\",\n    \"ぎぇ\": \"gye\",\n    \"ぎょ\": \"gyo\",\n    \"しゃ\": \"sya\",\n    \"しぃ\": \"syi\",\n    \"しゅ\": \"syu\",\n    \"しぇ\": \"sye\",\n    \"しょ\": \"syo\",\n    \"じゃ\": \"zya\",\n    \"じぃ\": \"zyi\",\n    \"じゅ\": \"zyu\",\n    \"じぇ\": \"zye\",\n    \"じょ\": \"zyo\",\n    \"ちゃ\": \"tya\",\n    \"ちぃ\": \"tyi\",\n    \"ちゅ\": \"tyu\",\n    \"ちぇ\": \"tye\",\n    \"ちょ\": \"tyo\",\n    \"ぢゃ\": \"dya\",\n    \"ぢぃ\": \"dyi\",\n    \"ぢゅ\": \"dyu\",\n    \"ぢぇ\": \"dye\",\n    \"ぢょ\": \"dyo\",\n    \"にゃ\": \"nya\",\n    \"にぃ\": \"nyi\",\n    \"にゅ\": \"nyu\",\n    \"にぇ\": \"nye\",\n    \"にょ\": \"nyo\",\n    \"ひゃ\": \"hya\",\n    \"ひぃ\": \"hyi\",\n    \"ひゅ\": \"hyu\",\n    \"ひぇ\": \"hye\",\n    \"ひょ\": \"hyo\",\n    \"びゃ\": \"bya\",\n    \"びぃ\": \"byi\",\n    \"びゅ\": \"byu\",\n    \"びぇ\": \"bye\",\n    \"びょ\": \"byo\",\n    \"ぴゃ\": \"pya\",\n    \"ぴぃ\": \"pyi\",\n    \"ぴゅ\": \"pyu\",\n    \"ぴぇ\": \"pye\",\n    \"ぴょ\": \"pyo\",\n    \"ふゃ\": \"fya\"\n  }, _defineProperty(_romaMappingTableFirs, \"\\u3075\\u3043\", \"fyi\"), _defineProperty(_romaMappingTableFirs, \"ふゅ\", \"fyu\"), _defineProperty(_romaMappingTableFirs, \"\\u3075\\u3047\", \"fye\"), _defineProperty(_romaMappingTableFirs, \"ふょ\", \"fyo\"), _defineProperty(_romaMappingTableFirs, \"みゃ\", \"mya\"), _defineProperty(_romaMappingTableFirs, \"みぃ\", \"myi\"), _defineProperty(_romaMappingTableFirs, \"みゅ\", \"myu\"), _defineProperty(_romaMappingTableFirs, \"みぇ\", \"mye\"), _defineProperty(_romaMappingTableFirs, \"みょ\", \"myo\"), _defineProperty(_romaMappingTableFirs, \"りゃ\", \"rya\"), _defineProperty(_romaMappingTableFirs, \"りぃ\", \"ryi\"), _defineProperty(_romaMappingTableFirs, \"りゅ\", \"ryu\"), _defineProperty(_romaMappingTableFirs, \"りぇ\", \"rye\"), _defineProperty(_romaMappingTableFirs, \"りょ\", \"ryo\"), _defineProperty(_romaMappingTableFirs, \"くぁ\", \"kwa\"), _defineProperty(_romaMappingTableFirs, \"ぐぁ\", \"gwa\"), _defineProperty(_romaMappingTableFirs, \"とぅ\", \"twu\"), _defineProperty(_romaMappingTableFirs, \"どぅ\", \"dwu\"), _defineProperty(_romaMappingTableFirs, \"いぇ\", \"ye\"), _romaMappingTableFirs);\n  var romaMappingTableSecond = {\n    \"い\": \"yi\",\n    \"か\": \"ca\",\n    \"く\": \"cu\",\n    \"こ\": \"co\",\n    \"し\": \"shi\",\n    \"せ\": \"ce\",\n    \"ち\": \"chi\",\n    \"つ\": \"tsu\",\n    \"ふ\": \"fu\",\n    \"じ\": \"ji\",\n    \"ぁ\": \"xa\",\n    \"ぃ\": \"xi\",\n    \"ぅ\": \"xu\",\n    \"ぇ\": \"xe\",\n    \"ぉ\": \"xo\",\n    \"ゃ\": \"xya\",\n    \"ゅ\": \"xyu\",\n    \"ょ\": \"xyo\",\n    \"しゃ\": \"sha\",\n    \"しゅ\": \"shu\",\n    \"しぇ\": \"she\",\n    \"しょ\": \"sho\",\n    \"じゃ\": \"ja\",\n    \"じぃ\": \"jyi\",\n    \"じゅ\": \"ju\",\n    \"じぇ\": \"je\",\n    \"じょ\": \"jo\",\n    \"ちゃ\": \"cha\",\n    \"ちぃ\": \"cyi\",\n    \"ちゅ\": \"chu\",\n    \"ちぇ\": \"che\",\n    \"ちょ\": \"cho\",\n    \"うぃ\": \"whi\",\n    \"うぇ\": \"whe\"\n  };\n  var romaMappingTableThird = {\n    \"し\": \"ci\",\n    \"じゃ\": \"jya\",\n    \"じゅ\": \"jyu\",\n    \"じぇ\": \"jye\",\n    \"じょ\": \"jyo\",\n    \"ちゃ\": \"cya\",\n    \"ちゅ\": \"cyu\",\n    \"ちぇ\": \"cye\",\n    \"ちょ\": \"cyo\"\n  }; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    // メーターの初期値を表示する。\n    document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム開始までをカウントダウン変数を定義する。\n\n    var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n    countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n    countDownPopup.textContent = countDownPopupNumber; // ゲーム開始宣言の変数を定義する。\n\n    var gameStartCallAfterClose = document.getElementById(\"gameStartCall\"); // ゲーム開始宣言にclass属性を付与する。\n\n    gameStartCallAfterClose.className = \"gameStartCallAfterClose\"; //カウントダウンが0になれば、ゲームを開始する。\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    } // カウントダウン文字を１ずつ減らす。\n\n\n    countDownPopupNumber = countDownPopupNumber - 1;\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordEnglish = document.getElementById(\"displayWordEnglish\");\n    displayWordEnglish.className = \"displayWordEnglish\";\n    var displayWordKanji = document.getElementById(\"displayWordKanji\");\n    displayWordKanji.className = \"transparent\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWordJap = []; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 5000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 正解時に表示する丸を定義する。\n\n    document.getElementById(\"circleImg\").src = '/assets/正解○.png';\n    circleImg.classList.add('transparent'); // \"答えを見る\"ボタンを表示する。\n\n    var answerButton = document.getElementById(\"answerButton\");\n    answerButton.innerHTML = \"答えを見る\";\n    answerButton.className = \"answerButton\";\n\n    answerButton.onclick = function () {\n      for (var i = 0; i < charArrayInDisplayWordJap.length; i++) {\n        charArrayInDisplayWordJap[i].classList.remove('transparent');\n      }\n\n      displayWordKanji.className = \"displayWordKanji\";\n    }; // 表示するスコアを定義する。\n\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore + \" P\"; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n      var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語をランダムで選定する。\n\n      displayWordInList = wordList[randomIntegerInTotalWordList]; // 英単語を表示させる。\n\n      displayWordEnglish.textContent = displayWordInList.eng_word; // 日本語訳(漢字)を表示させる。\n\n      displayWordKanji.textContent = displayWordInList.jap_trans_1;\n      displayWordKanji.className = \"transparent\"; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n\n      charArrayInDisplayWordJap = displayWordInList.jap_trans_1_yomi.split(\"\").map(function (value) {\n        // spanタグを作成する。\n        var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n        spanValue.textContent = value;\n        spanValue.className = \"transparent\"; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\".concat(\"00\".concat(remainSec).slice(-3)); // 残りプレイ可能時間を更新する。\n\n      remainPlayingTime.innerHTML = \"<span style='font-size:20px;'>\\u6B8B\\u308A</span>\".concat(remainSecLabel, \"<span style='font-size:15px;'> \\u79D2</span>\");\n\n      if (remainMSec <= 0) {\n        clearInterval(timerId);\n        remainPlayingTime.innerHTML = \"\";\n        displayScore.textContent = \"\";\n        displayWord.textContent = \"\";\n        displayWordEnglish.textContent = \"\";\n        answerButton.remove();\n        circleImg.remove(); // ゲーム終了後にplayEndFlagを1に更新する。\n\n        playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n          restartBtn.addEventListener('click', function gameReStart() {\n            closePopup.className = \"endResultPopupAfterClose\";\n            restartBtn.className = \"restartBtnAfterClose\";\n            backBtn.className = \"backBtnAfterClose\";\n            gameStart();\n          });\n          restartBtn.innerHTML = \"<a href='./typingplay_jap'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='./typingplay_index'>コース選択画面に戻る</a>\";\n          backBtn.className = \"backBtn\";\n        }, 2000);\n      }\n    }\n\n    ; // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = \"\".concat(totalScore.toLocaleString(), \" P\");\n      return totalScore;\n    } // タイピングの正誤判定に使用する変数を定義する。\n\n\n    var wordLetterWithSmallLetter = \"\";\n    var wordLetterSole = \"\";\n    var charArrayInDisplayWordAlphaFirst = [];\n    var charArrayInDisplayWordAlphaSecond = [];\n    var charArrayInDisplayWordAlphaThird = [];\n    var charArrayInDisplayWordAlphaSole = [];\n    var charArrayInDisplayWordAlphaSoleSecond = [];\n    var charArrayInDisplayWordAlphaSoleThird = [];\n    var shiftAlreadyStartedCountAll = 0;\n    var shiftAlreadyStartedCountFirst = 0;\n    var shiftAlreadyStartedCountSecond = 0;\n    var shiftAlreadyStartedCountThird = 0;\n    var shiftAlreadyStartedCountSoleFirst = 0;\n    var shiftAlreadyStartedCountSoleSecond = 0;\n    var shiftAlreadyStartedCountSoleThird = 0;\n    var keyTempForSmallTsuPreWithNext = \"\";\n    var keyTempForSmallTsuPreFirst = \"\";\n    var keyTempForSmallTsuPreSecond = \"\";\n    var keyTempForSmallTsuPreThird = \"\";\n    var keyTempForNnPre = \"\"; // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (playEndFlag === \"0\") {\n        // 文字によって、文字列の最後にあるかどうかで入力形式が変わるため、\"っ\"\"ん\"は個別に処理を定義する。\n        // 先頭文字が小さい\"っ\"の場合\n        if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n          if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\" && keyDownChar.key !== \"n\") {\n            // \"っ\"が最後の文字ではない場合、同じキーを２回連続でタイプしてOKとする。\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 入力対象文字に対して、入力処理が開始していない場合\n              if (shiftAlreadyStartedCountAll === 0 && keyDownChar.key !== \"u\") {\n                keyTempForSmallTsuPreWithNext = keyDownChar.key;\n                shiftAlreadyStartedCountAll = 1;\n                correctTyping();\n              } else {\n                // 同じアルファベットを入力した場合、\"っ\"を入力完了にし、再度keyDownCharCountUpを実施する。\n                if (keyDownChar.key === keyTempForSmallTsuPreWithNext && keyDownChar.key !== \"u\") {\n                  keyTempForSmallTsuPreWithNext = \"\";\n                  keyTempForSmallTsuPreFirst = \"\";\n                  keyTempForSmallTsuPreSecond = \"\";\n                  keyTempForSmallTsuPreThird = \"\";\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                  correctTyping();\n                  keyDownCharCountUp(keyDownChar); // 異なる場合は前回入力アルファベットに入力したアルファベットを上書き\n                } else {\n                  if (keyDownChar.key === \"t\" && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")) {} else if ((keyDownChar.key === \"u\" || keyDownChar.key === \"s\") && keyTempForSmallTsuPreSecond === \"t\" && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")) {} else {\n                    bonusCountReset();\n                  }\n\n                  ;\n\n                  if (keyDownChar.key !== \"u\") {\n                    keyTempForSmallTsuPreWithNext = keyDownChar.key;\n                  }\n\n                  ;\n                }\n\n                ;\n              }\n\n              ;\n            }\n\n            ; // 先頭文字が小さい\"っ\"の場合(上記の2連続同一キータイプにより\"っ\"の入力処理が完了した場合に、下記処理が開始するのを防ぐために条件分岐を設定)\n\n            if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n              // \"っ\"の単独入力を可能にする。\n              if (keyDownChar.key === \"l\" || keyDownChar.key === \"x\") {\n                keyTempForSmallTsuPreFirst = keyDownChar.key;\n\n                if (keyTempForSmallTsuPreWithNext !== \"l\" && keyTempForSmallTsuPreWithNext !== \"x\") {\n                  correctTyping();\n                }\n\n                ;\n              }\n\n              ;\n\n              if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyDownChar.key === \"t\") {\n                keyTempForSmallTsuPreSecond = keyDownChar.key;\n                correctTyping();\n              }\n\n              ;\n\n              if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"s\") {\n                keyTempForSmallTsuPreThird = keyDownChar.key;\n                correctTyping();\n              }\n\n              ;\n\n              if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\") && keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"u\") {\n                keyTempForSmallTsuPreWithNext = \"\";\n                keyTempForSmallTsuPreFirst = \"\";\n                keyTempForSmallTsuPreSecond = \"\";\n                keyTempForSmallTsuPreThird = \"\";\n                charArrayInDisplayWordJap[0].className = \"add_gray\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n                correctTyping();\n              }\n\n              ;\n            }\n\n            ;\n          } else {\n            // \"a\"\"i\"\"e\"\"o\"\"n\"が入力された時点でNGとする。\n            bonusCountReset();\n          }\n\n          ; // 先頭文字が\"ん\"の場合、かつ次の文字あり、その文字が母音でない場合は \"n\"+\"n以外の子音\"でもOKとする。\n          // それ以外の場合は、マッピング表の通り\"nn\"\"xn\"でしか入力できない。\n        } else if (charArrayInDisplayWordJap[0].textContent === \"ん\") {\n          if (shiftAlreadyStartedCountAll === 0) {\n            if (keyDownChar.key === \"n\" || keyDownChar.key === \"x\") {\n              keyTempForNnPre = keyDownChar.key;\n              shiftAlreadyStartedCountAll = 1;\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ;\n          } else {\n            if (keyTempForNnPre === \"n\") {\n              if (charArrayInDisplayWordJap[1] != null) {\n                if (charArrayInDisplayWordJap[1].textContent !== \"あ\" && charArrayInDisplayWordJap[1].textContent !== \"い\" && charArrayInDisplayWordJap[1].textContent !== \"う\" && charArrayInDisplayWordJap[1].textContent !== \"え\" && charArrayInDisplayWordJap[1].textContent !== \"お\") {\n                  if (keyDownChar.key !== \"a\" && keyDownChar.key !== \"i\" && keyDownChar.key !== \"u\" && keyDownChar.key !== \"e\" && keyDownChar.key !== \"o\") {\n                    keyTempForNnPre = \"\";\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                    correctTyping();\n\n                    if (keyDownChar.key !== \"n\") {\n                      keyDownCharCountUp(keyDownChar);\n                    }\n\n                    ;\n                  } else {\n                    bonusCountReset();\n                  }\n\n                  ;\n                }\n\n                ;\n              } else {\n                if (keyDownChar.key === \"n\") {\n                  keyTempForNnPre = \"\";\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                  correctTyping();\n                } else {\n                  bonusCountReset();\n                }\n\n                ;\n              }\n\n              ;\n            } else if (keyTempForNnPre === \"x\") {\n              if (keyDownChar.key === \"n\") {\n                keyTempForNnPre = \"\";\n                charArrayInDisplayWordJap[0].className = \"add_gray\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n                correctTyping();\n              } else {\n                bonusCountReset();\n              }\n\n              ;\n            }\n\n            ;\n          }\n\n          ; // \"っ\"\"ん\"以外の文字の場合\n        } else {\n          // 入力対象文字をアルファベットに分解する。\n          // 入力対象文字に対して、入力処理が開始していない場合\n          if (shiftAlreadyStartedCountAll === 0) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字を一緒に入力するパターンに対応する処理を定義する。\n              wordLetterWithSmallLetter = charArrayInDisplayWordJap[0].textContent + charArrayInDisplayWordJap[1].textContent; // 文字をローマ字に変換し、アルファベットごとに分ける。\n              // 2文字に対して、ローマ字変換パターン１をsplitする。\n\n              if (romaMappingTableFirst[wordLetterWithSmallLetter] != null) {\n                charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                  var spanValue = document.createElement(\"span\");\n                  spanValue.textContent = value;\n                  return spanValue;\n                });\n              }\n\n              ; // 2文字に対してローマ字変換パターン２が存在する場合はsplitする。\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                  var spanValue = document.createElement(\"span\");\n                  spanValue.textContent = value;\n                  return spanValue;\n                });\n              }\n\n              ; // 2文字に対してローマ字変換パターン３が存在する場合はsplitする。\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetterWithSmallLetter].split(\"\").map(function (value) {\n                  var spanValue = document.createElement(\"span\");\n                  spanValue.textContent = value;\n                  return spanValue;\n                });\n              }\n\n              ;\n            }\n\n            ; // 1文字のみを先に入力するパターンに対応する処理を定義する。\n\n            wordLetterSole = charArrayInDisplayWordJap[0].textContent; // 1文字目のみ対して、ローマ字変換パターン１をsplitする。\n            // 母音の場合はsplit不可のため処理を分ける。\n\n            if (wordLetterSole !== \"あ\" && wordLetterSole !== \"い\" && wordLetterSole !== \"う\" && wordLetterSole !== \"え\" && wordLetterSole !== \"お\") {\n              charArrayInDisplayWordAlphaSole = romaMappingTableFirst[wordLetterSole].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            } else {\n              var spanValue = document.createElement(\"span\");\n              spanValue.textContent = romaMappingTableFirst[wordLetterSole];\n              charArrayInDisplayWordAlphaSole = [spanValue];\n            }\n\n            ; // 1文字目のみ対してローマ字変換パターン２が存在する場合はsplitする。\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              charArrayInDisplayWordAlphaSoleSecond = romaMappingTableSecond[wordLetterSole].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ; // 1文字目のみ対してローマ字変換パターン３が存在する場合はsplitする。\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              charArrayInDisplayWordAlphaSoleThird = romaMappingTableThird[wordLetterSole].split(\"\").map(function (value) {\n                var spanValue = document.createElement(\"span\");\n                spanValue.textContent = value;\n                return spanValue;\n              });\n            }\n\n            ;\n          }\n\n          ; // 文字入力によるアルファベットに対する処理を開始する。\n          // 文字の入力開始前である場合\n\n          if (shiftAlreadyStartedCountAll === 0) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if (romaMappingTableFirst[wordLetterWithSmallLetter] != null) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountFirst = 1;\n\n                  if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap[1].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSecond.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountSecond = 1;\n\n                  if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap[1].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                  charArrayInDisplayWordAlphaThird.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountThird = 1;\n\n                  if (charArrayInDisplayWordAlphaThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap[1].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n            if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n              charArrayInDisplayWordAlphaSole.shift();\n              shiftAlreadyStartedCountAll = 1;\n              shiftAlreadyStartedCountSoleFirst = 1;\n\n              if (charArrayInDisplayWordAlphaSole.length === 0) {\n                charArrayInDisplayWordJap[0].className = \"add_gray\";\n                charArrayInDisplayWordJap.shift();\n                shiftAlreadyStartedCountAll = 0;\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent && charArrayInDisplayWordAlphaSole.length !== 0) {\n                charArrayInDisplayWordAlphaSoleSecond.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountSoleSecond = 1;\n\n                if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent && charArrayInDisplayWordAlphaSole.length !== 0 && charArrayInDisplayWordAlphaSoleSecond.length !== 0) {\n                charArrayInDisplayWordAlphaSoleThird.shift();\n                shiftAlreadyStartedCountAll = 1;\n                shiftAlreadyStartedCountSoleThird = 1;\n\n                if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n            if (shiftAlreadyStartedCountFirst === 1 || shiftAlreadyStartedCountSecond === 1 || shiftAlreadyStartedCountThird === 1 || shiftAlreadyStartedCountSoleFirst === 1 || shiftAlreadyStartedCountSoleSecond === 1 || shiftAlreadyStartedCountSoleThird === 1) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ; // 文字入力が完了している場合、カウントを0にする。\n\n            if (shiftAlreadyStartedCountAll === 0) {\n              shiftAlreadyStartedCountFirst = 0;\n              shiftAlreadyStartedCountSecond = 0;\n              shiftAlreadyStartedCountThird = 0;\n              shiftAlreadyStartedCountSoleFirst = 0;\n              shiftAlreadyStartedCountSoleSecond = 0;\n              shiftAlreadyStartedCountSoleThird = 0;\n            }\n\n            ; // すでに1つのアルファベットを入力済みの場合\n          } else if (shiftAlreadyStartedCountAll === 1) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if (shiftAlreadyStartedCountFirst === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountFirst = 2;\n\n                  if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap[1].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountSecond === 1) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSecond = 2;\n\n                    if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountThird === 1) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountThird = 2;\n\n                    if (charArrayInDisplayWordAlphaThird.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n            if (shiftAlreadyStartedCountSoleFirst === 1) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                charArrayInDisplayWordAlphaSole.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountSoleFirst = 2;\n\n                if (charArrayInDisplayWordAlphaSole.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleSecond === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleSecond.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSoleSecond = 2;\n\n                  if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleThird === 1) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleThird.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSoleThird = 2;\n\n                  if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n            if (shiftAlreadyStartedCountFirst === 2 || shiftAlreadyStartedCountSecond === 2 || shiftAlreadyStartedCountThird === 2 || shiftAlreadyStartedCountSoleFirst === 2 || shiftAlreadyStartedCountSoleSecond === 2 || shiftAlreadyStartedCountSoleThird === 2) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ; // 文字入力が完了している場合、カウントを0にする。\n\n            if (shiftAlreadyStartedCountAll === 0) {\n              shiftAlreadyStartedCountFirst = 0;\n              shiftAlreadyStartedCountSecond = 0;\n              shiftAlreadyStartedCountThird = 0;\n              shiftAlreadyStartedCountSoleFirst = 0;\n              shiftAlreadyStartedCountSoleSecond = 0;\n              shiftAlreadyStartedCountSoleThird = 0;\n            }\n\n            ; // すでに2つのアルファベットを入力済みの場合\n          } else if (shiftAlreadyStartedCountAll === 2) {\n            // 2文字目が存在する場合(最後の文字でない場合)\n            if (charArrayInDisplayWordJap[1] != null) {\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if (shiftAlreadyStartedCountFirst === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountFirst = 3;\n\n                  if (charArrayInDisplayWordAlphaFirst.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap[1].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountSecond === 2) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent) {\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSecond = 3;\n\n                    if (charArrayInDisplayWordAlphaSecond.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n\n              ; // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null) {\n                if (shiftAlreadyStartedCountThird === 2) {\n                  if (keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent) {\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountThird = 3;\n\n                    if (charArrayInDisplayWordAlphaThird.length === 0) {\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n\n            if (shiftAlreadyStartedCountSoleFirst === 2) {\n              if (keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                charArrayInDisplayWordAlphaSole.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountSoleFirst = 3;\n\n                if (charArrayInDisplayWordAlphaSole.length === 0) {\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n\n            if (romaMappingTableSecond[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleSecond === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleSecond.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSoleSecond = 3;\n\n                  if (charArrayInDisplayWordAlphaSoleSecond.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n\n            if (romaMappingTableThird[wordLetterSole] != null) {\n              if (shiftAlreadyStartedCountSoleThird === 2) {\n                if (keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent) {\n                  charArrayInDisplayWordAlphaSoleThird.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSoleThird = 3;\n\n                  if (charArrayInDisplayWordAlphaSoleThird.length === 0) {\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }\n                }\n              }\n            }\n\n            ; // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n\n            if (shiftAlreadyStartedCountFirst === 3 || shiftAlreadyStartedCountSecond === 3 || shiftAlreadyStartedCountThird === 3 || shiftAlreadyStartedCountSoleFirst === 3 || shiftAlreadyStartedCountSoleSecond === 3 || shiftAlreadyStartedCountSoleThird === 3) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            }\n\n            ; // 文字入力が完了している場合、カウントを0にする。\n\n            if (shiftAlreadyStartedCountAll === 0) {\n              shiftAlreadyStartedCountFirst = 0;\n              shiftAlreadyStartedCountSecond = 0;\n              shiftAlreadyStartedCountThird = 0;\n              shiftAlreadyStartedCountSoleFirst = 0;\n              shiftAlreadyStartedCountSoleSecond = 0;\n              shiftAlreadyStartedCountSoleThird = 0;\n            }\n\n            ;\n          }\n        }\n      }\n    }\n\n    ;\n\n    function correctTyping() {\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter + 1; // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n        displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n        setTimeout(function () {\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      }\n\n      ; // 更新したメーターを表示する。\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWordJap.length === 0) {\n        countUpScore();\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n        displayWordKanji.classList.add('add_gray');\n        displayWordKanji.classList.add('displayWordKanji');\n        displayWordKanji.classList.remove('transparent');\n        setTimeout(createDisplayWord, 200);\n        setTimeout(function () {\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n        }, 200);\n      }\n\n      ;\n    }\n\n    ;\n\n    function bonusCountReset() {\n      bonusCountMeter = 0;\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n\n    ;\n  }\n\n  ;\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_jap.js"],"names":["window","addEventListener","gameStart","wordList","gon","wordListAll","imgArray","romaMappingTableFirst","romaMappingTableSecond","romaMappingTableThird","bonusCountMeter","bonusCountMeterMax","displayBonusAddPlayTime","document","getElementById","className","bonusAddPlayTime","countDownPopupNumber","timerIdToStart","setInterval","countDownTimeToStart","src","countDownPopup","textContent","gameStartCallAfterClose","clearInterval","remove","typingPlayStart","displayWord","displayWordEnglish","displayWordKanji","charArrayInDisplayWordJap","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","circleImg","classList","add","answerButton","innerHTML","onclick","i","length","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","playEndFlag","randomIntegerInTotalWordList","Math","floor","random","displayWordInList","eng_word","jap_trans_1","jap_trans_1_yomi","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","slice","closePopup","backBtn","restartBtn","toLocaleString","gameReStart","countUpScore","addPoint","wordLetterWithSmallLetter","wordLetterSole","charArrayInDisplayWordAlphaFirst","charArrayInDisplayWordAlphaSecond","charArrayInDisplayWordAlphaThird","charArrayInDisplayWordAlphaSole","charArrayInDisplayWordAlphaSoleSecond","charArrayInDisplayWordAlphaSoleThird","shiftAlreadyStartedCountAll","shiftAlreadyStartedCountFirst","shiftAlreadyStartedCountSecond","shiftAlreadyStartedCountThird","shiftAlreadyStartedCountSoleFirst","shiftAlreadyStartedCountSoleSecond","shiftAlreadyStartedCountSoleThird","keyTempForSmallTsuPreWithNext","keyTempForSmallTsuPreFirst","keyTempForSmallTsuPreSecond","keyTempForSmallTsuPreThird","keyTempForNnPre","keyDownChar","key","correctTyping","shift","bonusCountReset"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\tgameStart();\n});\n\nfunction gameStart(){\n\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  const wordList = gon.wordListAll;\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n\n  const romaMappingTableFirst = {\n    \"あ\":\"a\",\n    \"い\":\"i\",\n    \"う\":\"u\",\n    \"え\":\"e\",\n    \"お\":\"o\",\n    \"か\":\"ka\",\n    \"き\":\"ki\",\n    \"く\":\"ku\",\n    \"け\":\"ke\",\n    \"こ\":\"ko\",\n    \"さ\":\"sa\",\n    \"し\":\"si\",\n    \"す\":\"su\",\n    \"せ\":\"se\",\n    \"そ\":\"so\",\n    \"た\":\"ta\",\n    \"ち\":\"ti\",\n    \"つ\":\"tu\",\n    \"て\":\"te\",\n    \"と\":\"to\",\n    \"な\":\"na\",\n    \"に\":\"ni\",\n    \"ぬ\":\"nu\",\n    \"ね\":\"ne\",\n    \"の\":\"no\",\n    \"は\":\"ha\",\n    \"ひ\":\"hi\",\n    \"ふ\":\"hu\",\n    \"へ\":\"he\",\n    \"ほ\":\"ho\",\n    \"ま\":\"ma\",\n    \"み\":\"mi\",\n    \"む\":\"mu\",\n    \"め\":\"me\",\n    \"も\":\"mo\",\n    \"や\":\"ya\",\n    \"ゆ\":\"yu\",\n    \"よ\":\"yo\",\n    \"ら\":\"ra\",\n    \"り\":\"ri\",\n    \"る\":\"ru\",\n    \"れ\":\"re\",\n    \"ろ\":\"ro\",\n    \"わ\":\"wa\",\n    \"を\":\"wo\",\n    \"が\":\"ga\",\n    \"ぎ\":\"gi\",\n    \"ぐ\":\"gu\",\n    \"げ\":\"ge\",\n    \"ご\":\"go\",\n    \"ざ\":\"za\",\n    \"じ\":\"zi\",\n    \"ず\":\"zu\",\n    \"ぜ\":\"ze\",\n    \"ぞ\":\"zo\",\n    \"だ\":\"da\",\n    \"ぢ\":\"di\",\n    \"づ\":\"du\",\n    \"で\":\"de\",\n    \"ど\":\"do\",\n    \"ば\":\"ba\",\n    \"び\":\"bi\",\n    \"ぶ\":\"bu\",\n    \"べ\":\"be\",\n    \"ぼ\":\"bo\",\n    \"ぱ\":\"pa\",\n    \"ぴ\":\"pi\",\n    \"ぷ\":\"pu\",\n    \"ぺ\":\"pe\",\n    \"ぽ\":\"po\",\n    \"ぁ\":\"la\",\n    \"ぃ\":\"li\",\n    \"ぅ\":\"lu\",\n    \"ぇ\":\"le\",\n    \"ぉ\":\"lo\",\n    \"ゃ\":\"lya\",\n    \"ゅ\":\"lyu\",\n    \"ょ\":\"lyo\",\n    \"でゃ\":\"dha\",\n    \"でぃ\":\"dhi\",\n    \"でゅ\":\"dhu\",\n    \"でぇ\":\"dhe\",\n    \"でょ\":\"dho\",\n    \"つぁ\":\"tsa\",\n    \"つぃ\":\"tsi\",\n    \"つぇ\":\"tse\",\n    \"つぉ\":\"tso\",\n    \"てゃ\":\"tha\",\n    \"てぃ\":\"thi\",\n    \"てゅ\":\"thu\",\n    \"てぇ\":\"the\",\n    \"てょ\":\"tho\",\n    \"ふぁ\":\"fa\",\n    \"ふぃ\":\"fi\",\n    \"ふぇ\":\"fe\",\n    \"ふぉ\":\"fo\",\n    \"うぁ\":\"wha\",\n    \"うぃ\":\"wi\",\n    \"うぇ\":\"we\",\n    \"うぉ\":\"who\",\n    \"ゔぁ\":\"va\",\n    \"ゔぃ\":\"vi\",\n    \"ゔ\":\"vu\",\n    \"ゔぇ\":\"ve\",\n    \"ゔぉ\":\"vo\",\n    \"きゃ\":\"kya\",\n    \"きぃ\":\"kyi\",\n    \"きゅ\":\"kyu\",\n    \"きぇ\":\"kye\",\n    \"きょ\":\"kyo\",\n    \"ぎゃ\":\"gya\",\n    \"ぎぃ\":\"gyi\",\n    \"ぎゅ\":\"gyu\",\n    \"ぎぇ\":\"gye\",\n    \"ぎょ\":\"gyo\",\n    \"しゃ\":\"sya\",\n    \"しぃ\":\"syi\",\n    \"しゅ\":\"syu\",\n    \"しぇ\":\"sye\",\n    \"しょ\":\"syo\",\n    \"じゃ\":\"zya\",\n    \"じぃ\":\"zyi\",\n    \"じゅ\":\"zyu\",\n    \"じぇ\":\"zye\",\n    \"じょ\":\"zyo\",\n    \"ちゃ\":\"tya\",\n    \"ちぃ\":\"tyi\",\n    \"ちゅ\":\"tyu\",\n    \"ちぇ\":\"tye\",\n    \"ちょ\":\"tyo\",\n    \"ぢゃ\":\"dya\",\n    \"ぢぃ\":\"dyi\",\n    \"ぢゅ\":\"dyu\",\n    \"ぢぇ\":\"dye\",\n    \"ぢょ\":\"dyo\",\n    \"にゃ\":\"nya\",\n    \"にぃ\":\"nyi\",\n    \"にゅ\":\"nyu\",\n    \"にぇ\":\"nye\",\n    \"にょ\":\"nyo\",\n    \"ひゃ\":\"hya\",\n    \"ひぃ\":\"hyi\",\n    \"ひゅ\":\"hyu\",\n    \"ひぇ\":\"hye\",\n    \"ひょ\":\"hyo\",\n    \"びゃ\":\"bya\",\n    \"びぃ\":\"byi\",\n    \"びゅ\":\"byu\",\n    \"びぇ\":\"bye\",\n    \"びょ\":\"byo\",\n    \"ぴゃ\":\"pya\",\n    \"ぴぃ\":\"pyi\",\n    \"ぴゅ\":\"pyu\",\n    \"ぴぇ\":\"pye\",\n    \"ぴょ\":\"pyo\",\n    \"ふゃ\":\"fya\",\n    \"ふぃ\":\"fyi\",\n    \"ふゅ\":\"fyu\",\n    \"ふぇ\":\"fye\",\n    \"ふょ\":\"fyo\",\n    \"みゃ\":\"mya\",\n    \"みぃ\":\"myi\",\n    \"みゅ\":\"myu\",\n    \"みぇ\":\"mye\",\n    \"みょ\":\"myo\",\n    \"りゃ\":\"rya\",\n    \"りぃ\":\"ryi\",\n    \"りゅ\":\"ryu\",\n    \"りぇ\":\"rye\",\n    \"りょ\":\"ryo\",\n    \"くぁ\":\"kwa\",\n    \"ぐぁ\":\"gwa\",\n    \"とぅ\":\"twu\",\n    \"どぅ\":\"dwu\",\n    \"いぇ\":\"ye\"\n  };\n\n  const romaMappingTableSecond = {\n    \"い\":\"yi\",\n    \"か\":\"ca\",\n    \"く\":\"cu\",\n    \"こ\":\"co\",\n    \"し\":\"shi\",\n    \"せ\":\"ce\",\n    \"ち\":\"chi\",\n    \"つ\":\"tsu\",\n    \"ふ\":\"fu\",\n    \"じ\":\"ji\",\n    \"ぁ\":\"xa\",\n    \"ぃ\":\"xi\",\n    \"ぅ\":\"xu\",\n    \"ぇ\":\"xe\",\n    \"ぉ\":\"xo\",\n    \"ゃ\":\"xya\",\n    \"ゅ\":\"xyu\",\n    \"ょ\":\"xyo\",\n    \"しゃ\":\"sha\",\n    \"しゅ\":\"shu\",\n    \"しぇ\":\"she\",\n    \"しょ\":\"sho\",\n    \"じゃ\":\"ja\",\n    \"じぃ\":\"jyi\",\n    \"じゅ\":\"ju\",\n    \"じぇ\":\"je\",\n    \"じょ\":\"jo\",\n    \"ちゃ\":\"cha\",\n    \"ちぃ\":\"cyi\",\n    \"ちゅ\":\"chu\",\n    \"ちぇ\":\"che\",\n    \"ちょ\":\"cho\",\n    \"うぃ\":\"whi\",\n    \"うぇ\":\"whe\"\n  };\n\n  const romaMappingTableThird = {\n    \"し\":\"ci\",\n    \"じゃ\":\"jya\",\n    \"じゅ\":\"jyu\",\n    \"じぇ\":\"jye\",\n    \"じょ\":\"jyo\",\n    \"ちゃ\":\"cya\",\n    \"ちゅ\":\"cyu\",\n    \"ちぇ\":\"cye\",\n    \"ちょ\":\"cyo\"\n  };\n\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n\n\n\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n\t\t// メーターの初期値を表示する。\n\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t// ゲーム開始までをカウントダウン変数を定義する。\n\t\tlet countDownPopup = document.getElementById(\"countDownPopup\");\n\t\t// class属性を付与する。\n\t\tcountDownPopup.className = \"countDownPopup\";\n\t\t// ゲーム開始までをカウントダウン変数の初期値を表示する。\n\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t// ゲーム開始宣言の変数を定義する。\n\t\tlet gameStartCallAfterClose = document.getElementById(\"gameStartCall\");\n\t\t// ゲーム開始宣言にclass属性を付与する。\n\t\tgameStartCallAfterClose.className = \"gameStartCallAfterClose\";\n\n\t\t//カウントダウンが0になれば、ゲームを開始する。\n\t\tif (countDownPopupNumber <= 0){\n\t\tclearInterval(timerIdToStart);\n\t\tcountDownPopup.remove();\n\t\ttypingPlayStart();\n\t\t} else {\n\t\tcountDownPopup.textContent = countDownPopupNumber;\n\t\t}\n\t\t// カウントダウン文字を１ずつ減らす。\n\t\tcountDownPopupNumber = countDownPopupNumber - 1;\n  }\n\n  // ゲームを開始する処理を定義する。\n  function typingPlayStart(){\n\n    // 表示する単語を定義する。\n    const displayWord = document.getElementById(\"displayWord\");\n    displayWord.className =  \"displayWord\";\n    const displayWordEnglish = document.getElementById(\"displayWordEnglish\");\n    displayWordEnglish.className =  \"displayWordEnglish\";\n\tconst displayWordKanji = document.getElementById(\"displayWordKanji\");\n    displayWordKanji.className =  \"transparent\";\n    // 表示する単語を一文字ずつに分ける変数を定義する。\n    let charArrayInDisplayWordJap =[];\n    // 表示する単語を作成する。\n    createDisplayWord();\n\n    // プレイ開始時間を取得する。\n    const startTime = Date.now();\n    // 表示する残りのプレイ可能時間を定義する。\n    let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className =  \"remainPlayingTime\";\n    // 表示するスタート時のプレイ可能時間を定義する。\n    let initialPlayingTimeMSec = 5000;\n    // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n    setTimeout(countDownTime,0);\n    // 1秒ごとにcountDownTimeを実施するように定義する。\n    const timerId = setInterval(countDownTime,1000);\n\n    // 正解時に表示する丸を定義する。\n    document.getElementById(\"circleImg\").src= '/assets/正解○.png';\n    circleImg.classList.add('transparent');\n\n    // \"答えを見る\"ボタンを表示する。\n\tlet answerButton = document.getElementById(\"answerButton\");\n\tanswerButton.innerHTML = \"答えを見る\";\n    answerButton.className = \"answerButton\";\n\tanswerButton.onclick = function() {\n\t\tfor (let i = 0; i < charArrayInDisplayWordJap.length; i++) {\n\t\t\tcharArrayInDisplayWordJap[i].classList.remove('transparent');\n\t\t  }\n\t\tdisplayWordKanji.className =  \"displayWordKanji\";\n\t  };\n\n    // 表示するスコアを定義する。\n    let displayScore = document.getElementById(\"displayScore\");\n    displayScore.className =  \"displayScore\";\n    // 合計スコアの初期値を定義する。\n    let totalScore = 0;\n    // 表示するスコアに初期値を定義する。\n    displayScore.textContent = totalScore + \" P\";\n    // スコアアップする基準を定義する。\n    const refTextLengthForCountUpLevel1 = 4;\n    const addScoreLevel1 = 1000;\n    const addScoreLevel2 = 3000;\n\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n    document.addEventListener(`keydown`, keyDownCharCountUp);\n\n    // ゲーム終了を判定するフラグを定義する。\n    let playEndFlag = \"0\";\n\n    // 表示する単語を作成する処理を定義する。\n    function createDisplayWord(){\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\";\n      // 0〜textListsの総数間で整数値をランダムで算出する。\n      let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n      // 表示する単語をランダムで選定する。\n      displayWordInList = wordList[randomIntegerInTotalWordList];\n\n      // 英単語を表示させる。\n      displayWordEnglish.textContent = displayWordInList.eng_word;\n\t  // 日本語訳(漢字)を表示させる。\n      displayWordKanji.textContent = displayWordInList.jap_trans_1;\n\t  displayWordKanji.className =  \"transparent\";\n      // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n      charArrayInDisplayWordJap = displayWordInList.jap_trans_1_yomi.split(\"\").map(function(value){\n        // spanタグを作成する。\n        let spanValue = document.createElement(\"span\");\n        // spanタグに一文字を挿入する。\n        spanValue.textContent = value;\n        spanValue.className = \"transparent\";\n        // 表示する単語にspanタグで閉じた一文字を追加する。\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    }\n\n    // プレイ時間をカウントダウンする処理を定義する。\n    function countDownTime(){\n      const currentTime = Date.now();\n      const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      const remainSec = Math.ceil(remainMSec/1000);\n      let  remainSecLabel = `${(`00${remainSec}` ).slice( -3 )}`;\n      // 残りプレイ可能時間を更新する。\n      remainPlayingTime.innerHTML = `<span style='font-size:20px;'>残り</span>${remainSecLabel}<span style='font-size:15px;'> 秒</span>`;\n      if (remainMSec <= 0){\n        clearInterval(timerId);\n        remainPlayingTime.innerHTML = \"\";\n        displayScore.textContent =\"\";\n        displayWord.textContent =\"\";\n        displayWordEnglish.textContent =\"\";\n\t\tanswerButton.remove();\n\t\tcircleImg.remove();\n        // ゲーム終了後にplayEndFlagを1に更新する。\n        playEndFlag = \"1\";\n        // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n        const closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent =\"終了\";\n        closePopup.className = \"closePopup\";\n        // 戻るボタンを定義する。\n        const backBtn = document.getElementById(\"backBtn\");\n        // もう一度ボタンを定義する。\n        const restartBtn = document.getElementById(\"restartBtn\");\n        // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n        setTimeout(function(){\n          closePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n          closePopup.className = \"endResultPopup\";\n\t\t  restartBtn.addEventListener('click', function gameReStart(){\n\t\t\tclosePopup.className = \"endResultPopupAfterClose\";\n\t\t\trestartBtn.className = \"restartBtnAfterClose\";\n\t\t\tbackBtn.className = \"backBtnAfterClose\";\n\t\t\tgameStart();\n\t\t});\n          restartBtn.innerHTML = \"<a href='./typingplay_jap'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='./typingplay_index'>コース選択画面に戻る</a>\";\n          backBtn.className = \"backBtn\";\n        },2000);\n      }\n    };\n\n    // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n    function countUpScore(){\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = `${totalScore.toLocaleString()} P`;\n      return totalScore;\n    }\n\n\n    // タイピングの正誤判定に使用する変数を定義する。\n    let wordLetterWithSmallLetter = \"\";\n    let wordLetterSole = \"\";\n\n    let charArrayInDisplayWordAlphaFirst = [];\n    let charArrayInDisplayWordAlphaSecond = [];\n    let charArrayInDisplayWordAlphaThird = [];\n    let charArrayInDisplayWordAlphaSole = [];\n    let charArrayInDisplayWordAlphaSoleSecond = [];\n    let charArrayInDisplayWordAlphaSoleThird = [];\n\n    let shiftAlreadyStartedCountAll = 0;\n    let shiftAlreadyStartedCountFirst = 0;\n    let shiftAlreadyStartedCountSecond = 0;\n    let shiftAlreadyStartedCountThird = 0;\n    let shiftAlreadyStartedCountSoleFirst = 0;\n    let shiftAlreadyStartedCountSoleSecond = 0;\n    let shiftAlreadyStartedCountSoleThird = 0;\n\n    let keyTempForSmallTsuPreWithNext = \"\";\n    let keyTempForSmallTsuPreFirst = \"\";\n    let keyTempForSmallTsuPreSecond = \"\";\n    let keyTempForSmallTsuPreThird = \"\";\n    let keyTempForNnPre = \"\";\n\n    // タイプした文字が表示文字と一致する場合の処理を定義する。\n    function keyDownCharCountUp(keyDownChar){\n      if(playEndFlag === \"0\"){\n      // 文字によって、文字列の最後にあるかどうかで入力形式が変わるため、\"っ\"\"ん\"は個別に処理を定義する。\n      // 先頭文字が小さい\"っ\"の場合\n      if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n          if (keyDownChar.key !== \"a\"\n          && keyDownChar.key !== \"i\"\n          && keyDownChar.key !== \"e\"\n          && keyDownChar.key !== \"o\"\n          && keyDownChar.key !== \"n\") {\n              // \"っ\"が最後の文字ではない場合、同じキーを２回連続でタイプしてOKとする。\n              if (charArrayInDisplayWordJap[1] != null){\n                  // 入力対象文字に対して、入力処理が開始していない場合\n                  if (shiftAlreadyStartedCountAll === 0 && keyDownChar.key !== \"u\") {\n                    keyTempForSmallTsuPreWithNext = keyDownChar.key;\n                    shiftAlreadyStartedCountAll = 1;\n                    correctTyping();\n                  } else {\n                      // 同じアルファベットを入力した場合、\"っ\"を入力完了にし、再度keyDownCharCountUpを実施する。\n                      if(keyDownChar.key === keyTempForSmallTsuPreWithNext && keyDownChar.key !== \"u\"){\n                        keyTempForSmallTsuPreWithNext = \"\";\n                        keyTempForSmallTsuPreFirst = \"\";\n                        keyTempForSmallTsuPreSecond = \"\";\n                        keyTempForSmallTsuPreThird = \"\";\n                        charArrayInDisplayWordJap[0].className = \"add_gray\";\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                        correctTyping();\n                        keyDownCharCountUp(keyDownChar);\n                      // 異なる場合は前回入力アルファベットに入力したアルファベットを上書き\n                      } else {\n                          if (keyDownChar.key === \"t\" && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")){\n                          } else if ((keyDownChar.key === \"u\" || keyDownChar.key === \"s\") && keyTempForSmallTsuPreSecond === \"t\"\n                                  && (keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")){\n                          } else {\n                            bonusCountReset();\n                          };\n                          if (keyDownChar.key !== \"u\"){\n                          keyTempForSmallTsuPreWithNext = keyDownChar.key;\n                          };\n                      };\n                  };\n              };\n\n              // 先頭文字が小さい\"っ\"の場合(上記の2連続同一キータイプにより\"っ\"の入力処理が完了した場合に、下記処理が開始するのを防ぐために条件分岐を設定)\n              if (charArrayInDisplayWordJap[0].textContent === \"っ\") {\n              // \"っ\"の単独入力を可能にする。\n                  if(keyDownChar.key === \"l\" || keyDownChar.key === \"x\"){\n                      keyTempForSmallTsuPreFirst = keyDownChar.key;\n                      if (keyTempForSmallTsuPreWithNext !== \"l\"\n                      && keyTempForSmallTsuPreWithNext !== \"x\"){\n                      correctTyping();\n                      };\n                  };\n                  if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n                      && keyDownChar.key === \"t\") {\n                      keyTempForSmallTsuPreSecond = keyDownChar.key;\n                      correctTyping();\n                  };\n                  if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n                  && keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"s\") {\n                      keyTempForSmallTsuPreThird = keyDownChar.key;\n                      correctTyping();\n                  };\n                  if ((keyTempForSmallTsuPreFirst === \"l\" || keyTempForSmallTsuPreFirst === \"x\")\n                  && keyTempForSmallTsuPreSecond === \"t\" && keyDownChar.key === \"u\") {\n                      keyTempForSmallTsuPreWithNext = \"\";\n                      keyTempForSmallTsuPreFirst = \"\";\n                      keyTempForSmallTsuPreSecond = \"\";\n                      keyTempForSmallTsuPreThird = \"\";\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                      correctTyping();\n                  };\n              };\n          } else {\n            // \"a\"\"i\"\"e\"\"o\"\"n\"が入力された時点でNGとする。\n            bonusCountReset();\n          };\n\n      // 先頭文字が\"ん\"の場合、かつ次の文字あり、その文字が母音でない場合は \"n\"+\"n以外の子音\"でもOKとする。\n      // それ以外の場合は、マッピング表の通り\"nn\"\"xn\"でしか入力できない。\n      } else if (charArrayInDisplayWordJap[0].textContent === \"ん\"){\n                  if (shiftAlreadyStartedCountAll === 0){\n                    if (keyDownChar.key === \"n\" || keyDownChar.key === \"x\"){\n                        keyTempForNnPre = keyDownChar.key;\n                        shiftAlreadyStartedCountAll = 1;\n                        correctTyping();\n                    } else {\n                      bonusCountReset();\n                    };\n                  } else {\n                      if (keyTempForNnPre === \"n\"){\n                        if(charArrayInDisplayWordJap[1] != null){\n                          if (charArrayInDisplayWordJap[1].textContent !== \"あ\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"い\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"う\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"え\"\n                          && charArrayInDisplayWordJap[1].textContent !== \"お\"){\n                              if(keyDownChar.key !== \"a\"\n                              && keyDownChar.key !== \"i\"\n                              && keyDownChar.key !== \"u\"\n                              && keyDownChar.key !== \"e\"\n                              && keyDownChar.key !== \"o\"){\n                                keyTempForNnPre = \"\";\n                                charArrayInDisplayWordJap[0].className = \"add_gray\";\n                                charArrayInDisplayWordJap.shift();\n                                shiftAlreadyStartedCountAll = 0;\n                                correctTyping();\n                                if(keyDownChar.key !== \"n\"){\n                                keyDownCharCountUp(keyDownChar);\n                                };\n                              } else {\n                                  bonusCountReset();\n                              };\n                          };\n                        } else {\n                          if (keyDownChar.key === \"n\"){\n                            keyTempForNnPre = \"\";\n                            charArrayInDisplayWordJap[0].className = \"add_gray\";\n                            charArrayInDisplayWordJap.shift();\n                            shiftAlreadyStartedCountAll = 0;\n                            correctTyping();\n                          } else {\n                              bonusCountReset();\n                          };\n                        };\n                    } else if (keyTempForNnPre === \"x\"){\n                        if(keyDownChar.key === \"n\"){\n                          keyTempForNnPre = \"\";\n                          charArrayInDisplayWordJap[0].className = \"add_gray\";\n                          charArrayInDisplayWordJap.shift();\n                          shiftAlreadyStartedCountAll = 0;\n                          correctTyping();\n                        } else {\n                          bonusCountReset();\n                        };\n                    };\n                };\n        // \"っ\"\"ん\"以外の文字の場合\n        } else {\n            // 入力対象文字をアルファベットに分解する。\n                // 入力対象文字に対して、入力処理が開始していない場合\n                if (shiftAlreadyStartedCountAll === 0 ){\n                  // 2文字目が存在する場合(最後の文字でない場合)\n                  if(charArrayInDisplayWordJap[1] != null){\n                    // 2文字を一緒に入力するパターンに対応する処理を定義する。\n                    wordLetterWithSmallLetter = charArrayInDisplayWordJap[0].textContent + charArrayInDisplayWordJap[1].textContent;\n                  // 文字をローマ字に変換し、アルファベットごとに分ける。\n                  // 2文字に対して、ローマ字変換パターン１をsplitする。\n                  if (romaMappingTableFirst[wordLetterWithSmallLetter] != null){\n                  charArrayInDisplayWordAlphaFirst = romaMappingTableFirst[wordLetterWithSmallLetter].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                  })};\n                  // 2文字に対してローマ字変換パターン２が存在する場合はsplitする。\n                  if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                    charArrayInDisplayWordAlphaSecond = romaMappingTableSecond[wordLetterWithSmallLetter].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                  // 2文字に対してローマ字変換パターン３が存在する場合はsplitする。\n                  if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                    charArrayInDisplayWordAlphaThird = romaMappingTableThird[wordLetterWithSmallLetter].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                };\n\n                  // 1文字のみを先に入力するパターンに対応する処理を定義する。\n                  wordLetterSole = charArrayInDisplayWordJap[0].textContent;\n                  // 1文字目のみ対して、ローマ字変換パターン１をsplitする。\n                  // 母音の場合はsplit不可のため処理を分ける。\n                  if (wordLetterSole !== \"あ\"\n                      && wordLetterSole !== \"い\"\n                      && wordLetterSole !== \"う\"\n                      && wordLetterSole !== \"え\"\n                      && wordLetterSole !== \"お\"){\n                  charArrayInDisplayWordAlphaSole = romaMappingTableFirst[wordLetterSole].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                  })} else {\n                      let spanValue = document.createElement(\"span\");\n                      spanValue.textContent = romaMappingTableFirst[wordLetterSole];\n                      charArrayInDisplayWordAlphaSole = [spanValue];\n                  };\n\n                  // 1文字目のみ対してローマ字変換パターン２が存在する場合はsplitする。\n                  if (romaMappingTableSecond[wordLetterSole] != null){\n                    charArrayInDisplayWordAlphaSoleSecond = romaMappingTableSecond[wordLetterSole].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                  // 1文字目のみ対してローマ字変換パターン３が存在する場合はsplitする。\n                  if (romaMappingTableThird[wordLetterSole] != null){\n                    charArrayInDisplayWordAlphaSoleThird = romaMappingTableThird[wordLetterSole].split(\"\").map(function(value){\n                    let spanValue = document.createElement(\"span\");\n                    spanValue.textContent = value;\n                    return spanValue;\n                    });\n                  };\n                };\n\n        // 文字入力によるアルファベットに対する処理を開始する。\n            // 文字の入力開始前である場合\n              if (shiftAlreadyStartedCountAll === 0){\n                // 2文字目が存在する場合(最後の文字でない場合)\n                if(charArrayInDisplayWordJap[1] != null){\n                // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n                if (romaMappingTableFirst[wordLetterWithSmallLetter] != null){\n                if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                  charArrayInDisplayWordAlphaFirst.shift();\n                  shiftAlreadyStartedCountAll = 1;\n                  shiftAlreadyStartedCountFirst = 1;\n                  if(charArrayInDisplayWordAlphaFirst.length === 0){\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap[1].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                }}};\n                // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n                if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n                      charArrayInDisplayWordAlphaSecond.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountSecond = 1;\n                      if(charArrayInDisplayWordAlphaSecond.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_gray\";\n                        charArrayInDisplayWordJap[1].className = \"add_gray\";\n                        charArrayInDisplayWordJap.shift();\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                }}};\n                // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n                if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n                      charArrayInDisplayWordAlphaThird.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountThird = 1;\n                      if(charArrayInDisplayWordAlphaThird.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_gray\";\n                        charArrayInDisplayWordJap[1].className = \"add_gray\";\n                        charArrayInDisplayWordJap.shift();\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                }}}};\n\n                // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n                if(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                    charArrayInDisplayWordAlphaSole.shift();\n                    shiftAlreadyStartedCountAll = 1;\n                    shiftAlreadyStartedCountSoleFirst = 1;\n                  if(charArrayInDisplayWordAlphaSole.length === 0){\n                    charArrayInDisplayWordJap[0].className = \"add_gray\";\n                    charArrayInDisplayWordJap.shift();\n                    shiftAlreadyStartedCountAll = 0;\n                  }};\n                // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n                if (romaMappingTableSecond[wordLetterSole] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent\n                      && charArrayInDisplayWordAlphaSole.length !== 0){\n                      charArrayInDisplayWordAlphaSoleSecond.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountSoleSecond = 1;\n                      if(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_gray\";\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                    }}};\n                // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n                if (romaMappingTableThird[wordLetterSole] != null){\n                    if(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent\n                      && charArrayInDisplayWordAlphaSole.length !== 0\n                      && charArrayInDisplayWordAlphaSoleSecond.length !== 0){\n                      charArrayInDisplayWordAlphaSoleThird.shift();\n                      shiftAlreadyStartedCountAll = 1;\n                      shiftAlreadyStartedCountSoleThird = 1;\n                      if(charArrayInDisplayWordAlphaSoleThird.length === 0){\n                        charArrayInDisplayWordJap[0].className = \"add_gray\";\n                        charArrayInDisplayWordJap.shift();\n                        shiftAlreadyStartedCountAll = 0;\n                      }}};\n\n                // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n                if (shiftAlreadyStartedCountFirst === 1\n                    || shiftAlreadyStartedCountSecond === 1\n                    || shiftAlreadyStartedCountThird === 1\n                    || shiftAlreadyStartedCountSoleFirst === 1\n                    || shiftAlreadyStartedCountSoleSecond === 1\n                    || shiftAlreadyStartedCountSoleThird === 1) {\n                  correctTyping();\n                } else {\n                  bonusCountReset();\n                };\n\n                // 文字入力が完了している場合、カウントを0にする。\n                if (shiftAlreadyStartedCountAll === 0){\n                  shiftAlreadyStartedCountFirst = 0;\n                  shiftAlreadyStartedCountSecond = 0;\n                  shiftAlreadyStartedCountThird = 0;\n                  shiftAlreadyStartedCountSoleFirst = 0;\n                  shiftAlreadyStartedCountSoleSecond = 0;\n                  shiftAlreadyStartedCountSoleThird = 0;\n                };\n\n\n      // すでに1つのアルファベットを入力済みの場合\n      } else if (shiftAlreadyStartedCountAll === 1){\n        // 2文字目が存在する場合(最後の文字でない場合)\n        if(charArrayInDisplayWordJap[1] != null){\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountFirst === 1){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 2;\n                shiftAlreadyStartedCountFirst = 2;\n                if(charArrayInDisplayWordAlphaFirst.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap[1].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n              }}};\n              // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountSecond === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSecond = 2;\n                    if(charArrayInDisplayWordAlphaSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}};\n              // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountThird === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountThird = 2;\n                    if(charArrayInDisplayWordAlphaThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}}};\n\n              // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountSoleFirst === 1){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                  charArrayInDisplayWordAlphaSole.shift();\n                  shiftAlreadyStartedCountAll = 2;\n                  shiftAlreadyStartedCountSoleFirst = 2;\n                if(charArrayInDisplayWordAlphaSole.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleSecond === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSoleSecond.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSoleSecond = 2;\n                    if(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                  }}}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleThird === 1){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent){\n                    charArrayInDisplayWordAlphaSoleThird.shift();\n                    shiftAlreadyStartedCountAll = 2;\n                    shiftAlreadyStartedCountSoleThird = 2;\n                    if(charArrayInDisplayWordAlphaSoleThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }}}};\n\n\n\n              // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n              if (shiftAlreadyStartedCountFirst === 2\n                || shiftAlreadyStartedCountSecond === 2\n                || shiftAlreadyStartedCountThird === 2\n                || shiftAlreadyStartedCountSoleFirst === 2\n                || shiftAlreadyStartedCountSoleSecond === 2\n                || shiftAlreadyStartedCountSoleThird === 2) {\n                correctTyping();\n              } else {\n                bonusCountReset();\n              };\n\n                // 文字入力が完了している場合、カウントを0にする。\n                if (shiftAlreadyStartedCountAll === 0){\n                  shiftAlreadyStartedCountFirst = 0;\n                  shiftAlreadyStartedCountSecond = 0;\n                  shiftAlreadyStartedCountThird = 0;\n                  shiftAlreadyStartedCountSoleFirst = 0;\n                  shiftAlreadyStartedCountSoleSecond = 0;\n                  shiftAlreadyStartedCountSoleThird = 0;\n                };\n\n\n        // すでに2つのアルファベットを入力済みの場合\n        } else if (shiftAlreadyStartedCountAll === 2){\n          // 2文字目が存在する場合(最後の文字でない場合)\n          if(charArrayInDisplayWordJap[1] != null){\n              // 2文字に対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountFirst === 2){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaFirst[0].textContent) {\n                charArrayInDisplayWordAlphaFirst.shift();\n                shiftAlreadyStartedCountAll = 3;\n                shiftAlreadyStartedCountFirst = 3;\n                if(charArrayInDisplayWordAlphaFirst.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap[1].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n              }}};\n              // 2文字に対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountSecond === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSecond.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSecond = 3;\n                    if(charArrayInDisplayWordAlphaSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}};\n              // 2文字に対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterWithSmallLetter] != null){\n                if(shiftAlreadyStartedCountThird === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaThird[0].textContent){\n                    charArrayInDisplayWordAlphaThird.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountThird = 3;\n                    if(charArrayInDisplayWordAlphaThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap[1].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n              }}}}};\n\n              // 1文字目のみに対してタイプキーがローマ字変換パターン１に該当する場合\n              if(shiftAlreadyStartedCountSoleFirst === 2){\n              if(keyDownChar.key === charArrayInDisplayWordAlphaSole[0].textContent) {\n                  charArrayInDisplayWordAlphaSole.shift();\n                  shiftAlreadyStartedCountAll = 3;\n                  shiftAlreadyStartedCountSoleFirst = 3;\n                if(charArrayInDisplayWordAlphaSole.length === 0){\n                  charArrayInDisplayWordJap[0].className = \"add_gray\";\n                  charArrayInDisplayWordJap.shift();\n                  shiftAlreadyStartedCountAll = 0;\n                }}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン２に該当する場合\n              if (romaMappingTableSecond[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleSecond === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleSecond[0].textContent){\n                    charArrayInDisplayWordAlphaSoleSecond.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSoleSecond = 3;\n                    if(charArrayInDisplayWordAlphaSoleSecond.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                  }}}};\n              // 1文字目のみに対してタイプキーがローマ字変換パターン３に該当する場合\n              if (romaMappingTableThird[wordLetterSole] != null){\n                if(shiftAlreadyStartedCountSoleThird === 2){\n                  if(keyDownChar.key === charArrayInDisplayWordAlphaSoleThird[0].textContent){\n                    charArrayInDisplayWordAlphaSoleThird.shift();\n                    shiftAlreadyStartedCountAll = 3;\n                    shiftAlreadyStartedCountSoleThird = 3;\n                    if(charArrayInDisplayWordAlphaSoleThird.length === 0){\n                      charArrayInDisplayWordJap[0].className = \"add_gray\";\n                      charArrayInDisplayWordJap.shift();\n                      shiftAlreadyStartedCountAll = 0;\n                    }}}};\n\n            // タイプキーがローマ字変換パターン１〜３のいずれかに該当する場合\n            if (shiftAlreadyStartedCountFirst === 3\n              || shiftAlreadyStartedCountSecond === 3\n              || shiftAlreadyStartedCountThird === 3\n              || shiftAlreadyStartedCountSoleFirst === 3\n              || shiftAlreadyStartedCountSoleSecond === 3\n              || shiftAlreadyStartedCountSoleThird === 3) {\n              correctTyping();\n            } else {\n              bonusCountReset();\n            };\n\n              // 文字入力が完了している場合、カウントを0にする。\n              if (shiftAlreadyStartedCountAll === 0){\n                shiftAlreadyStartedCountFirst = 0;\n                shiftAlreadyStartedCountSecond = 0;\n                shiftAlreadyStartedCountThird = 0;\n                shiftAlreadyStartedCountSoleFirst = 0;\n                shiftAlreadyStartedCountSoleSecond = 0;\n                shiftAlreadyStartedCountSoleThird = 0;\n              };\n            }\n          }\n        }\n      };\n\n\n    function correctTyping(){\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter +1;\n      // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n      if(bonusCountMeter >= bonusCountMeterMax){\n        bonusCountMeter = 0;\n        // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n        initialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n        // 延長した残りプレイ時間を表示する。\n        displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n        // 延長した残りプレイ時間をフェードアウトする。\n        displayBonusAddPlayTime.classList.add('fadeout');\n        // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n        setTimeout(function(){\n          displayBonusAddPlayTime.textContent = \"\";\n          displayBonusAddPlayTime.classList.remove('fadeout');\n        }, 2000);\n      };\n      // 更新したメーターを表示する。\n      document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n      // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n      if(charArrayInDisplayWordJap.length === 0) {\n        countUpScore();\n        circleImg.classList.add('circle');\n        circleImg.classList.remove('transparent');\n\t\tdisplayWordKanji.classList.add('add_gray');\n\t\tdisplayWordKanji.classList.add('displayWordKanji');\n\t\tdisplayWordKanji.classList.remove('transparent');\n        setTimeout(createDisplayWord,200);\n        setTimeout(function(){\n          circleImg.classList.add('transparent');\n          circleImg.classList.remove('circle');\n    \t}, 200);\n      };\n    };\n\n    function bonusCountReset(){\n      bonusCountMeter = 0;\n      document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n    };\n  };\n};\n"]},"metadata":{},"sourceType":"module"}