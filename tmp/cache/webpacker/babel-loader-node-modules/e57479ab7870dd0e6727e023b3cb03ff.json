{"ast":null,"code":"window.addEventListener('load', function () {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eeeeee\", \"ffffff\", \"gggggg\", \"hhhhhh\"]; // 表示する単語を定義する。\n\n  var displayWord = document.getElementById(\"displayWord\");\n  var checkTexts = []; // 表示する単語を作成する。\n\n  createDisplayWord(); // 表示する単語を作成する。\n\n  function createDisplayWord() {\n    // 表示単語を初期化する。\n    displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n    var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n    // spanタグで閉じた単語を表示する。\n\n    checkTexts = wordList[randomIntegerInTotalWordList].split(\"\").map(function (value) {\n      // spanタグを作成する。\n      var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n      spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n      displayWord.appendChild(spanValue);\n      return spanValue;\n    });\n  } // let time = document.getElementById(\"time\");\n  // let playingTime = 6000;\n  // const closePopup = document.getElementById(\"closePopup\");\n  // let endFlag = \"0\";\n  // const startTime = Date.now();\n  // const countDown = function(){\n  //   const currentTime = Date.now();\n  //   const difference = currentTime - startTime;\n  //   const remainMSec = playingTime - difference;\n  //   const remainSec = Math.ceil(remainMSec/1000);\n  //   let  label = `残り${remainSec}秒`;\n  //   if (remainMSec <= 0){\n  //     clearInterval(timerId);\n  //     label = \"\";\n  //     const totalScore = score - addPoint;\n  //     point.textContent =\"\";\n  //     point.className = \"transparent\";\n  //     p.textContent =\"\";\n  //     p.className =\"transparent\";\n  //     endFlag = \"1\";\n  //     closePopup.textContent =\"終了\";\n  //     closePopup.className = \"closePopup\";\n  //     setTimeout(function(){\n  //       closePopup.textContent = `あなたの得点は${totalScore}点です!`;\n  //       closePopup.className = \"endPopup\";\n  //     },1000);\n  //     }\n  //     time.textContent = label;\n  // }\n  // setTimeout(countDown,0);\n  // const timerId = setInterval(countDown,1000);\n  // let point = document.getElementById(\"point\");\n  // let score = 0;\n  // const textLength = 4;\n  // const addPointLevel1 = 1;\n  // const addPointLevel2 = 3;\n  // setTimeout(countPoint,0);\n  // function countPoint(){\n  //   point.textContent = score;\n  //     if (checkTexts.length < textLength){\n  //       addPoint = addPointLevel1;\n  //     } else{\n  //       addPoint = addPointLevel2;\n  //     }\n  //   score = score + addPoint;\n  //   return score;\n  // }\n\n\n  document.addEventListener(\"keydown\", keyDownCharacterCountUp); // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10.png', '/assets/メーターPNG/メーター20.png', '/assets/メーターPNG/メーター30.png', '/assets/メーターPNG/メーター40.png', '/assets/メーターPNG/メーター50.png', '/assets/メーターPNG/メーター60.png', '/assets/メーターPNG/メーター70.png', '/assets/メーターPNG/メーター80.png', '/assets/メーターPNG/メーター90.png', '/assets/メーターPNG/メーター100.png'];\n  var bonusCount = 0;\n  var bonusCountMax = 10;\n  document.getElementById(\"meterImg\").src = imgArray[bonusCount];\n\n  function keyDownCharacterCountUp(keyDownCharacter) {\n    if (keyDownCharacter.key === checkTexts[0].textContent) {\n      // && endFlag===\"0\") {\n      checkTexts[0].className = \"add_red\"; // bonusCount = bonusCount +1;\n\n      console.log(checkTexts[0].className);\n      checkTexts.shift();\n      if (checkTexts.length === 0) createDisplayWord(); //,countPoint();\n    } // if(bonusCount >= bonusCountMax){\n    //   playingTime = playingTime +3000;\n    // bonusCount =0;\n    //}\n    // else if(endFlag===\"0\"){\n    //   bonusCount =0;\n    // }\n\n\n    document.getElementById(\"meterImg\").src = imgArray[bonusCount];\n  }\n});","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay.js"],"names":["window","addEventListener","wordList","displayWord","document","getElementById","checkTexts","createDisplayWord","textContent","randomIntegerInTotalWordList","Math","floor","random","length","split","map","value","spanValue","createElement","appendChild","keyDownCharacterCountUp","imgArray","bonusCount","bonusCountMax","src","keyDownCharacter","key","className","console","log","shift"],"mappings":"AAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAU;AAExC;AACA;AACA,MAAMC,QAAQ,GAAG,CACf,KADe,EAEf,KAFe,EAGf,KAHe,EAIf,KAJe,EAKf,QALe,EAMf,QANe,EAOf,QAPe,EAQf,QARe,CAAjB,CAJwC,CAexC;;AACA,MAAMC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAApB;AAEA,MAAIC,UAAU,GAAE,EAAhB,CAlBwC,CAoBxC;;AACAC,EAAAA,iBAAiB,GArBuB,CAuB1C;;AACA,WAASA,iBAAT,GAA4B;AAC1B;AACAJ,IAAAA,WAAW,CAACK,WAAZ,GAA0B,EAA1B,CAF0B,CAI1B;;AACA,QAAIC,4BAA4B,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBV,QAAQ,CAACW,MAApC,CAAnC,CAL0B,CAM1B;AACA;;AACAP,IAAAA,UAAU,GAAGJ,QAAQ,CAACO,4BAAD,CAAR,CAAuCK,KAAvC,CAA6C,EAA7C,EAAiDC,GAAjD,CAAqD,UAASC,KAAT,EAAe;AAC7E;AACA,UAAIC,SAAS,GAAGb,QAAQ,CAACc,aAAT,CAAuB,MAAvB,CAAhB,CAF6E,CAG7E;;AACAD,MAAAA,SAAS,CAACT,WAAV,GAAwBQ,KAAxB,CAJ6E,CAK7E;;AACAb,MAAAA,WAAW,CAACgB,WAAZ,CAAwBF,SAAxB;AACA,aAAOA,SAAP;AACA,KARS,CAAb;AASD,GAzCyC,CA4C1C;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEb,EAAAA,QAAQ,CAACH,gBAAT,YAAqCmB,uBAArC,EA5GwC,CA8GxC;;AACA,MAAMC,QAAQ,GAAE,CACd,2BADc,EAEd,4BAFc,EAGd,4BAHc,EAId,4BAJc,EAKd,4BALc,EAMd,4BANc,EAOd,4BAPc,EAQd,4BARc,EASd,4BATc,EAUd,4BAVc,EAWd,6BAXc,CAAhB;AAcD,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAMC,aAAa,GAAG,EAAtB;AACAnB,EAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCmB,GAApC,GAAwCH,QAAQ,CAACC,UAAD,CAAhD;;AAGD,WAASF,uBAAT,CAAiCK,gBAAjC,EAAkD;AAClD,QAAGA,gBAAgB,CAACC,GAAjB,KAAyBpB,UAAU,CAAC,CAAD,CAAV,CAAcE,WAA1C,EAAuD;AAAC;AACpDF,MAAAA,UAAU,CAAC,CAAD,CAAV,CAAcqB,SAAd,GAA0B,SAA1B,CADmD,CAEnD;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYvB,UAAU,CAAC,CAAD,CAAV,CAAcqB,SAA1B;AACArB,MAAAA,UAAU,CAACwB,KAAX;AACA,UAAGxB,UAAU,CAACO,MAAX,KAAsB,CAAzB,EAA4BN,iBAAiB,GALM,CAKF;AAClD,KAP+C,CAW9C;AACA;AACA;AACA;AAGD;AACA;AACA;;;AACGH,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCmB,GAApC,GAAwCH,QAAQ,CAACC,UAAD,CAAhD;AACF;AAMH,CA7JD","sourcesContent":["window.addEventListener('load', function(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  const wordList = [\n    \"aaa\",\n    \"bbb\",\n    \"ccc\",\n    \"ddd\",\n    \"eeeeee\",\n    \"ffffff\",\n    \"gggggg\",\n    \"hhhhhh\"\n  ];\n\n  // 表示する単語を定義する。\n  const displayWord = document.getElementById(\"displayWord\");\n\n  let checkTexts =[];\n\n  // 表示する単語を作成する。\n  createDisplayWord();\n\n// 表示する単語を作成する。\nfunction createDisplayWord(){\n  // 表示単語を初期化する。\n  displayWord.textContent = \"\";\n\n  // 0〜textListsの総数間で整数値をランダムで算出する。\n  let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n  // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n  // spanタグで閉じた単語を表示する。\n  checkTexts = wordList[randomIntegerInTotalWordList].split(\"\").map(function(value){\n      // spanタグを作成する。\n      let spanValue = document.createElement(\"span\");\n      // spanタグに一文字を挿入する。\n      spanValue.textContent = value;\n      // 表示する単語にspanタグで閉じた一文字を追加する。\n      displayWord.appendChild(spanValue);\n      return spanValue;\n     });\n}\n\n\n// let time = document.getElementById(\"time\");\n\n// let playingTime = 6000;\n\n// const closePopup = document.getElementById(\"closePopup\");\n\n// let endFlag = \"0\";\n\n// const startTime = Date.now();\n// const countDown = function(){\n//   const currentTime = Date.now();\n//   const difference = currentTime - startTime;\n//   const remainMSec = playingTime - difference;\n//   const remainSec = Math.ceil(remainMSec/1000);\n//   let  label = `残り${remainSec}秒`;\n//   if (remainMSec <= 0){\n//     clearInterval(timerId);\n//     label = \"\";\n//     const totalScore = score - addPoint;\n//     point.textContent =\"\";\n//     point.className = \"transparent\";\n//     p.textContent =\"\";\n//     p.className =\"transparent\";\n\n//     endFlag = \"1\";\n\n//     closePopup.textContent =\"終了\";\n//     closePopup.className = \"closePopup\";\n//     setTimeout(function(){\n//       closePopup.textContent = `あなたの得点は${totalScore}点です!`;\n//       closePopup.className = \"endPopup\";\n//     },1000);\n//     }\n//     time.textContent = label;\n\n// }\n\n// setTimeout(countDown,0);\n// const timerId = setInterval(countDown,1000);\n\n\n\n// let point = document.getElementById(\"point\");\n\n// let score = 0;\n\n// const textLength = 4;\n// const addPointLevel1 = 1;\n// const addPointLevel2 = 3;\n\n// setTimeout(countPoint,0);\n\n// function countPoint(){\n//   point.textContent = score;\n//     if (checkTexts.length < textLength){\n//       addPoint = addPointLevel1;\n//     } else{\n//       addPoint = addPointLevel2;\n//     }\n//   score = score + addPoint;\n//   return score;\n// }\n\n\n  document.addEventListener(`keydown`, keyDownCharacterCountUp);\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10.png',\n    '/assets/メーターPNG/メーター20.png',\n    '/assets/メーターPNG/メーター30.png',\n    '/assets/メーターPNG/メーター40.png',\n    '/assets/メーターPNG/メーター50.png',\n    '/assets/メーターPNG/メーター60.png',\n    '/assets/メーターPNG/メーター70.png',\n    '/assets/メーターPNG/メーター80.png',\n    '/assets/メーターPNG/メーター90.png',\n    '/assets/メーターPNG/メーター100.png'\n  ]\n\n let bonusCount = 0;\n const bonusCountMax = 10;\n document.getElementById(\"meterImg\").src=imgArray[bonusCount];\n\n\nfunction keyDownCharacterCountUp(keyDownCharacter){\nif(keyDownCharacter.key === checkTexts[0].textContent ){// && endFlag===\"0\") {\n    checkTexts[0].className = \"add_red\";\n    // bonusCount = bonusCount +1;\n    console.log(checkTexts[0].className);\n    checkTexts.shift();\n    if(checkTexts.length === 0) createDisplayWord(); //,countPoint();\n  }\n\n    \n\n    // if(bonusCount >= bonusCountMax){\n    //   playingTime = playingTime +3000;\n    // bonusCount =0;\n    //}\n\n     \n   // else if(endFlag===\"0\"){\n   //   bonusCount =0;\n   // }\n      document.getElementById(\"meterImg\").src=imgArray[bonusCount];\n   }\n\n\n\n  \n\n})\n"]},"metadata":{},"sourceType":"module"}