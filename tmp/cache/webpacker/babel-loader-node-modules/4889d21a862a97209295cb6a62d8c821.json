{"ast":null,"code":"window.addEventListener('load', function () {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eeeeee\", \"ffffff\", \"gggggg\", \"hhhhhh\"]; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10.png', '/assets/メーターPNG/メーター20.png', '/assets/メーターPNG/メーター30.png', '/assets/メーターPNG/メーター40.png', '/assets/メーターPNG/メーター50.png', '/assets/メーターPNG/メーター60.png', '/assets/メーターPNG/メーター70.png', '/assets/メーターPNG/メーター80.png', '/assets/メーターPNG/メーター90.png', '/assets/メーターPNG/メーター100.png']; // 表示する単語を定義する。\n\n  var displayWord = document.getElementById(\"displayWord\"); // 表示する単語を一文字ずつに分ける変数を定義する。\n\n  var charArrayInDisplayWord = []; // 表示する単語を作成する。\n\n  createDisplayWord(); // プレイ開始時間を取得する。\n\n  var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n  var remainPlayingTime = document.getElementById(\"remainPlayingTime\"); // 表示するスタート時のプレイ可能時間を定義する。\n\n  var initialPlayingTimeMSec = 6000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n  setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n  var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n  var displayScore = document.getElementById(\"displayScore\"); // 合計スコアの初期値を定義する。\n\n  var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n  displayScore.textContent = totalScore; // スコアアップする基準を定義する。\n\n  var refTextLengthForCountUpLevel1 = 4;\n  var addScoreLevel1 = 1;\n  var addScoreLevel2 = 3; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n  document.addEventListener(\"keydown\", keyDownCharCountUp); // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 10; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // ゲーム終了を判定するフラグを定義する。\n\n  var endFlag = \"0\"; // ゲーム終了を知らせるポップアップを定義する。\n\n  var closePopup = document.getElementById(\"closePopup\"); // 表示する単語を作成する処理を定義する。\n\n  function createDisplayWord() {\n    // 表示単語を初期化する。\n    displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n    var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n    // spanタグで閉じた単語を表示する。\n\n    charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].split(\"\").map(function (value) {\n      // spanタグを作成する。\n      var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n      spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n      displayWord.appendChild(spanValue);\n      return spanValue;\n    });\n  } // プレイ時間をカウントダウンする処理を定義する。\n\n\n  function countDownTime() {\n    var currentTime = Date.now();\n    var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n    var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n    var remainSec = Math.ceil(remainMSec / 1000);\n    var remainSecLabel = \"\\u6B8B\\u308A\".concat(remainSec, \"\\u79D2\");\n\n    if (remainMSec <= 0) {\n      clearInterval(timerId);\n      remainSecLabel = \"\"; //const totalScore = score - addPoint;\n\n      displayScore.textContent = \"\"; //displayScore.className = \"transparent\";\n\n      displayWord.textContent = \"\"; //displayWord.className =\"transparent\";\n      // ゲーム終了後にplayEndFlagを1に更新する。\n\n      playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n\n      closePopup.textContent = \"終了\";\n      closePopup.className = \"closePopup\";\n      setTimeout(function () {\n        closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore, \"\\u70B9\\u3067\\u3059!\");\n        closePopup.className = \"endPopup\";\n      }, 1000);\n    } // 残りプレイ可能時間を更新する。\n\n\n    remainPlayingTime.textContent = remainSecLabel;\n  } // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n\n  function countUpScore() {\n    if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n      addPoint = addScoreLevel1;\n    } else {\n      addPoint = addScoreLevel2;\n    }\n\n    totalScore = totalScore + addPoint;\n    displayScore.textContent = totalScore;\n    return totalScore;\n  } // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n\n  function keyDownCharCountUp(keyDownChar) {\n    if (keyDownChar.key === charArrayInDisplayWord[0].textContent && endFlag === \"0\") {\n      // 文字色を変更する。\n      charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n      bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n      charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n      if (charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord(); // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n      if (bonusCountMeter >= bonusCountMeterMax) {\n        bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n        initialPlayingTimeMSec = initialPlayingTimeMSec + 3000;\n      }\n    } else if (endFlag === \"0\") {\n      // タイプミスでメーターを初期値に戻す。\n      bonusCountMeter = 0;\n    } // 更新したメーターを表示する。\n\n\n    document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n  }\n});","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay.js"],"names":["window","addEventListener","wordList","imgArray","displayWord","document","getElementById","charArrayInDisplayWord","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","setInterval","displayScore","totalScore","textContent","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","bonusCountMeter","bonusCountMeterMax","src","endFlag","closePopup","randomIntegerInTotalWordList","Math","floor","random","length","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","clearInterval","playEndFlag","className","countUpScore","addPoint","keyDownChar","key","shift"],"mappings":"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","sourcesContent":["window.addEventListener('load', function(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  const wordList = [\n    \"aaa\",\n    \"bbb\",\n    \"ccc\",\n    \"ddd\",\n    \"eeeeee\",\n    \"ffffff\",\n    \"gggggg\",\n    \"hhhhhh\"\n  ];\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10.png',\n    '/assets/メーターPNG/メーター20.png',\n    '/assets/メーターPNG/メーター30.png',\n    '/assets/メーターPNG/メーター40.png',\n    '/assets/メーターPNG/メーター50.png',\n    '/assets/メーターPNG/メーター60.png',\n    '/assets/メーターPNG/メーター70.png',\n    '/assets/メーターPNG/メーター80.png',\n    '/assets/メーターPNG/メーター90.png',\n    '/assets/メーターPNG/メーター100.png'\n  ]\n\n  // 表示する単語を定義する。\n  const displayWord = document.getElementById(\"displayWord\");\n  // 表示する単語を一文字ずつに分ける変数を定義する。\n  let charArrayInDisplayWord =[];\n  // 表示する単語を作成する。\n  createDisplayWord();\n\n  // プレイ開始時間を取得する。\n  const startTime = Date.now();\n  // 表示する残りのプレイ可能時間を定義する。\n  let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n  // 表示するスタート時のプレイ可能時間を定義する。\n  let initialPlayingTimeMSec = 6000;\n  // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n  setTimeout(countDownTime,0);\n  // 1秒ごとにcountDownTimeを実施するように定義する。\n  const timerId = setInterval(countDownTime,1000);\n\n  // 表示するスコアを定義する。\n  let displayScore = document.getElementById(\"displayScore\");\n  // 合計スコアの初期値を定義する。\n  let totalScore = 0;\n  // 表示するスコアに初期値を定義する。\n  displayScore.textContent = totalScore;\n  // スコアアップする基準を定義する。\n  const refTextLengthForCountUpLevel1 = 4;\n  const addScoreLevel1 = 1;\n  const addScoreLevel2 = 3;\n\n  // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n  document.addEventListener(`keydown`, keyDownCharCountUp);\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 10;\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\n  // ゲーム終了を判定するフラグを定義する。\n  let endFlag = \"0\";\n  // ゲーム終了を知らせるポップアップを定義する。\n  const closePopup = document.getElementById(\"closePopup\");\n\n  // 表示する単語を作成する処理を定義する。\n  function createDisplayWord(){\n    // 表示単語を初期化する。\n    displayWord.textContent = \"\";\n    // 0〜textListsの総数間で整数値をランダムで算出する。\n    let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n    // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n    // spanタグで閉じた単語を表示する。\n    charArrayInDisplayWord = wordList[randomIntegerInTotalWordList].split(\"\").map(function(value){\n      // spanタグを作成する。\n      let spanValue = document.createElement(\"span\");\n      // spanタグに一文字を挿入する。\n      spanValue.textContent = value;\n      // 表示する単語にspanタグで閉じた一文字を追加する。\n      displayWord.appendChild(spanValue);\n      return spanValue;\n    });\n  }\n\n  // プレイ時間をカウントダウンする処理を定義する。\n  function countDownTime(){\n    const currentTime = Date.now();\n    const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n    const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n    const remainSec = Math.ceil(remainMSec/1000);\n    let  remainSecLabel = `残り${remainSec}秒`;\n    if (remainMSec <= 0){\n      clearInterval(timerId);\n      remainSecLabel = \"\";\n      //const totalScore = score - addPoint;\n      displayScore.textContent =\"\";\n      //displayScore.className = \"transparent\";\n      displayWord.textContent =\"\";\n      //displayWord.className =\"transparent\";\n      // ゲーム終了後にplayEndFlagを1に更新する。\n      playEndFlag = \"1\";\n      // ゲーム終了後に終了を知らせるポップアップを作成する。\n      closePopup.textContent =\"終了\";\n      closePopup.className = \"closePopup\";\n      setTimeout(function(){\n        closePopup.textContent = `あなたの得点は${totalScore}点です!`;\n        closePopup.className = \"endPopup\";\n      },1000);\n    }\n    // 残りプレイ可能時間を更新する。\n    remainPlayingTime.textContent = remainSecLabel;\n  }\n\n  // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n  function countUpScore(){\n    if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n      addPoint = addScoreLevel1;\n    } else {\n      addPoint = addScoreLevel2;\n    }\n    totalScore = totalScore + addPoint;\n    displayScore.textContent = totalScore;\n    return totalScore;\n  }\n\n  // タイプした文字が表示文字と一致する場合の処理を定義する。\n  function keyDownCharCountUp(keyDownChar){\n    if(keyDownChar.key === charArrayInDisplayWord[0].textContent && endFlag===\"0\") {\n      // 文字色を変更する。\n      charArrayInDisplayWord[0].className = \"add_red\";\n      // メーターを更新する。\n      bonusCountMeter = bonusCountMeter +1;\n      // 一致した文字を配列から削除する。\n      charArrayInDisplayWord.shift();\n      // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n      if(charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord();\n      // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n      if(bonusCountMeter >= bonusCountMeterMax){\n        bonusCountMeter = 0;\n        // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n        initialPlayingTimeMSec = initialPlayingTimeMSec +3000;\n      }\n    } else if (endFlag===\"0\") {\n      // タイプミスでメーターを初期値に戻す。\n      bonusCountMeter = 0;\n    }\n    // 更新したメーターを表示する。\n    document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  }\n});\n"]},"metadata":{},"sourceType":"module"}