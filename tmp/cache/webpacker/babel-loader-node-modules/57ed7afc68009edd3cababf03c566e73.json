{"ast":null,"code":"console.log('ロードされました！'); // ゲーム開始までをカウントダウン変数を定義する。\n\nvar countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\ncountDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\nvar countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\ncountDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\nvar timerIdToStart = setInterval(countDownTimeToStart, 1000);\nwindow.addEventListener('load', function () {\n  gameStart();\n  console.log('gameStartが実行されました');\n}); // window.addEventListener('DOMContentLoaded', function(){\n// \tconsole.log(\"DOMContentLoaded：HTMLを読み込みました。\");\n// });\n\nfunction gameStart() {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = gon.wordListAll; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png']; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    countDownPopupNumber = countDownPopupNumber - 1;\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className = \"displayWordJapanese\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 1000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore + \" P\"; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n      var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語をランダムで選定する。\n\n      displayWordInList = wordList[randomIntegerInTotalWordList]; // 表示する単語の日本語訳を表示させる。\n\n      displayWordJapanese.textContent = displayWordInList.jap_trans_1; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n\n      charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function (value) {\n        // spanタグを作成する。\n        var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n        spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"00\".concat(remainSec).slice(-3), \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent = \"\";\n        displayWord.textContent = \"\";\n        displayWordJapanese.textContent = \"\"; // ゲーム終了後にplayEndFlagを1に更新する。\n\n        playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n          restartBtn.addEventListener('click', function gameReStart() {\n            console.log('クリックされました！');\n            gameStart();\n          }); //   restartBtn.innerHTML = \"<a href='./typingplay_eng'>もう一度遊ぶ</a>\";\n          //   restartBtn.className = \"restartBtn\";\n\n          backBtn.innerHTML = \"<a href='./typingplay_index'>コース選択画面に戻る</a>\";\n          backBtn.className = \"backBtn\";\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    } // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = \"\".concat(totalScore.toLocaleString(), \" P\");\n      return totalScore;\n    } // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        // 文字色を変更する。\n        charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n        bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n        charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n        if (charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord(); // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n        if (bonusCountMeter >= bonusCountMeterMax) {\n          bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n          initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n          displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n          displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n          setTimeout(function () {\n            displayBonusAddPlayTime.textContent = \"\";\n            displayBonusAddPlayTime.classList.remove('fadeout');\n          }, 2000);\n        }\n      } else if (playEndFlag === \"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountMeter = 0;\n      } // 更新したメーターを表示する。\n\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n  }\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_eng.js"],"names":["console","log","countDownPopup","document","getElementById","className","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","window","addEventListener","gameStart","wordList","gon","wordListAll","imgArray","bonusCountMeter","bonusCountMeterMax","src","displayBonusAddPlayTime","bonusAddPlayTime","clearInterval","remove","typingPlayStart","displayWord","displayWordJapanese","charArrayInDisplayWord","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","playEndFlag","randomIntegerInTotalWordList","Math","floor","random","length","displayWordInList","jap_trans_1","eng_word","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","slice","closePopup","backBtn","restartBtn","toLocaleString","gameReStart","innerHTML","countUpScore","addPoint","keyDownChar","key","shift","classList","add"],"mappings":"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","sourcesContent":["\n\tconsole.log('ロードされました！');\n\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\nwindow.addEventListener('load', function(){\n\tgameStart();\n\tconsole.log('gameStartが実行されました');\n});\n\n// window.addEventListener('DOMContentLoaded', function(){\n// \tconsole.log(\"DOMContentLoaded：HTMLを読み込みました。\");\n// });\n\n\nfunction gameStart(){\n\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  const wordList = gon.wordListAll;\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n\n\n\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n    countDownPopupNumber = countDownPopupNumber - 1;\n    if (countDownPopupNumber <= 0){\n      clearInterval(timerIdToStart);\n      countDownPopup.remove();\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  }\n\n  // ゲームを開始する処理を定義する。\n  function typingPlayStart(){\n\n    // 表示する単語を定義する。\n    const displayWord = document.getElementById(\"displayWord\");\n    displayWord.className =  \"displayWord\";\n    const displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className =  \"displayWordJapanese\";\n    // 表示する単語を一文字ずつに分ける変数を定義する。\n    let charArrayInDisplayWord =[];\n    // 表示する単語を作成する。\n    createDisplayWord();\n\n    // プレイ開始時間を取得する。\n    const startTime = Date.now();\n    // 表示する残りのプレイ可能時間を定義する。\n    let remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className =  \"remainPlayingTime\";\n    // 表示するスタート時のプレイ可能時間を定義する。\n    let initialPlayingTimeMSec = 1000;\n    // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n    setTimeout(countDownTime,0);\n    // 1秒ごとにcountDownTimeを実施するように定義する。\n    const timerId = setInterval(countDownTime,1000);\n\n    // 表示するスコアを定義する。\n    let displayScore = document.getElementById(\"displayScore\");\n    displayScore.className =  \"displayScore\";\n    // 合計スコアの初期値を定義する。\n    let totalScore = 0;\n    // 表示するスコアに初期値を定義する。\n    displayScore.textContent = totalScore + \" P\";\n    // スコアアップする基準を定義する。\n    const refTextLengthForCountUpLevel1 = 4;\n    const addScoreLevel1 = 1000;\n    const addScoreLevel2 = 3000;\n\n    // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n    document.addEventListener(`keydown`, keyDownCharCountUp);\n\n    // ゲーム終了を判定するフラグを定義する。\n    let playEndFlag = \"0\";\n\n    // 表示する単語を作成する処理を定義する。\n    function createDisplayWord(){\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\";\n      // 0〜textListsの総数間で整数値をランダムで算出する。\n      let randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n      // 表示する単語をランダムで選定する。\n      displayWordInList = wordList[randomIntegerInTotalWordList];\n\n      // 表示する単語の日本語訳を表示させる。\n      displayWordJapanese.textContent = displayWordInList.jap_trans_1;\n      // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n      charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n        // spanタグを作成する。\n        let spanValue = document.createElement(\"span\");\n        // spanタグに一文字を挿入する。\n        spanValue.textContent = value;\n        // 表示する単語にspanタグで閉じた一文字を追加する。\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    }\n\n    // プレイ時間をカウントダウンする処理を定義する。\n    function countDownTime(){\n      const currentTime = Date.now();\n      const diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      const remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      const remainSec = Math.ceil(remainMSec/1000);\n      let  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n      if (remainMSec <= 0){\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent =\"\";\n        displayWord.textContent =\"\";\n        displayWordJapanese.textContent =\"\";\n        // ゲーム終了後にplayEndFlagを1に更新する。\n        playEndFlag = \"1\";\n        // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n        const closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent =\"終了\";\n        closePopup.className = \"closePopup\";\n        // 戻るボタンを定義する。\n        const backBtn = document.getElementById(\"backBtn\");\n        // もう一度ボタンを定義する。\n        const restartBtn = document.getElementById(\"restartBtn\");\n        // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n        setTimeout(function(){\n          closePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n          closePopup.className = \"endResultPopup\";\n\t\t  restartBtn.addEventListener('click', function gameReStart(){\n\t\t\tconsole.log('クリックされました！');\n\t\t\tgameStart();\n\t\t  });\n        //   restartBtn.innerHTML = \"<a href='./typingplay_eng'>もう一度遊ぶ</a>\";\n        //   restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='./typingplay_index'>コース選択画面に戻る</a>\";\n          backBtn.className = \"backBtn\";\n        },2000);\n      }\n      // 残りプレイ可能時間を更新する。\n      remainPlayingTime.textContent = remainSecLabel;\n    }\n\n    // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n    function countUpScore(){\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = `${totalScore.toLocaleString()} P`;\n      return totalScore;\n    }\n\n    // タイプした文字が表示文字と一致する場合の処理を定義する。\n    function keyDownCharCountUp(keyDownChar){\n      if(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n        // 文字色を変更する。\n        charArrayInDisplayWord[0].className = \"add_red\";\n        // メーターを更新する。\n        bonusCountMeter = bonusCountMeter +1;\n        // 一致した文字を配列から削除する。\n        charArrayInDisplayWord.shift();\n        // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n        if(charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord();\n        // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n        if(bonusCountMeter >= bonusCountMeterMax){\n          bonusCountMeter = 0;\n          // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n          initialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n          // 延長した残りプレイ時間を表示する。\n          displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n          // 延長した残りプレイ時間をフェードアウトする。\n          displayBonusAddPlayTime.classList.add('fadeout');\n          // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n          setTimeout(function(){\n            displayBonusAddPlayTime.textContent = \"\";\n            displayBonusAddPlayTime.classList.remove('fadeout');\n          }, 2000);\n        }\n      } else if (playEndFlag===\"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountMeter = 0;\n      }\n      // 更新したメーターを表示する。\n      document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}