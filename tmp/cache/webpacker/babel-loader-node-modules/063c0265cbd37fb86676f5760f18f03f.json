{"ast":null,"code":"// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function () {\n  gameStart();\n});\n\nfunction gameStart() {\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n  var wordList = gon.wordListAll; // 表示するメーターリストを定義する。\n\n  var imgArray = ['/assets/メーターPNG/メーター0.png', '/assets/メーターPNG/メーター10_yellow.png', '/assets/メーターPNG/メーター20_yellow.png', '/assets/メーターPNG/メーター30_yellow.png', '/assets/メーターPNG/メーター40_yellow.png', '/assets/メーターPNG/メーター50_yellow.png', '/assets/メーターPNG/メーター60_yellow.png', '/assets/メーターPNG/メーター70_yellow.png', '/assets/メーターPNG/メーター80_yellow.png', '/assets/メーターPNG/メーター90_yellow.png', '/assets/メーターPNG/メーター100_yellow.png', '/assets/メーターPNG/メーター10_green.png', '/assets/メーターPNG/メーター20_green.png', '/assets/メーターPNG/メーター30_green.png', '/assets/メーターPNG/メーター40_green.png', '/assets/メーターPNG/メーター50_green.png', '/assets/メーターPNG/メーター60_green.png', '/assets/メーターPNG/メーター70_green.png', '/assets/メーターPNG/メーター80_green.png', '/assets/メーターPNG/メーター90_green.png', '/assets/メーターPNG/メーター100_green.png', '/assets/メーターPNG/メーター10_blue.png', '/assets/メーターPNG/メーター20_blue.png', '/assets/メーターPNG/メーター30_blue.png', '/assets/メーターPNG/メーター40_blue.png', '/assets/メーターPNG/メーター50_blue.png', '/assets/メーターPNG/メーター60_blue.png', '/assets/メーターPNG/メーター70_blue.png', '/assets/メーターPNG/メーター80_blue.png', '/assets/メーターPNG/メーター90_blue.png', '/assets/メーターPNG/メーター100_blue.png', '/assets/メーターPNG/メーター10_pink.png', '/assets/メーターPNG/メーター20_pink.png', '/assets/メーターPNG/メーター30_pink.png', '/assets/メーターPNG/メーター40_pink.png', '/assets/メーターPNG/メーター50_pink.png', '/assets/メーターPNG/メーター60_pink.png', '/assets/メーターPNG/メーター70_pink.png', '/assets/メーターPNG/メーター80_pink.png', '/assets/メーターPNG/メーター90_pink.png', '/assets/メーターPNG/メーター100_pink.png', '/assets/メーターPNG/メーター10_red.png', '/assets/メーターPNG/メーター20_red.png', '/assets/メーターPNG/メーター30_red.png', '/assets/メーターPNG/メーター40_red.png', '/assets/メーターPNG/メーター50_red.png', '/assets/メーターPNG/メーター60_red.png', '/assets/メーターPNG/メーター70_red.png', '/assets/メーターPNG/メーター80_red.png', '/assets/メーターPNG/メーター90_red.png', '/assets/メーターPNG/メーター100_red.png']; // 表示するメーター初期値を定義する。\n\n  var bonusCountMeter = 0; // 表示するメーター最大値を定義する。\n\n  var bonusCountMeterMax = 50; // メーターの初期値を表示する。\n\n  document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter]; // 表示するプレイ延長時間を定義する。\n\n  var displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className = \"displayBonusAddPlayTime\"; // メーター最大値に達した際の延長するプレイ時間を定義する。\n\n  var bonusAddPlayTime = 3000; // ゲーム開始までをカウントダウン変数を定義する。\n\n  var countDownPopup = document.getElementById(\"countDownPopup\"); // class属性を付与する。\n\n  countDownPopup.className = \"countDownPopup\"; // ゲーム開始までをカウントダウン変数の初期値を定義する。\n\n  var countDownPopupNumber = 3; // ゲーム開始までをカウントダウン変数の初期値を表示する。\n\n  countDownPopup.textContent = countDownPopupNumber; // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n\n  var timerIdToStart = setInterval(countDownTimeToStart, 1000); // ゲーム開始までをカウントダウンを実施する処理を定義する。\n\n  function countDownTimeToStart() {\n    countDownPopup.textContent = countDownPopupNumber;\n    countDownPopupNumber = countDownPopupNumber - 1;\n\n    if (countDownPopupNumber <= 0) {\n      clearInterval(timerIdToStart); // カウントダウンポップアップのクラスを変更し、非表示にする。\n\n      countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  } // ゲームを開始する処理を定義する。\n\n\n  function typingPlayStart() {\n    // 表示する単語を定義する。\n    var displayWord = document.getElementById(\"displayWord\");\n    displayWord.className = \"displayWord\";\n    var displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n    displayWordJapanese.className = \"displayWordJapanese\"; // 表示する単語を一文字ずつに分ける変数を定義する。\n\n    var charArrayInDisplayWord = []; // 表示する単語を作成する。\n\n    createDisplayWord(); // プレイ開始時間を取得する。\n\n    var startTime = Date.now(); // 表示する残りのプレイ可能時間を定義する。\n\n    var remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n    remainPlayingTime.className = \"remainPlayingTime\"; // 表示するスタート時のプレイ可能時間を定義する。\n\n    var initialPlayingTimeMSec = 2000; // スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\n    setTimeout(countDownTime, 0); // 1秒ごとにcountDownTimeを実施するように定義する。\n\n    var timerId = setInterval(countDownTime, 1000); // 表示するスコアを定義する。\n\n    var displayScore = document.getElementById(\"displayScore\");\n    displayScore.className = \"displayScore\"; // 合計スコアの初期値を定義する。\n\n    var totalScore = 0; // 表示するスコアに初期値を定義する。\n\n    displayScore.textContent = totalScore + \" P\"; // スコアアップする基準を定義する。\n\n    var refTextLengthForCountUpLevel1 = 4;\n    var addScoreLevel1 = 1000;\n    var addScoreLevel2 = 3000; // タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\n    document.addEventListener(\"keydown\", keyDownCharCountUp); // ゲーム終了を判定するフラグを定義する。\n\n    var playEndFlag = \"0\"; // 表示する単語を作成する処理を定義する。\n\n    function createDisplayWord() {\n      // 表示単語を初期化する。\n      displayWord.textContent = \"\"; // 0〜textListsの総数間で整数値をランダムで算出する。\n\n      var randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length); // 表示する単語をランダムで選定する。\n\n      displayWordInList = wordList[randomIntegerInTotalWordList]; // 表示する単語の日本語訳を表示させる。\n\n      displayWordJapanese.textContent = displayWordInList.jap_trans_1; // 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n      // spanタグで閉じた単語を表示する。\n\n      charArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function (value) {\n        // spanタグを作成する。\n        var spanValue = document.createElement(\"span\"); // spanタグに一文字を挿入する。\n\n        spanValue.textContent = value; // 表示する単語にspanタグで閉じた一文字を追加する。\n\n        displayWord.appendChild(spanValue);\n        return spanValue;\n      });\n    } // プレイ時間をカウントダウンする処理を定義する。\n\n\n    function countDownTime() {\n      var currentTime = Date.now();\n      var diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n      var remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n      var remainSec = Math.ceil(remainMSec / 1000);\n      var remainSecLabel = \"\\u6B8B\\u308A\".concat(\"00\".concat(remainSec).slice(-3), \"\\u79D2\");\n\n      if (remainMSec <= 0) {\n        clearInterval(timerId);\n        remainSecLabel = \"\";\n        displayScore.textContent = \"\";\n        displayWord.textContent = \"\";\n        displayWordJapanese.textContent = \"\"; // ゲーム終了後にplayEndFlagを1に更新する。\n\n        playEndFlag = \"1\"; // ゲーム終了後に終了を知らせるポップアップを作成する。\n        // ゲーム終了を知らせるポップアップを定義する。\n\n        var closePopup = document.getElementById(\"closePopup\");\n        closePopup.textContent = \"終了\";\n        closePopup.className = \"closePopup\"; // 戻るボタンを定義する。\n\n        var backBtn = document.getElementById(\"backBtn\"); // もう一度ボタンを定義する。\n\n        var restartBtn = document.getElementById(\"restartBtn\"); // 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\n        setTimeout(function () {\n          closePopup.textContent = \"\\u3042\\u306A\\u305F\\u306E\\u5F97\\u70B9\\u306F\".concat(totalScore.toLocaleString(), \"\\u70B9\\u3067\\u3059!\");\n          closePopup.className = \"endResultPopup\";\n          restartBtn.addEventListener('click', function gameReStart() {\n            console.log('クリックされました！');\n            gameStart();\n          });\n          restartBtn.innerHTML = \"<a href='./typingplay_eng'>もう一度遊ぶ</a>\";\n          restartBtn.className = \"restartBtn\";\n          backBtn.innerHTML = \"<a href='./typingplay_index'>コース選択画面に戻る</a>\";\n          backBtn.className = \"backBtn\";\n        }, 2000);\n      } // 残りプレイ可能時間を更新する。\n\n\n      remainPlayingTime.textContent = remainSecLabel;\n    } // スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\n\n    function countUpScore() {\n      if (displayWord.textContent.length < refTextLengthForCountUpLevel1) {\n        addPoint = addScoreLevel1;\n      } else {\n        addPoint = addScoreLevel2;\n      }\n\n      totalScore = totalScore + addPoint;\n      displayScore.textContent = \"\".concat(totalScore.toLocaleString(), \" P\");\n      return totalScore;\n    } // タイプした文字が表示文字と一致する場合の処理を定義する。\n\n\n    function keyDownCharCountUp(keyDownChar) {\n      if (keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag === \"0\") {\n        // 文字色を変更する。\n        charArrayInDisplayWord[0].className = \"add_red\"; // メーターを更新する。\n\n        bonusCountMeter = bonusCountMeter + 1; // 一致した文字を配列から削除する。\n\n        charArrayInDisplayWord.shift(); // 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\n        if (charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord(); // メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\n        if (bonusCountMeter >= bonusCountMeterMax) {\n          bonusCountMeter = 0; // 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\n          initialPlayingTimeMSec = initialPlayingTimeMSec + bonusAddPlayTime; // 延長した残りプレイ時間を表示する。\n\n          displayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime / 1000) + \"秒\"; // 延長した残りプレイ時間をフェードアウトする。\n\n          displayBonusAddPlayTime.classList.add('fadeout'); // fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\n          setTimeout(function () {\n            displayBonusAddPlayTime.textContent = \"\";\n            displayBonusAddPlayTime.classList.remove('fadeout');\n          }, 2000);\n        }\n      } else if (playEndFlag === \"0\") {\n        // タイプミスでメーターを初期値に戻す。\n        bonusCountMeter = 0;\n      } // 更新したメーターを表示する。\n\n\n      document.getElementById(\"meterImg\").src = imgArray[bonusCountMeter];\n    }\n  }\n}\n\n;","map":{"version":3,"sources":["/Users/mondenhiroki/projects/eigomonster/app/javascript/packs/typingplay_eng.js"],"names":["window","addEventListener","gameStart","wordList","gon","wordListAll","imgArray","bonusCountMeter","bonusCountMeterMax","document","getElementById","src","displayBonusAddPlayTime","className","bonusAddPlayTime","countDownPopup","countDownPopupNumber","textContent","timerIdToStart","setInterval","countDownTimeToStart","clearInterval","typingPlayStart","displayWord","displayWordJapanese","charArrayInDisplayWord","createDisplayWord","startTime","Date","now","remainPlayingTime","initialPlayingTimeMSec","setTimeout","countDownTime","timerId","displayScore","totalScore","refTextLengthForCountUpLevel1","addScoreLevel1","addScoreLevel2","keyDownCharCountUp","playEndFlag","randomIntegerInTotalWordList","Math","floor","random","length","displayWordInList","jap_trans_1","eng_word","split","map","value","spanValue","createElement","appendChild","currentTime","diffBetweenCurrentTimeAndStartTime","remainMSec","remainSec","ceil","remainSecLabel","slice","closePopup","backBtn","restartBtn","toLocaleString","gameReStart","console","log","innerHTML","countUpScore","addPoint","keyDownChar","key","shift","classList","add","remove"],"mappings":"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","sourcesContent":["// ゲーム開始画面から遷移してきた際に処理を実施する。\nwindow.addEventListener('load', function(){\n\tgameStart();\n});\n\nfunction gameStart(){\n\n  // 表示する単語リストを定義する。\n  // chromeの場合\"ff\"が正常に動作しない。\n\n  const wordList = gon.wordListAll;\n\n  // 表示するメーターリストを定義する。\n  const imgArray =[\n    '/assets/メーターPNG/メーター0.png',\n    '/assets/メーターPNG/メーター10_yellow.png',\n    '/assets/メーターPNG/メーター20_yellow.png',\n    '/assets/メーターPNG/メーター30_yellow.png',\n    '/assets/メーターPNG/メーター40_yellow.png',\n    '/assets/メーターPNG/メーター50_yellow.png',\n    '/assets/メーターPNG/メーター60_yellow.png',\n    '/assets/メーターPNG/メーター70_yellow.png',\n    '/assets/メーターPNG/メーター80_yellow.png',\n    '/assets/メーターPNG/メーター90_yellow.png',\n    '/assets/メーターPNG/メーター100_yellow.png',\n\t'/assets/メーターPNG/メーター10_green.png',\n    '/assets/メーターPNG/メーター20_green.png',\n    '/assets/メーターPNG/メーター30_green.png',\n    '/assets/メーターPNG/メーター40_green.png',\n    '/assets/メーターPNG/メーター50_green.png',\n    '/assets/メーターPNG/メーター60_green.png',\n    '/assets/メーターPNG/メーター70_green.png',\n    '/assets/メーターPNG/メーター80_green.png',\n    '/assets/メーターPNG/メーター90_green.png',\n    '/assets/メーターPNG/メーター100_green.png',\n\t'/assets/メーターPNG/メーター10_blue.png',\n    '/assets/メーターPNG/メーター20_blue.png',\n    '/assets/メーターPNG/メーター30_blue.png',\n    '/assets/メーターPNG/メーター40_blue.png',\n    '/assets/メーターPNG/メーター50_blue.png',\n    '/assets/メーターPNG/メーター60_blue.png',\n    '/assets/メーターPNG/メーター70_blue.png',\n    '/assets/メーターPNG/メーター80_blue.png',\n    '/assets/メーターPNG/メーター90_blue.png',\n    '/assets/メーターPNG/メーター100_blue.png',\n\t'/assets/メーターPNG/メーター10_pink.png',\n    '/assets/メーターPNG/メーター20_pink.png',\n    '/assets/メーターPNG/メーター30_pink.png',\n    '/assets/メーターPNG/メーター40_pink.png',\n    '/assets/メーターPNG/メーター50_pink.png',\n    '/assets/メーターPNG/メーター60_pink.png',\n    '/assets/メーターPNG/メーター70_pink.png',\n    '/assets/メーターPNG/メーター80_pink.png',\n    '/assets/メーターPNG/メーター90_pink.png',\n    '/assets/メーターPNG/メーター100_pink.png',\n\t'/assets/メーターPNG/メーター10_red.png',\n    '/assets/メーターPNG/メーター20_red.png',\n    '/assets/メーターPNG/メーター30_red.png',\n    '/assets/メーターPNG/メーター40_red.png',\n    '/assets/メーターPNG/メーター50_red.png',\n    '/assets/メーターPNG/メーター60_red.png',\n    '/assets/メーターPNG/メーター70_red.png',\n    '/assets/メーターPNG/メーター80_red.png',\n    '/assets/メーターPNG/メーター90_red.png',\n    '/assets/メーターPNG/メーター100_red.png'\n  ];\n\n  // 表示するメーター初期値を定義する。\n  let bonusCountMeter = 0;\n  // 表示するメーター最大値を定義する。\n  const bonusCountMeterMax = 50;\n  // メーターの初期値を表示する。\n  document.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n  // 表示するプレイ延長時間を定義する。\n  const displayBonusAddPlayTime = document.getElementById(\"displayBonusAddPlayTime\");\n  displayBonusAddPlayTime.className =  \"displayBonusAddPlayTime\";\n  // メーター最大値に達した際の延長するプレイ時間を定義する。\n  const bonusAddPlayTime = 3000;\n\n\n  // ゲーム開始までをカウントダウン変数を定義する。\n  let countDownPopup = document.getElementById(\"countDownPopup\");\n  // class属性を付与する。\n  countDownPopup.className = \"countDownPopup\";\n  // ゲーム開始までをカウントダウン変数の初期値を定義する。\n  let countDownPopupNumber = 3;\n  // ゲーム開始までをカウントダウン変数の初期値を表示する。\n  countDownPopup.textContent = countDownPopupNumber;\n  // ゲーム開始までをカウントダウンを1秒ごとに実施するように定義する。\n  const timerIdToStart = setInterval(countDownTimeToStart,1000);\n\n\n  // ゲーム開始までをカウントダウンを実施する処理を定義する。\n  function countDownTimeToStart(){\n\tcountDownPopup.textContent = countDownPopupNumber;\n    countDownPopupNumber = countDownPopupNumber - 1;\n    if (countDownPopupNumber <= 0){\n      clearInterval(timerIdToStart);\n\t  // カウントダウンポップアップのクラスを変更し、非表示にする。\n\t  countDownPopup.className = \"countDownPopupAfterClose\";\n      typingPlayStart();\n    } else {\n      countDownPopup.textContent = countDownPopupNumber;\n    }\n  }\n\n\t// ゲームを開始する処理を定義する。\n\tfunction typingPlayStart(){\n\n\t\t// 表示する単語を定義する。\n\t\tconst displayWord = document.getElementById(\"displayWord\");\n\t\tdisplayWord.className =  \"displayWord\";\n\t\tconst displayWordJapanese = document.getElementById(\"displayWordJapanese\");\n\t\tdisplayWordJapanese.className =  \"displayWordJapanese\";\n\t\t// 表示する単語を一文字ずつに分ける変数を定義する。\n\t\tlet charArrayInDisplayWord =[];\n\t\t// 表示する単語を作成する。\n\t\tcreateDisplayWord();\n\n\t\t// プレイ開始時間を取得する。\n\t\tconst startTime = Date.now();\n\t\t// 表示する残りのプレイ可能時間を定義する。\n\t\tlet remainPlayingTime = document.getElementById(\"remainPlayingTime\");\n\t\tremainPlayingTime.className =  \"remainPlayingTime\";\n\t\t// 表示するスタート時のプレイ可能時間を定義する。\n\t\tlet initialPlayingTimeMSec = 2000;\n\t\t// スタート時に残りのプレイ可能時間の初期値を表示するためにcountDownTimeを実施する。\n\t\tsetTimeout(countDownTime,0);\n\t\t// 1秒ごとにcountDownTimeを実施するように定義する。\n\t\tconst timerId = setInterval(countDownTime,1000);\n\n\t\t// 表示するスコアを定義する。\n\t\tlet displayScore = document.getElementById(\"displayScore\");\n\t\tdisplayScore.className =  \"displayScore\";\n\t\t// 合計スコアの初期値を定義する。\n\t\tlet totalScore = 0;\n\t\t// 表示するスコアに初期値を定義する。\n\t\tdisplayScore.textContent = totalScore + \" P\";\n\t\t// スコアアップする基準を定義する。\n\t\tconst refTextLengthForCountUpLevel1 = 4;\n\t\tconst addScoreLevel1 = 1000;\n\t\tconst addScoreLevel2 = 3000;\n\n\t\t// タイプされる度にkeyDownCharCountUpを実施するように定義する。\n\t\tdocument.addEventListener(`keydown`, keyDownCharCountUp);\n\n\t\t// ゲーム終了を判定するフラグを定義する。\n\t\tlet playEndFlag = \"0\";\n\n\t\t// 表示する単語を作成する処理を定義する。\n\t\tfunction createDisplayWord(){\n\t\t// 表示単語を初期化する。\n\t\tdisplayWord.textContent = \"\";\n\t\t// 0〜textListsの総数間で整数値をランダムで算出する。\n\t\tlet randomIntegerInTotalWordList = Math.floor(Math.random() * wordList.length);\n\t\t// 表示する単語をランダムで選定する。\n\t\tdisplayWordInList = wordList[randomIntegerInTotalWordList];\n\n\t\t// 表示する単語の日本語訳を表示させる。\n\t\tdisplayWordJapanese.textContent = displayWordInList.jap_trans_1;\n\t\t// 表示する単語を一文字ごとに区切り、spanタグで閉じる。\n\t\t// spanタグで閉じた単語を表示する。\n\t\tcharArrayInDisplayWord = displayWordInList.eng_word.split(\"\").map(function(value){\n\t\t\t// spanタグを作成する。\n\t\t\tlet spanValue = document.createElement(\"span\");\n\t\t\t// spanタグに一文字を挿入する。\n\t\t\tspanValue.textContent = value;\n\t\t\t// 表示する単語にspanタグで閉じた一文字を追加する。\n\t\t\tdisplayWord.appendChild(spanValue);\n\t\t\treturn spanValue;\n\t\t});\n\t\t}\n\n\t\t// プレイ時間をカウントダウンする処理を定義する。\n\t\tfunction countDownTime(){\n\t\tconst currentTime = Date.now();\n\t\tconst diffBetweenCurrentTimeAndStartTime = currentTime - startTime;\n\t\tconst remainMSec = initialPlayingTimeMSec - diffBetweenCurrentTimeAndStartTime;\n\t\tconst remainSec = Math.ceil(remainMSec/1000);\n\t\tlet  remainSecLabel = `残り${(`00${remainSec}` ).slice( -3 )}秒`;\n\t\tif (remainMSec <= 0){\n\t\t\tclearInterval(timerId);\n\t\t\tremainSecLabel = \"\";\n\t\t\tdisplayScore.textContent =\"\";\n\t\t\tdisplayWord.textContent =\"\";\n\t\t\tdisplayWordJapanese.textContent =\"\";\n\t\t\t// ゲーム終了後にplayEndFlagを1に更新する。\n\t\t\tplayEndFlag = \"1\";\n\t\t\t// ゲーム終了後に終了を知らせるポップアップを作成する。\n\t\t\t// ゲーム終了を知らせるポップアップを定義する。\n\t\t\tconst closePopup = document.getElementById(\"closePopup\");\n\t\t\tclosePopup.textContent =\"終了\";\n\t\t\tclosePopup.className = \"closePopup\";\n\t\t\t// 戻るボタンを定義する。\n\t\t\tconst backBtn = document.getElementById(\"backBtn\");\n\t\t\t// もう一度ボタンを定義する。\n\t\t\tconst restartBtn = document.getElementById(\"restartBtn\");\n\t\t\t// 2秒後に得点を表示させる。また、もう一度ボタンと戻るボタンを表示させる。\n\t\t\tsetTimeout(function(){\n\t\t\tclosePopup.textContent = `あなたの得点は${totalScore.toLocaleString()}点です!`;\n\t\t\tclosePopup.className = \"endResultPopup\";\n\t\t\trestartBtn.addEventListener('click', function gameReStart(){\n\t\t\t\tconsole.log('クリックされました！');\n\t\t\t\tgameStart();\n\t\t\t});\n\t\t\trestartBtn.innerHTML = \"<a href='./typingplay_eng'>もう一度遊ぶ</a>\";\n\t\t\trestartBtn.className = \"restartBtn\";\n\t\t\tbackBtn.innerHTML = \"<a href='./typingplay_index'>コース選択画面に戻る</a>\";\n\t\t\tbackBtn.className = \"backBtn\";\n\t\t\t},2000);\n\t\t}\n\t\t// 残りプレイ可能時間を更新する。\n\t\tremainPlayingTime.textContent = remainSecLabel;\n\t\t}\n\n\t\t// スコアをアップし、現在のtotalScoreを表示する処理を定義する。\n\t\tfunction countUpScore(){\n\t\tif (displayWord.textContent.length < refTextLengthForCountUpLevel1){\n\t\t\taddPoint = addScoreLevel1;\n\t\t} else {\n\t\t\taddPoint = addScoreLevel2;\n\t\t}\n\t\ttotalScore = totalScore + addPoint;\n\t\tdisplayScore.textContent = `${totalScore.toLocaleString()} P`;\n\t\treturn totalScore;\n\t\t}\n\n\t\t// タイプした文字が表示文字と一致する場合の処理を定義する。\n\t\tfunction keyDownCharCountUp(keyDownChar){\n\t\tif(keyDownChar.key === charArrayInDisplayWord[0].textContent && playEndFlag===\"0\") {\n\t\t\t// 文字色を変更する。\n\t\t\tcharArrayInDisplayWord[0].className = \"add_red\";\n\t\t\t// メーターを更新する。\n\t\t\tbonusCountMeter = bonusCountMeter +1;\n\t\t\t// 一致した文字を配列から削除する。\n\t\t\tcharArrayInDisplayWord.shift();\n\t\t\t// 表示文字全てタイプした場合、スコアアップ処理を実施し、次の表示文字を作成する処理を実施する。\n\t\t\tif(charArrayInDisplayWord.length === 0) countUpScore(), createDisplayWord();\n\t\t\t// メーターがメーター最大値以上になった場合、メーターを初期化し、プレイ可能時間を延長する。\n\t\t\tif(bonusCountMeter >= bonusCountMeterMax){\n\t\t\tbonusCountMeter = 0;\n\t\t\t// 初期プレイ時間を更新することで、残りプレイ可能時間を延長する。\n\t\t\tinitialPlayingTimeMSec = initialPlayingTimeMSec +bonusAddPlayTime;\n\t\t\t// 延長した残りプレイ時間を表示する。\n\t\t\tdisplayBonusAddPlayTime.textContent = \"+ \" + Math.ceil(bonusAddPlayTime/1000) + \"秒\";\n\t\t\t// 延長した残りプレイ時間をフェードアウトする。\n\t\t\tdisplayBonusAddPlayTime.classList.add('fadeout');\n\t\t\t// fadeoutのclassを取り除くことで、2回目以降も延長した残りプレイ時間が表示されるようにする。\n\t\t\tsetTimeout(function(){\n\t\t\t\tdisplayBonusAddPlayTime.textContent = \"\";\n\t\t\t\tdisplayBonusAddPlayTime.classList.remove('fadeout');\n\t\t\t}, 2000);\n\t\t\t}\n\t\t} else if (playEndFlag===\"0\") {\n\t\t\t// タイプミスでメーターを初期値に戻す。\n\t\t\tbonusCountMeter = 0;\n\t\t}\n\t\t// 更新したメーターを表示する。\n\t\tdocument.getElementById(\"meterImg\").src=imgArray[bonusCountMeter];\n\t\t}\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}